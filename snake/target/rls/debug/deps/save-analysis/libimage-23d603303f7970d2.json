{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4","program":"/home/andy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","image","--edition=2018","/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"bmp\"","--cfg","feature=\"dds\"","--cfg","feature=\"default\"","--cfg","feature=\"dxt\"","--cfg","feature=\"farbfeld\"","--cfg","feature=\"gif\"","--cfg","feature=\"hdr\"","--cfg","feature=\"ico\"","--cfg","feature=\"jpeg\"","--cfg","feature=\"jpeg_rayon\"","--cfg","feature=\"png\"","--cfg","feature=\"pnm\"","--cfg","feature=\"scoped_threadpool\"","--cfg","feature=\"tga\"","--cfg","feature=\"tiff\"","--cfg","feature=\"webp\"","-C","metadata=23d603303f7970d2","-C","extra-filename=-23d603303f7970d2","--out-dir","/home/andy/Rustprojects/snake/target/rls/debug/deps","-L","dependency=/home/andy/Rustprojects/snake/target/rls/debug/deps","--extern","bytemuck=/home/andy/Rustprojects/snake/target/rls/debug/deps/libbytemuck-30a54d93eb128501.rmeta","--extern","byteorder=/home/andy/Rustprojects/snake/target/rls/debug/deps/libbyteorder-253ed1b76243e9db.rmeta","--extern","gif=/home/andy/Rustprojects/snake/target/rls/debug/deps/libgif-ed300e435316b6d2.rmeta","--extern","jpeg=/home/andy/Rustprojects/snake/target/rls/debug/deps/libjpeg_decoder-89bd058c563c98c1.rmeta","--extern","num_iter=/home/andy/Rustprojects/snake/target/rls/debug/deps/libnum_iter-fdc2305c13d9b9a0.rmeta","--extern","num_rational=/home/andy/Rustprojects/snake/target/rls/debug/deps/libnum_rational-501129b7f292fc23.rmeta","--extern","num_traits=/home/andy/Rustprojects/snake/target/rls/debug/deps/libnum_traits-c30dd237327482c2.rmeta","--extern","png=/home/andy/Rustprojects/snake/target/rls/debug/deps/libpng-4ba69307928f8f10.rmeta","--extern","scoped_threadpool=/home/andy/Rustprojects/snake/target/rls/debug/deps/libscoped_threadpool-2a4aa9c24b4981a2.rmeta","--extern","tiff=/home/andy/Rustprojects/snake/target/rls/debug/deps/libtiff-193f4d220ca2da19.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/andy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/andy/Rustprojects/snake/target/rls/debug/deps/libimage-23d603303f7970d2.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[17368216903368510518,14764574150546918612]},"crate_root":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src","external_crates":[{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","num":15,"id":{"name":"tiff","disambiguator":[11170687829433475816,12819773745649007945]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","num":16,"id":{"name":"byteorder","disambiguator":[10719404080946289605,17148540255389135738]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","num":17,"id":{"name":"lzw","disambiguator":[6781108430713733430,15744139706019695448]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","num":18,"id":{"name":"miniz_oxide","disambiguator":[7325265990701043524,6232005654312175406]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","num":19,"id":{"name":"adler32","disambiguator":[861758706371618897,2776325549461234330]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","num":20,"id":{"name":"num_traits","disambiguator":[17866579788280904889,8893385662677143502]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","num":21,"id":{"name":"gif","disambiguator":[9181363402201432486,4306522729116638875]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","num":22,"id":{"name":"color_quant","disambiguator":[3826272445679226980,17242466669529815838]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","num":23,"id":{"name":"num_rational","disambiguator":[9375925223736500862,14346740940130956001]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","num":24,"id":{"name":"num_integer","disambiguator":[6615314100295200538,6263506198981215227]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","num":25,"id":{"name":"scoped_threadpool","disambiguator":[17785970441717650540,6630389159409945323]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","num":26,"id":{"name":"jpeg_decoder","disambiguator":[1351822336265611457,13939430595550043410]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","num":27,"id":{"name":"rayon","disambiguator":[9239608825173655953,4648160709673354102]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","num":28,"id":{"name":"either","disambiguator":[10797844229121683282,1910894118344788778]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","num":29,"id":{"name":"crossbeam_deque","disambiguator":[13451153652030510261,8662342338441898435]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","num":30,"id":{"name":"crossbeam_epoch","disambiguator":[4734424276384925695,15755126270590407988]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","num":31,"id":{"name":"cfg_if","disambiguator":[905820604123660737,9080961431952796619]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","num":32,"id":{"name":"maybe_uninit","disambiguator":[9925295721960399709,5075810066591430732]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","num":33,"id":{"name":"crossbeam_utils","disambiguator":[768677321291891816,15241007223462336386]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","num":34,"id":{"name":"lazy_static","disambiguator":[9660684555614800310,8568331244489293542]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","num":35,"id":{"name":"memoffset","disambiguator":[7093462231384929601,15510462489894624649]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","num":36,"id":{"name":"scopeguard","disambiguator":[5081943333480440636,9076196664652206448]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","num":37,"id":{"name":"rayon_core","disambiguator":[11227397336038083748,9120908035404142390]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","num":38,"id":{"name":"crossbeam_queue","disambiguator":[15382911557679307740,416940611533575527]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","num":39,"id":{"name":"num_cpus","disambiguator":[14986389098927191483,1564097705036378645]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","num":40,"id":{"name":"libc","disambiguator":[8533595843566128841,250434115463389908]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","num":41,"id":{"name":"num_iter","disambiguator":[11343062976480275092,8400454926734290908]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","num":42,"id":{"name":"png","disambiguator":[119709801023927192,3989416119261899757]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","num":43,"id":{"name":"bitflags","disambiguator":[381175081479133518,10994153786536176848]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","num":44,"id":{"name":"deflate","disambiguator":[7281344252934263751,3606716524291811288]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","num":45,"id":{"name":"crc32fast","disambiguator":[9443685600815269936,265830247737057692]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","num":46,"id":{"name":"inflate","disambiguator":[15339872140117904692,17688759842113427392]}},{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","num":47,"id":{"name":"bytemuck","disambiguator":[2477597894825285484,7535403522705531861]}}],"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":0,"byte_end":8716,"line_start":1,"line_end":252,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":5058},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5614,"byte_end":5623,"line_start":117,"line_end":117,"column_start":24,"column_end":33},"alias_span":null,"name":"ColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5097},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5625,"byte_end":5642,"line_start":117,"line_end":117,"column_start":35,"column_end":52},"alias_span":null,"name":"ExtendedColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5521},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5669,"byte_end":5673,"line_start":119,"line_end":119,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5608},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5675,"byte_end":5680,"line_start":119,"line_end":119,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5463},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5682,"byte_end":5685,"line_start":119,"line_end":119,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5550},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5687,"byte_end":5691,"line_start":119,"line_end":119,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5492},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5693,"byte_end":5696,"line_start":119,"line_end":119,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5579},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5698,"byte_end":5702,"line_start":119,"line_end":119,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3710},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5729,"byte_end":5739,"line_start":121,"line_end":121,"column_start":24,"column_end":34},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":90},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5741,"byte_end":5752,"line_start":121,"line_end":121,"column_start":36,"column_end":47},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3531},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5779,"byte_end":5795,"line_start":123,"line_end":123,"column_start":24,"column_end":40},"alias_span":null,"name":"AnimationDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3562},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5813,"byte_end":5825,"line_start":124,"line_end":124,"column_start":17,"column_end":29},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3549},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5843,"byte_end":5859,"line_start":125,"line_end":125,"column_start":17,"column_end":33},"alias_span":null,"name":"GenericImageView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3512},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5877,"byte_end":5889,"line_start":126,"line_end":126,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3525},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5907,"byte_end":5922,"line_start":127,"line_end":127,"column_start":17,"column_end":32},"alias_span":null,"name":"ImageDecoderExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3534},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5940,"byte_end":5952,"line_start":128,"line_end":128,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageEncoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5721},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5970,"byte_end":5981,"line_start":129,"line_end":129,"column_start":17,"column_end":28},"alias_span":null,"name":"ImageFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5764},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5999,"byte_end":6016,"line_start":130,"line_end":130,"column_start":17,"column_end":34},"alias_span":null,"name":"ImageOutputFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5798},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6034,"byte_end":6042,"line_start":131,"line_end":131,"column_start":17,"column_end":25},"alias_span":null,"name":"Progress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3536},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6089,"byte_end":6095,"line_start":133,"line_end":133,"column_start":17,"column_end":23},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3574},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6113,"byte_end":6121,"line_start":134,"line_end":134,"column_start":17,"column_end":25},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3099},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6168,"byte_end":6182,"line_start":137,"line_end":137,"column_start":18,"column_end":32},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3098},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6201,"byte_end":6210,"line_start":138,"line_end":138,"column_start":18,"column_end":27},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5047},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6261,"byte_end":6272,"line_start":140,"line_end":140,"column_start":18,"column_end":29},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3096},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6291,"byte_end":6299,"line_start":141,"line_end":141,"column_start":18,"column_end":26},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3097},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6318,"byte_end":6327,"line_start":142,"line_end":142,"column_start":18,"column_end":27},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3903},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6352,"byte_end":6363,"line_start":144,"line_end":144,"column_start":22,"column_end":33},"alias_span":null,"name":"FlatSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3627},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6400,"byte_end":6409,"line_start":147,"line_end":147,"column_start":25,"column_end":34},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3649},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6411,"byte_end":6416,"line_start":147,"line_end":147,"column_start":36,"column_end":41},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":517},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6486,"byte_end":6498,"line_start":150,"line_end":150,"column_start":37,"column_end":49},"alias_span":null,"name":"guess_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":504},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6500,"byte_end":6504,"line_start":150,"line_end":150,"column_start":51,"column_end":55},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3454},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6533,"byte_end":6549,"line_start":151,"line_end":151,"column_start":27,"column_end":43},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3455},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6551,"byte_end":6579,"line_start":151,"line_end":151,"column_start":45,"column_end":73},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3446},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6581,"byte_end":6585,"line_start":151,"line_end":151,"column_start":75,"column_end":79},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3450},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6606,"byte_end":6617,"line_start":152,"line_end":152,"column_start":20,"column_end":31},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3452},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6619,"byte_end":6642,"line_start":152,"line_end":152,"column_start":33,"column_end":56},"alias_span":null,"name":"save_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3448},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6644,"byte_end":6660,"line_start":152,"line_end":152,"column_start":58,"column_end":74},"alias_span":null,"name":"image_dimensions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5688},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6689,"byte_end":6701,"line_start":154,"line_end":154,"column_start":26,"column_end":38},"alias_span":null,"name":"DynamicImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5027},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6731,"byte_end":6736,"line_start":156,"line_end":156,"column_start":28,"column_end":33},"alias_span":null,"name":"Delay","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5020},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6738,"byte_end":6743,"line_start":156,"line_end":156,"column_start":35,"column_end":40},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2776},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6745,"byte_end":6751,"line_start":156,"line_end":156,"column_start":42,"column_end":48},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3083},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6974,"byte_end":6987,"line_start":165,"line_end":165,"column_start":9,"column_end":22},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":116}},{"kind":"Use","ref_id":{"krate":0,"index":2923},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6997,"byte_end":7012,"line_start":166,"line_end":166,"column_start":9,"column_end":24},"alias_span":null,"name":"EnumeratePixels","value":"","parent":{"krate":0,"index":116}},{"kind":"Use","ref_id":{"krate":0,"index":2956},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7022,"byte_end":7040,"line_start":167,"line_end":167,"column_start":9,"column_end":27},"alias_span":null,"name":"EnumeratePixelsMut","value":"","parent":{"krate":0,"index":116}},{"kind":"Use","ref_id":{"krate":0,"index":2940},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7050,"byte_end":7063,"line_start":168,"line_end":168,"column_start":9,"column_end":22},"alias_span":null,"name":"EnumerateRows","value":"","parent":{"krate":0,"index":116}},{"kind":"Use","ref_id":{"krate":0,"index":2973},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7073,"byte_end":7089,"line_start":169,"line_end":169,"column_start":9,"column_end":25},"alias_span":null,"name":"EnumerateRowsMut","value":"","parent":{"krate":0,"index":116}},{"kind":"Use","ref_id":{"krate":0,"index":2847},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7099,"byte_end":7105,"line_start":170,"line_end":170,"column_start":9,"column_end":15},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":116}},{"kind":"Use","ref_id":{"krate":0,"index":2866},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7115,"byte_end":7124,"line_start":171,"line_end":171,"column_start":9,"column_end":18},"alias_span":null,"name":"PixelsMut","value":"","parent":{"krate":0,"index":116}},{"kind":"Use","ref_id":{"krate":0,"index":2885},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7134,"byte_end":7138,"line_start":172,"line_end":172,"column_start":9,"column_end":13},"alias_span":null,"name":"Rows","value":"","parent":{"krate":0,"index":116}},{"kind":"Use","ref_id":{"krate":0,"index":2904},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7148,"byte_end":7155,"line_start":173,"line_end":173,"column_start":9,"column_end":16},"alias_span":null,"name":"RowsMut","value":"","parent":{"krate":0,"index":116}},{"kind":"Use","ref_id":{"krate":0,"index":3862},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/mod.rs","byte_start":26506,"byte_end":26510,"line_start":6,"line_end":6,"column_start":21,"column_end":25},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":127}},{"kind":"Use","ref_id":{"krate":0,"index":3887},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":41819,"byte_end":41829,"line_start":7,"line_end":7,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":3892},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":41867,"byte_end":41877,"line_start":9,"line_end":9,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":3894},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":41879,"byte_end":41887,"line_start":9,"line_end":9,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":3896},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":41889,"byte_end":41897,"line_start":9,"line_end":9,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":3888},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":41899,"byte_end":41906,"line_start":9,"line_end":9,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":3890},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":41908,"byte_end":41916,"line_start":9,"line_end":9,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":240},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":41975,"byte_end":41990,"line_start":13,"line_end":13,"column_start":5,"column_end":20},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":252},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":41992,"byte_end":42016,"line_start":13,"line_end":13,"column_start":22,"column_end":46},"alias_span":null,"name":"flip_horizontal_in_place","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":242},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42018,"byte_end":42031,"line_start":13,"line_end":13,"column_start":48,"column_end":61},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":254},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42033,"byte_end":42055,"line_start":13,"line_end":13,"column_start":63,"column_end":85},"alias_span":null,"name":"flip_vertical_in_place","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":227},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42057,"byte_end":42066,"line_start":13,"line_end":13,"column_start":87,"column_end":96},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":250},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42072,"byte_end":42090,"line_start":14,"line_end":14,"column_start":5,"column_end":23},"alias_span":null,"name":"rotate180_in_place","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":229},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42092,"byte_end":42101,"line_start":14,"line_end":14,"column_start":25,"column_end":34},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":225},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42103,"byte_end":42111,"line_start":14,"line_end":14,"column_start":36,"column_end":44},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":234},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42113,"byte_end":42125,"line_start":14,"line_end":14,"column_start":46,"column_end":58},"alias_span":null,"name":"rotate180_in","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":231},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42127,"byte_end":42138,"line_start":14,"line_end":14,"column_start":60,"column_end":71},"alias_span":null,"name":"rotate90_in","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":237},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42140,"byte_end":42152,"line_start":14,"line_end":14,"column_start":73,"column_end":85},"alias_span":null,"name":"rotate270_in","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":244},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42154,"byte_end":42172,"line_start":14,"line_end":14,"column_start":87,"column_end":105},"alias_span":null,"name":"flip_horizontal_in","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":247},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42174,"byte_end":42190,"line_start":14,"line_end":14,"column_start":107,"column_end":123},"alias_span":null,"name":"flip_vertical_in","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":396},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42237,"byte_end":42241,"line_start":18,"line_end":18,"column_start":24,"column_end":28},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":389},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42243,"byte_end":42252,"line_start":18,"line_end":18,"column_start":30,"column_end":39},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":394},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42254,"byte_end":42260,"line_start":18,"line_end":18,"column_start":41,"column_end":47},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":366},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42262,"byte_end":42271,"line_start":18,"line_end":18,"column_start":49,"column_end":58},"alias_span":null,"name":"thumbnail","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":399},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42273,"byte_end":42282,"line_start":18,"line_end":18,"column_start":60,"column_end":69},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":284},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42332,"byte_end":42340,"line_start":21,"line_end":21,"column_start":26,"column_end":34},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":279},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42342,"byte_end":42350,"line_start":21,"line_end":21,"column_start":36,"column_end":44},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":311},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42352,"byte_end":42358,"line_start":21,"line_end":21,"column_start":46,"column_end":52},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":275},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42360,"byte_end":42369,"line_start":21,"line_end":21,"column_start":54,"column_end":63},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":290},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42371,"byte_end":42380,"line_start":21,"line_end":21,"column_start":65,"column_end":74},"alias_span":null,"name":"huerotate","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":316},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42382,"byte_end":42394,"line_start":21,"line_end":21,"column_start":76,"column_end":88},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":277},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42396,"byte_end":42402,"line_start":21,"line_end":21,"column_start":90,"column_end":96},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":3882},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42429,"byte_end":42436,"line_start":22,"line_end":22,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":295},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42438,"byte_end":42446,"line_start":22,"line_end":22,"column_start":35,"column_end":43},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":171}},{"kind":"Use","ref_id":{"krate":0,"index":439},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/mod.rs","byte_start":99781,"byte_end":99787,"line_start":5,"line_end":5,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":417}},{"kind":"Use","ref_id":{"krate":0,"index":800},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/mod.rs","byte_start":178895,"byte_end":178905,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"BmpDecoder","value":"","parent":{"krate":0,"index":691}},{"kind":"Use","ref_id":{"krate":0,"index":919},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/mod.rs","byte_start":178930,"byte_end":178940,"line_start":11,"line_end":11,"column_start":24,"column_end":34},"alias_span":null,"name":"BMPEncoder","value":"","parent":{"krate":0,"index":691}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/mod.rs","byte_start":296134,"byte_end":296135,"line_start":14,"line_end":14,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"rgbe8, RGBE8Pixel, HDRAdapter, SIGNATURE","parent":{"krate":0,"index":1212}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/mod.rs","byte_start":296134,"byte_end":296135,"line_start":14,"line_end":14,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":0,"index":1480},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/mod.rs","byte_start":346953,"byte_end":346963,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"IcoDecoder","value":"","parent":{"krate":0,"index":1436}},{"kind":"Use","ref_id":{"krate":0,"index":1544},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/mod.rs","byte_start":346988,"byte_end":346998,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"ICOEncoder","value":"","parent":{"krate":0,"index":1436}},{"kind":"Use","ref_id":{"krate":0,"index":1584},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/mod.rs","byte_start":363733,"byte_end":363744,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"JpegDecoder","value":"","parent":{"krate":0,"index":1560}},{"kind":"Use","ref_id":{"krate":0,"index":1687},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/mod.rs","byte_start":363770,"byte_end":363781,"line_start":11,"line_end":11,"column_start":25,"column_end":36},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":1560}},{"kind":"Use","ref_id":{"krate":0,"index":4562},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/mod.rs","byte_start":363783,"byte_end":363795,"line_start":11,"line_end":11,"column_start":38,"column_end":50},"alias_span":null,"name":"PixelDensity","value":"","parent":{"krate":0,"index":1560}},{"kind":"Use","ref_id":{"krate":0,"index":4544},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/mod.rs","byte_start":363797,"byte_end":363813,"line_start":11,"line_end":11,"column_start":52,"column_end":68},"alias_span":null,"name":"PixelDensityUnit","value":"","parent":{"krate":0,"index":1560}},{"kind":"Use","ref_id":{"krate":0,"index":1938},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":439012,"byte_end":439022,"line_start":7,"line_end":7,"column_start":24,"column_end":34},"alias_span":null,"name":"PnmDecoder","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2074},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":439047,"byte_end":439057,"line_start":8,"line_end":8,"column_start":24,"column_end":34},"alias_span":null,"name":"PNMEncoder","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":4790},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":439114,"byte_end":439129,"line_start":10,"line_end":10,"column_start":24,"column_end":39},"alias_span":null,"name":"ArbitraryHeader","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":4800},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":439131,"byte_end":439148,"line_start":10,"line_end":10,"column_start":41,"column_end":58},"alias_span":null,"name":"ArbitraryTuplType","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":4761},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":439150,"byte_end":439162,"line_start":10,"line_end":10,"column_start":60,"column_end":72},"alias_span":null,"name":"BitmapHeader","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":4770},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":439164,"byte_end":439177,"line_start":10,"line_end":10,"column_start":74,"column_end":87},"alias_span":null,"name":"GraymapHeader","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":4780},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":439202,"byte_end":439214,"line_start":11,"line_end":11,"column_start":24,"column_end":36},"alias_span":null,"name":"PixmapHeader","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2173},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":439240,"byte_end":439249,"line_start":12,"line_end":12,"column_start":24,"column_end":33},"alias_span":null,"name":"PNMHeader","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":4737},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":439251,"byte_end":439261,"line_start":12,"line_end":12,"column_start":35,"column_end":45},"alias_span":null,"name":"PNMSubtype","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":4721},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":439263,"byte_end":439277,"line_start":12,"line_end":12,"column_start":47,"column_end":61},"alias_span":null,"name":"SampleEncoding","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2282},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/mod.rs","byte_start":526089,"byte_end":526099,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"TgaDecoder","value":"","parent":{"krate":0,"index":2220}},{"kind":"Use","ref_id":{"krate":0,"index":2443},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/mod.rs","byte_start":552379,"byte_end":552390,"line_start":3,"line_end":3,"column_start":24,"column_end":35},"alias_span":null,"name":"WebPDecoder","value":"","parent":{"krate":0,"index":2403}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":0,"byte_end":8716,"line_start":1,"line_end":252,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":29},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":54},{"krate":0,"index":116},{"krate":0,"index":127},{"krate":0,"index":171},{"krate":0,"index":417},{"krate":0,"index":522},{"krate":0,"index":691},{"krate":0,"index":941},{"krate":0,"index":994},{"krate":0,"index":1111},{"krate":0,"index":1212},{"krate":0,"index":1436},{"krate":0,"index":1560},{"krate":0,"index":1755},{"krate":0,"index":1832},{"krate":0,"index":2220},{"krate":0,"index":2329},{"krate":0,"index":2403},{"krate":0,"index":2675},{"krate":0,"index":2770},{"krate":0,"index":2810},{"krate":0,"index":3106},{"krate":0,"index":3302},{"krate":0,"index":3457},{"krate":0,"index":3607},{"krate":0,"index":3695},{"krate":0,"index":3708},{"krate":0,"index":5857},{"krate":0,"index":3709}],"decl_id":null,"docs":" This crate provides native rust implementations of\n image encoders and decoders and basic image manipulation\n functions.","sig":null,"attributes":[{"value":"! This crate provides native rust implementations of","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":0,"byte_end":54,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"! image encoders and decoders and basic image manipulation","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":55,"byte_end":115,"line_start":2,"line_end":2,"column_start":1,"column_end":61}},{"value":"! functions.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":116,"byte_end":130,"line_start":3,"line_end":3,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":131,"byte_end":134,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Additional documentation can currently also be found in the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":135,"byte_end":198,"line_start":5,"line_end":5,"column_start":1,"column_end":64}},{"value":"! [README.md file which is most easily viewed on github](https://github.com/image-rs/image/blob/master/README.md).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":199,"byte_end":315,"line_start":6,"line_end":6,"column_start":1,"column_end":117}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":316,"byte_end":319,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! [Jump forward to crate content](#reexports)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":320,"byte_end":367,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":368,"byte_end":371,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! # Overview","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":372,"byte_end":386,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":387,"byte_end":390,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! There are two core problems for this library provides solutions: a unified interface for images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":391,"byte_end":490,"line_start":12,"line_end":12,"column_start":1,"column_end":100}},{"value":"! encodings and simple generic buffers for their content. It's possible to use either feature","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":491,"byte_end":586,"line_start":13,"line_end":13,"column_start":1,"column_end":96}},{"value":"! without the other. The focus is on small and stable set of common operations that can be","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":587,"byte_end":679,"line_start":14,"line_end":14,"column_start":1,"column_end":93}},{"value":"! supplemented by other specialized crates. The library also prefers safe solutions with few","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":680,"byte_end":774,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"! dependencies.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":775,"byte_end":792,"line_start":16,"line_end":16,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":793,"byte_end":796,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! | Format | Decoding | Encoding |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":797,"byte_end":833,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"! | ------ | -------- | -------- |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":834,"byte_end":870,"line_start":19,"line_end":19,"column_start":1,"column_end":37}},{"value":"! | PNG    | All supported color types | Same as decoding |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":871,"byte_end":932,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"! | JPEG   | Baseline and progressive | Baseline JPEG |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":933,"byte_end":990,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"! | GIF    | Yes | Yes |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":991,"byte_end":1017,"line_start":22,"line_end":22,"column_start":1,"column_end":27}},{"value":"! | BMP    | Yes | RGB(8), RGBA(8), Gray(8), GrayA(8) |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1018,"byte_end":1075,"line_start":23,"line_end":23,"column_start":1,"column_end":58}},{"value":"! | ICO    | Yes | Yes |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1076,"byte_end":1102,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"! | TIFF   | Baseline(no fax support) + LZW + PackBits | RGB(8), RGBA(8), Gray(8) |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1103,"byte_end":1188,"line_start":25,"line_end":25,"column_start":1,"column_end":86}},{"value":"! | WebP   | Lossy(Luma channel only) | No |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1189,"byte_end":1235,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"! | PNM    | PBM, PGM, PPM, standard PAM | Yes |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1236,"byte_end":1286,"line_start":27,"line_end":27,"column_start":1,"column_end":51}},{"value":"! | DDS    | DXT1, DXT3, DXT5 | No |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1287,"byte_end":1325,"line_start":28,"line_end":28,"column_start":1,"column_end":39}},{"value":"! | TGA    | Yes | No |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1326,"byte_end":1351,"line_start":29,"line_end":29,"column_start":1,"column_end":26}},{"value":"! | farbfeld | Yes | Yes |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1352,"byte_end":1380,"line_start":30,"line_end":30,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1381,"byte_end":1384,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! ## Using images decoders","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1385,"byte_end":1413,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1414,"byte_end":1417,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! There exists a huge variety of image formats that are concerned with efficiently encoding image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1418,"byte_end":1517,"line_start":34,"line_end":34,"column_start":1,"column_end":100}},{"value":"! pixel data and auxiliary meta data for many different purposes. The `image` library provides","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1518,"byte_end":1614,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"! decoders for many common formats, depending on the active features. The best way to use them","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1615,"byte_end":1711,"line_start":36,"line_end":36,"column_start":1,"column_end":97}},{"value":"! depends on your use case.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1712,"byte_end":1741,"line_start":37,"line_end":37,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1742,"byte_end":1745,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! * [`open`] is a very simple way to load images from the file system, automatically deducing the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1746,"byte_end":1845,"line_start":39,"line_end":39,"column_start":1,"column_end":100}},{"value":"!   format but offering little customization.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1846,"byte_end":1893,"line_start":40,"line_end":40,"column_start":1,"column_end":48}},{"value":"! * [`load_from_memory`], [`load_from_memory_with_format`] present a similar interface for images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1894,"byte_end":1993,"line_start":41,"line_end":41,"column_start":1,"column_end":100}},{"value":"!   whose encoded data is already present in memory.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":1994,"byte_end":2048,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"! * [`io::Reader`] is a builder providing a superset of the functions. It offers both","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2049,"byte_end":2136,"line_start":43,"line_end":43,"column_start":1,"column_end":88}},{"value":"!   customization and auto-deduction but is slightly more involved. The main benefit is that the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2137,"byte_end":2235,"line_start":44,"line_end":44,"column_start":1,"column_end":99}},{"value":"!   interface is easier to evolve.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2236,"byte_end":2272,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"! * [`ImageDecoder`] is a trait for querying meta data and reading image pixels into a generic","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2273,"byte_end":2369,"line_start":46,"line_end":46,"column_start":1,"column_end":97}},{"value":"!   byte buffer. It also contains a `Read` adaptor for stream reading the pixels.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2370,"byte_end":2453,"line_start":47,"line_end":47,"column_start":1,"column_end":84}},{"value":"! * [`DynamicImage::from_decoder`] can be used for creating a buffer from a single specific or","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2454,"byte_end":2550,"line_start":48,"line_end":48,"column_start":1,"column_end":97}},{"value":"!   any custom decoder implementing the [`ImageDecoder`] trait.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2551,"byte_end":2616,"line_start":49,"line_end":49,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2617,"byte_end":2620,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! [`open`]: fn.open.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2621,"byte_end":2647,"line_start":51,"line_end":51,"column_start":1,"column_end":27}},{"value":"! [`load_from_memory`]: fn.load_from_memory.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2648,"byte_end":2698,"line_start":52,"line_end":52,"column_start":1,"column_end":51}},{"value":"! [`load_from_memory_with_format`]: fn.load_from_memory_with_format.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2699,"byte_end":2773,"line_start":53,"line_end":53,"column_start":1,"column_end":75}},{"value":"! [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2774,"byte_end":2815,"line_start":54,"line_end":54,"column_start":1,"column_end":42}},{"value":"! [`DynamicImage::from_decoder`]: enum.DynamicImage.html#method.from_decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2816,"byte_end":2894,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"! [`ImageDecoder`]: trait.ImageDecoder.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2895,"byte_end":2940,"line_start":56,"line_end":56,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2941,"byte_end":2944,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! ## Using image encoders","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2945,"byte_end":2972,"line_start":58,"line_end":58,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2973,"byte_end":2976,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"! Encoding pixel data is supported for the majority of formats but not quite as broadly.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":2977,"byte_end":3067,"line_start":60,"line_end":60,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3068,"byte_end":3071,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"! * [`DynamicImage::save`] is converse of `open` and stores a `DynamicImage`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3072,"byte_end":3151,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"! * [`DynamicImage::write_to`] can be used to encode an image into any writer, for example into a","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3152,"byte_end":3251,"line_start":63,"line_end":63,"column_start":1,"column_end":100}},{"value":"!   vector of bytes in memory.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3252,"byte_end":3284,"line_start":64,"line_end":64,"column_start":1,"column_end":33}},{"value":"! * [`save_buffer`], [`save_buffer_with_format`] are a low-level interface for saving an image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3285,"byte_end":3381,"line_start":65,"line_end":65,"column_start":1,"column_end":97}},{"value":"!   in the file system where the library initializes the chosen encoder.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3382,"byte_end":3456,"line_start":66,"line_end":66,"column_start":1,"column_end":75}},{"value":"! * [`ImageEncoder`] is a trait for encoding a byte buffer of image data and the inverse of the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3457,"byte_end":3554,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"!   `ImageDecoder` interface.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3555,"byte_end":3586,"line_start":68,"line_end":68,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3587,"byte_end":3590,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! [`save_buffer`]: #fn.save_buffer.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3591,"byte_end":3632,"line_start":70,"line_end":70,"column_start":1,"column_end":42}},{"value":"! [`save_buffer_with_format`]: #fn.save_buffer_with_format.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3633,"byte_end":3698,"line_start":71,"line_end":71,"column_start":1,"column_end":66}},{"value":"! [`DynamicImage::save`]: enum.DynamicImage.html#method.save","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3699,"byte_end":3761,"line_start":72,"line_end":72,"column_start":1,"column_end":63}},{"value":"! [`DynamicImage::write_to`]: enum.DynamicImage.html#method.write_to","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3762,"byte_end":3832,"line_start":73,"line_end":73,"column_start":1,"column_end":71}},{"value":"! [`ImageEncoder`]: trait.ImageEncoder.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3833,"byte_end":3878,"line_start":74,"line_end":74,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3879,"byte_end":3882,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! ## Image buffers","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3883,"byte_end":3903,"line_start":76,"line_end":76,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3904,"byte_end":3907,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! The library adds containers for channel data which together form some representation of a 2D","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":3908,"byte_end":4004,"line_start":78,"line_end":78,"column_start":1,"column_end":97}},{"value":"! matrix of pixels. These are all statically typed to avoid misinterpretation of byte data (and","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":4005,"byte_end":4102,"line_start":79,"line_end":79,"column_start":1,"column_end":98}},{"value":"! since Rust has no standard safe encapsulation for reinterpreting byte slices as another type).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":4103,"byte_end":4201,"line_start":80,"line_end":80,"column_start":1,"column_end":99}},{"value":"! The main traits [`GenericImageView`] and [`GenericImage`] model a view on a 2D-matrix of","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":4202,"byte_end":4294,"line_start":81,"line_end":81,"column_start":1,"column_end":93}},{"value":"! addressable pixels and a buffer of independently accessible pixels respectively.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":4295,"byte_end":4379,"line_start":82,"line_end":82,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":4380,"byte_end":4383,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! The two main types for owning pixel data are [`ImageBuffer`] and [`DynamicImage`]. Note that","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":4384,"byte_end":4480,"line_start":84,"line_end":84,"column_start":1,"column_end":97}},{"value":"! the latter is an enum over well-supported pixel types that also offers conversion","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":4481,"byte_end":4566,"line_start":85,"line_end":85,"column_start":1,"column_end":86}},{"value":"! functionality.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":4567,"byte_end":4585,"line_start":86,"line_end":86,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":4586,"byte_end":4589,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"! Additionally, the [`flat`] module contains items for interoperability with generic channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":4590,"byte_end":4684,"line_start":88,"line_end":88,"column_start":1,"column_end":95}},{"value":"! matrices and foreign interface. While still strict typed these dynamically validate length and","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":4685,"byte_end":4783,"line_start":89,"line_end":89,"column_start":1,"column_end":99}},{"value":"! other layout assumptions required to provide the trait interface. While quite generic You","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":4784,"byte_end":4877,"line_start":90,"line_end":90,"column_start":1,"column_end":94}},{"value":"! should be prepared for a bit of boilerplate when using these types.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":4878,"byte_end":4949,"line_start":91,"line_end":91,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":4950,"byte_end":4953,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"! [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":4954,"byte_end":5007,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"! [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5008,"byte_end":5053,"line_start":94,"line_end":94,"column_start":1,"column_end":46}},{"value":"! [`ImageBuffer`]: struct.ImageBuffer.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5054,"byte_end":5098,"line_start":95,"line_end":95,"column_start":1,"column_end":45}},{"value":"! [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5099,"byte_end":5143,"line_start":96,"line_end":96,"column_start":1,"column_end":45}},{"value":"! [`flat`]: flat/index.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5144,"byte_end":5173,"line_start":97,"line_end":97,"column_start":1,"column_end":30}},{"value":"warn(missing_docs)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5175,"byte_end":5197,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5198,"byte_end":5229,"line_start":100,"line_end":100,"column_start":1,"column_end":32}},{"value":"deny(unreachable_pub)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5230,"byte_end":5255,"line_start":101,"line_end":101,"column_start":1,"column_end":26}},{"value":"deny(deprecated)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5256,"byte_end":5276,"line_start":102,"line_end":102,"column_start":1,"column_end":21}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5277,"byte_end":5315,"line_start":103,"line_end":103,"column_start":1,"column_end":39}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":5413,"byte_end":5454,"line_start":106,"line_end":106,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":54},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":3710},{"krate":0,"index":3729},{"krate":0,"index":3731},{"krate":0,"index":3734},{"krate":0,"index":3736},{"krate":0,"index":3758},{"krate":0,"index":3756},{"krate":0,"index":3753},{"krate":0,"index":3749},{"krate":0,"index":3750},{"krate":0,"index":3760},{"krate":0,"index":3763},{"krate":0,"index":3765},{"krate":0,"index":3768},{"krate":0,"index":3770},{"krate":0,"index":3792},{"krate":0,"index":3790},{"krate":0,"index":3787},{"krate":0,"index":3783},{"krate":0,"index":3784},{"krate":0,"index":3794},{"krate":0,"index":3797},{"krate":0,"index":3799},{"krate":0,"index":3801},{"krate":0,"index":3803},{"krate":0,"index":3823},{"krate":0,"index":3821},{"krate":0,"index":3818},{"krate":0,"index":3814},{"krate":0,"index":3815},{"krate":0,"index":3811},{"krate":0,"index":3812},{"krate":0,"index":3825},{"krate":0,"index":3849},{"krate":0,"index":3847},{"krate":0,"index":3844},{"krate":0,"index":3840},{"krate":0,"index":3841},{"krate":0,"index":62},{"krate":0,"index":66},{"krate":0,"index":71},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":114}],"decl_id":null,"docs":" Contains detailed error representation.","sig":null,"attributes":[{"value":"! Contains detailed error representation.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":8718,"byte_end":8761,"line_start":1,"line_end":1,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":8762,"byte_end":8765,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! See the main [`ImageError`] which contains a variant for each specialized error type. The","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":8766,"byte_end":8859,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"! subtypes used in each variant are opaque by design. They can be roughly inspected through their","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":8860,"byte_end":8959,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"! respective `kind` methods which work similar to `std::io::Error::kind`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":8960,"byte_end":9035,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":9036,"byte_end":9039,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! The error interface makes it possible to inspect the error of an underlying decoder or encoder,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":9040,"byte_end":9139,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"! through the `Error::source` method. Note that this is not part of the stable interface and you","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":9140,"byte_end":9238,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"! may not rely on a particular error value for a particular operation. This means mainly that","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":9239,"byte_end":9334,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"! `image` does not promise to remain on a particular version of its underlying decoders but if","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":9335,"byte_end":9431,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"! you ensure to use the same version of the dependency (or at least of the error type) through","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":9432,"byte_end":9528,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"! external means then you could inspect the error type in slightly more detail.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":9529,"byte_end":9610,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":9611,"byte_end":9614,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! [`ImageError`]: enum.ImageError.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":9615,"byte_end":9655,"line_start":14,"line_end":14,"column_start":1,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3711},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10367,"byte_end":10375,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"Decoding","qualname":"::error::ImageError::Decoding","value":"ImageError::Decoding(DecodingError)","parent":{"krate":0,"index":3710},"children":[],"decl_id":null,"docs":" An error was encountered while decoding.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10084,"byte_end":10128,"line_start":29,"line_end":29,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10133,"byte_end":10136,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ This means that the input data did not conform to the specification of some image format,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10141,"byte_end":10234,"line_start":31,"line_end":31,"column_start":5,"column_end":98}},{"value":"/ or that no format could be determined, or that it did not match format specific","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10239,"byte_end":10322,"line_start":32,"line_end":32,"column_start":5,"column_end":88}},{"value":"/ requirements set by the caller.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10327,"byte_end":10362,"line_start":33,"line_end":33,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3714},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10761,"byte_end":10769,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::error::ImageError::Encoding","value":"ImageError::Encoding(EncodingError)","parent":{"krate":0,"index":3710},"children":[],"decl_id":null,"docs":" An error was encountered while encoding.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10397,"byte_end":10441,"line_start":36,"line_end":36,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10446,"byte_end":10449,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The input image can not be encoded with the chosen format, for example because the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10454,"byte_end":10540,"line_start":38,"line_end":38,"column_start":5,"column_end":91}},{"value":"/ specification has no representation for its color space or because a necessary conversion","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10545,"byte_end":10638,"line_start":39,"line_end":39,"column_start":5,"column_end":98}},{"value":"/ is ambiguous. In some cases it might also happen that the dimensions can not be used with","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10643,"byte_end":10736,"line_start":40,"line_end":40,"column_start":5,"column_end":98}},{"value":"/ the format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10741,"byte_end":10756,"line_start":41,"line_end":41,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3717},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11009,"byte_end":11018,"line_start":48,"line_end":48,"column_start":5,"column_end":14},"name":"Parameter","qualname":"::error::ImageError::Parameter","value":"ImageError::Parameter(ParameterError)","parent":{"krate":0,"index":3710},"children":[],"decl_id":null,"docs":" An error was encountered in input arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in input arguments.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10791,"byte_end":10839,"line_start":44,"line_end":44,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10844,"byte_end":10847,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is a catch-all case for strictly internal operations such as scaling, conversions,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10852,"byte_end":10943,"line_start":46,"line_end":46,"column_start":5,"column_end":96}},{"value":"/ etc. that involve no external format specifications.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10948,"byte_end":11004,"line_start":47,"line_end":47,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3720},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11278,"byte_end":11284,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Limits","qualname":"::error::ImageError::Limits","value":"ImageError::Limits(LimitError)","parent":{"krate":0,"index":3710},"children":[],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11041,"byte_end":11118,"line_start":50,"line_end":50,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11123,"byte_end":11126,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Errors of this type are limits set by the user or environment, *not* inherent in a specific","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11131,"byte_end":11226,"line_start":52,"line_end":52,"column_start":5,"column_end":100}},{"value":"/ format or operation that was executed.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11231,"byte_end":11273,"line_start":53,"line_end":53,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3723},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11622,"byte_end":11633,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::error::ImageError::Unsupported","value":"ImageError::Unsupported(UnsupportedError)","parent":{"krate":0,"index":3710},"children":[],"decl_id":null,"docs":" An operation can not be completed by the chosen abstraction.","sig":null,"attributes":[{"value":"/ An operation can not be completed by the chosen abstraction.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11303,"byte_end":11367,"line_start":56,"line_end":56,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11372,"byte_end":11375,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This means that it might be possible for the operation to succeed in general but","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11380,"byte_end":11464,"line_start":58,"line_end":58,"column_start":5,"column_end":89}},{"value":"/ * it requires a disabled feature,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11469,"byte_end":11506,"line_start":59,"line_end":59,"column_start":5,"column_end":42}},{"value":"/ * the implementation does not yet exist, or","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11511,"byte_end":11558,"line_start":60,"line_end":60,"column_start":5,"column_end":52}},{"value":"/ * no abstraction for a lower level could be found.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11563,"byte_end":11617,"line_start":61,"line_end":61,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3726},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11724,"byte_end":11731,"line_start":65,"line_end":65,"column_start":5,"column_end":12},"name":"IoError","qualname":"::error::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":3710},"children":[],"decl_id":null,"docs":" An error occurred while interacting with the environment.\n","sig":null,"attributes":[{"value":"/ An error occurred while interacting with the environment.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11658,"byte_end":11719,"line_start":64,"line_end":64,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":3710},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":10067,"byte_end":10077,"line_start":28,"line_end":28,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::error::ImageError","value":"ImageError::{Decoding, Encoding, Parameter, Limits, Unsupported, IoError}","parent":null,"children":[{"krate":0,"index":3711},{"krate":0,"index":3714},{"krate":0,"index":3717},{"krate":0,"index":3720},{"krate":0,"index":3723},{"krate":0,"index":3726}],"decl_id":null,"docs":" The generic error type for image operations.","sig":null,"attributes":[{"value":"/ The generic error type for image operations.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":9809,"byte_end":9857,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":9858,"byte_end":9861,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This high level enum allows, by variant matching, a rough separation of concerns between","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":9862,"byte_end":9954,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/ underlying IO, the caller, format specifications, and the `image` implementation.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":9955,"byte_end":10040,"line_start":26,"line_end":26,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":3731},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11963,"byte_end":11979,"line_start":74,"line_end":74,"column_start":12,"column_end":28},"name":"UnsupportedError","qualname":"::error::UnsupportedError","value":"UnsupportedError {  }","parent":null,"children":[{"krate":0,"index":3732},{"krate":0,"index":3733}],"decl_id":null,"docs":" The implementation for an operation was not provided.","sig":null,"attributes":[{"value":"/ The implementation for an operation was not provided.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11747,"byte_end":11804,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11805,"byte_end":11808,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ See the variant [`Unsupported`] for more documentation.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11809,"byte_end":11868,"line_start":70,"line_end":70,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11869,"byte_end":11872,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`Unsupported`]: enum.ImageError.html#variant.Unsupported","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":11873,"byte_end":11934,"line_start":72,"line_end":72,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3737},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12218,"byte_end":12223,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"Color","qualname":"::error::UnsupportedErrorKind::Color","value":"UnsupportedErrorKind::Color(ExtendedColorType)","parent":{"krate":0,"index":3736},"children":[],"decl_id":null,"docs":" The required color type can not be handled.\n","sig":null,"attributes":[{"value":"/ The required color type can not be handled.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12166,"byte_end":12213,"line_start":82,"line_end":82,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3740},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12290,"byte_end":12296,"line_start":85,"line_end":85,"column_start":5,"column_end":11},"name":"Format","qualname":"::error::UnsupportedErrorKind::Format","value":"UnsupportedErrorKind::Format(ImageFormatHint)","parent":{"krate":0,"index":3736},"children":[],"decl_id":null,"docs":" An image format is not supported.\n","sig":null,"attributes":[{"value":"/ An image format is not supported.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12248,"byte_end":12285,"line_start":84,"line_end":84,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3743},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12440,"byte_end":12454,"line_start":88,"line_end":88,"column_start":5,"column_end":19},"name":"GenericFeature","qualname":"::error::UnsupportedErrorKind::GenericFeature","value":"UnsupportedErrorKind::GenericFeature(String)","parent":{"krate":0,"index":3736},"children":[],"decl_id":null,"docs":" Some feature specified by string.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ Some feature specified by string.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12319,"byte_end":12356,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12361,"byte_end":12435,"line_start":87,"line_end":87,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3746},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12487,"byte_end":12502,"line_start":90,"line_end":90,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::UnsupportedErrorKind::__NonExhaustive","value":"UnsupportedErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":3736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3736},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12139,"byte_end":12159,"line_start":81,"line_end":81,"column_start":10,"column_end":30},"name":"UnsupportedErrorKind","qualname":"::error::UnsupportedErrorKind","value":"UnsupportedErrorKind::{Color, Format, GenericFeature, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":3737},{"krate":0,"index":3740},{"krate":0,"index":3743},{"krate":0,"index":3746}],"decl_id":null,"docs":" Details what feature is not supported.\n","sig":null,"attributes":[{"value":"/ Details what feature is not supported.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12046,"byte_end":12088,"line_start":79,"line_end":79,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":3760},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12821,"byte_end":12834,"line_start":100,"line_end":100,"column_start":12,"column_end":25},"name":"EncodingError","qualname":"::error::EncodingError","value":"EncodingError {  }","parent":null,"children":[{"krate":0,"index":3761},{"krate":0,"index":3762}],"decl_id":null,"docs":" An error was encountered while encoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding an image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12528,"byte_end":12581,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12582,"byte_end":12585,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Encoding`] variant. See its","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12586,"byte_end":12680,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12681,"byte_end":12720,"line_start":96,"line_end":96,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12721,"byte_end":12724,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Encoding`]: enum.ImageError.html#variant.Encoding","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12725,"byte_end":12792,"line_start":98,"line_end":98,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":3765},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13216,"byte_end":13230,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"ParameterError","qualname":"::error::ParameterError","value":"ParameterError {  }","parent":null,"children":[{"krate":0,"index":3766},{"krate":0,"index":3767}],"decl_id":null,"docs":" An error was encountered in inputs arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in inputs arguments.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12924,"byte_end":12973,"line_start":106,"line_end":106,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12974,"byte_end":12977,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Parameter`] variant. See its","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":12978,"byte_end":13073,"line_start":108,"line_end":108,"column_start":1,"column_end":96}},{"value":"/ documentation for more information.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13074,"byte_end":13113,"line_start":109,"line_end":109,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13114,"byte_end":13117,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Parameter`]: enum.ImageError.html#variant.Parameter","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13118,"byte_end":13187,"line_start":111,"line_end":111,"column_start":1,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3771},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13478,"byte_end":13495,"line_start":122,"line_end":122,"column_start":5,"column_end":22},"name":"DimensionMismatch","qualname":"::error::ParameterErrorKind::DimensionMismatch","value":"ParameterErrorKind::DimensionMismatch","parent":{"krate":0,"index":3770},"children":[],"decl_id":null,"docs":" The dimensions passed are wrong.\n","sig":null,"attributes":[{"value":"/ The dimensions passed are wrong.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13437,"byte_end":13473,"line_start":121,"line_end":121,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3773},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13593,"byte_end":13606,"line_start":124,"line_end":124,"column_start":5,"column_end":18},"name":"FailedAlready","qualname":"::error::ParameterErrorKind::FailedAlready","value":"ParameterErrorKind::FailedAlready","parent":{"krate":0,"index":3770},"children":[],"decl_id":null,"docs":" Repeated an operation for which error that could not be cloned was emitted already.\n","sig":null,"attributes":[{"value":"/ Repeated an operation for which error that could not be cloned was emitted already.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13501,"byte_end":13588,"line_start":123,"line_end":123,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3775},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13734,"byte_end":13741,"line_start":127,"line_end":127,"column_start":5,"column_end":12},"name":"Generic","qualname":"::error::ParameterErrorKind::Generic","value":"ParameterErrorKind::Generic(String)","parent":{"krate":0,"index":3770},"children":[],"decl_id":null,"docs":" A string describing the parameter.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ A string describing the parameter.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13612,"byte_end":13650,"line_start":125,"line_end":125,"column_start":5,"column_end":43}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13655,"byte_end":13729,"line_start":126,"line_end":126,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3778},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13802,"byte_end":13812,"line_start":129,"line_end":129,"column_start":5,"column_end":15},"name":"NoMoreData","qualname":"::error::ParameterErrorKind::NoMoreData","value":"ParameterErrorKind::NoMoreData","parent":{"krate":0,"index":3770},"children":[],"decl_id":null,"docs":" The end of the image has been reached.\n","sig":null,"attributes":[{"value":"/ The end of the image has been reached.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13755,"byte_end":13797,"line_start":128,"line_end":128,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3780},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13896,"byte_end":13911,"line_start":132,"line_end":132,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ParameterErrorKind::__NonExhaustive","value":"ParameterErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":3770},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13837,"byte_end":13891,"line_start":131,"line_end":131,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":3770},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13412,"byte_end":13430,"line_start":120,"line_end":120,"column_start":10,"column_end":28},"name":"ParameterErrorKind","qualname":"::error::ParameterErrorKind","value":"ParameterErrorKind::{DimensionMismatch, FailedAlready, Generic, NoMoreData, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":3771},{"krate":0,"index":3773},{"krate":0,"index":3775},{"krate":0,"index":3778},{"krate":0,"index":3780}],"decl_id":null,"docs":" Details how a parameter is malformed.\n","sig":null,"attributes":[{"value":"/ Details how a parameter is malformed.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13320,"byte_end":13361,"line_start":118,"line_end":118,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":3794},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":14230,"byte_end":14243,"line_start":142,"line_end":142,"column_start":12,"column_end":25},"name":"DecodingError","qualname":"::error::DecodingError","value":"DecodingError {  }","parent":null,"children":[{"krate":0,"index":3795},{"krate":0,"index":3796}],"decl_id":null,"docs":" An error was encountered while decoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding an image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13937,"byte_end":13990,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13991,"byte_end":13994,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Decoding`] variant. See its","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":13995,"byte_end":14089,"line_start":137,"line_end":137,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":14090,"byte_end":14129,"line_start":138,"line_end":138,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":14130,"byte_end":14133,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Decoding`]: enum.ImageError.html#variant.Decoding","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":14134,"byte_end":14201,"line_start":140,"line_end":140,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":3799},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":14643,"byte_end":14653,"line_start":154,"line_end":154,"column_start":12,"column_end":22},"name":"LimitError","qualname":"::error::LimitError","value":"LimitError {  }","parent":null,"children":[{"krate":0,"index":3800}],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":14332,"byte_end":14409,"line_start":147,"line_end":147,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":14410,"byte_end":14413,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Limits`] variant. See its","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":14414,"byte_end":14506,"line_start":149,"line_end":149,"column_start":1,"column_end":93}},{"value":"/ documentation for more information.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":14507,"byte_end":14546,"line_start":150,"line_end":150,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":14547,"byte_end":14550,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Limits`]: enum.ImageError.html#variant.Limits","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":14551,"byte_end":14614,"line_start":152,"line_end":152,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3804},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15185,"byte_end":15199,"line_start":167,"line_end":167,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::error::LimitErrorKind::DimensionError","value":"LimitErrorKind::DimensionError","parent":{"krate":0,"index":3803},"children":[],"decl_id":null,"docs":" The resulting image exceed dimension limits in either direction.\n","sig":null,"attributes":[{"value":"/ The resulting image exceed dimension limits in either direction.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15112,"byte_end":15180,"line_start":166,"line_end":166,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3806},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15283,"byte_end":15301,"line_start":169,"line_end":169,"column_start":5,"column_end":23},"name":"InsufficientMemory","qualname":"::error::LimitErrorKind::InsufficientMemory","value":"LimitErrorKind::InsufficientMemory","parent":{"krate":0,"index":3803},"children":[],"decl_id":null,"docs":" The operation would have performed an allocation larger than allowed.\n","sig":null,"attributes":[{"value":"/ The operation would have performed an allocation larger than allowed.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15205,"byte_end":15278,"line_start":168,"line_end":168,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3808},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15385,"byte_end":15400,"line_start":172,"line_end":172,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::LimitErrorKind::__NonExhaustive","value":"LimitErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":3803},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15326,"byte_end":15380,"line_start":171,"line_end":171,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":3803},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15091,"byte_end":15105,"line_start":165,"line_end":165,"column_start":10,"column_end":24},"name":"LimitErrorKind","qualname":"::error::LimitErrorKind","value":"LimitErrorKind::{DimensionError, InsufficientMemory, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":3804},{"krate":0,"index":3806},{"krate":0,"index":3808}],"decl_id":null,"docs":" Indicates the limit that prevented an operation from completing.","sig":null,"attributes":[{"value":"/ Indicates the limit that prevented an operation from completing.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":14724,"byte_end":14792,"line_start":159,"line_end":159,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":14793,"byte_end":14796,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Note that this enumeration is not exhaustive and may in the future be extended to provide more","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":14797,"byte_end":14895,"line_start":161,"line_end":161,"column_start":1,"column_end":99}},{"value":"/ detailed information or to incorporate other resources types.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":14896,"byte_end":14961,"line_start":162,"line_end":162,"column_start":1,"column_end":66}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15007,"byte_end":15045,"line_start":164,"line_end":164,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3826},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15587,"byte_end":15592,"line_start":179,"line_end":179,"column_start":5,"column_end":10},"name":"Exact","qualname":"::error::ImageFormatHint::Exact","value":"ImageFormatHint::Exact(ImageFormat)","parent":{"krate":0,"index":3825},"children":[],"decl_id":null,"docs":" The format is known exactly.\n","sig":null,"attributes":[{"value":"/ The format is known exactly.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15550,"byte_end":15582,"line_start":178,"line_end":178,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3829},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15660,"byte_end":15664,"line_start":182,"line_end":182,"column_start":5,"column_end":9},"name":"Name","qualname":"::error::ImageFormatHint::Name","value":"ImageFormatHint::Name(String)","parent":{"krate":0,"index":3825},"children":[],"decl_id":null,"docs":" The format can be identified by a name.\n","sig":null,"attributes":[{"value":"/ The format can be identified by a name.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15612,"byte_end":15655,"line_start":181,"line_end":181,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3832},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15736,"byte_end":15749,"line_start":185,"line_end":185,"column_start":5,"column_end":18},"name":"PathExtension","qualname":"::error::ImageFormatHint::PathExtension","value":"ImageFormatHint::PathExtension(std::path::PathBuf)","parent":{"krate":0,"index":3825},"children":[],"decl_id":null,"docs":" A common path extension for the format is known.\n","sig":null,"attributes":[{"value":"/ A common path extension for the format is known.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15679,"byte_end":15731,"line_start":184,"line_end":184,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3835},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15836,"byte_end":15843,"line_start":188,"line_end":188,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::error::ImageFormatHint::Unknown","value":"ImageFormatHint::Unknown","parent":{"krate":0,"index":3825},"children":[],"decl_id":null,"docs":" The format is not known or could not be determined.\n","sig":null,"attributes":[{"value":"/ The format is not known or could not be determined.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15776,"byte_end":15831,"line_start":187,"line_end":187,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3837},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15869,"byte_end":15884,"line_start":191,"line_end":191,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ImageFormatHint::__NonExhaustive","value":"ImageFormatHint::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":3825},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3825},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15528,"byte_end":15543,"line_start":177,"line_end":177,"column_start":10,"column_end":25},"name":"ImageFormatHint","qualname":"::error::ImageFormatHint","value":"ImageFormatHint::{Exact, Name, PathExtension, Unknown, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":3826},{"krate":0,"index":3829},{"krate":0,"index":3832},{"krate":0,"index":3835},{"krate":0,"index":3837}],"decl_id":null,"docs":" A best effort representation for image formats.\n","sig":null,"attributes":[{"value":"/ A best effort representation for image formats.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15426,"byte_end":15477,"line_start":175,"line_end":175,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":16156,"byte_end":16176,"line_start":199,"line_end":199,"column_start":12,"column_end":32},"name":"from_format_and_kind","qualname":"<UnsupportedError>::from_format_and_kind","value":"fn (format: ImageFormatHint, kind: UnsupportedErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `UnsupportedError` for an image with details on the unsupported feature.","sig":null,"attributes":[{"value":"/ Create an `UnsupportedError` for an image with details on the unsupported feature.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15938,"byte_end":16024,"line_start":195,"line_end":195,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":16029,"byte_end":16032,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ If the operation was not connected to a particular image format then the hint may be","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":16037,"byte_end":16125,"line_start":197,"line_end":197,"column_start":5,"column_end":93}},{"value":"/ `Unknown`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":16130,"byte_end":16144,"line_start":198,"line_end":198,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":16404,"byte_end":16408,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"name":"kind","qualname":"<UnsupportedError>::kind","value":"fn (&self) -> UnsupportedErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `UnsupportedErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `UnsupportedErrorKind` of the error.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":16326,"byte_end":16392,"line_start":206,"line_end":206,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":16547,"byte_end":16558,"line_start":212,"line_end":212,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<UnsupportedError>::format_hint","value":"fn (&self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":16479,"byte_end":16535,"line_start":211,"line_end":211,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":16750,"byte_end":16753,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodingError>::new","value":"fn (format: ImageFormatHint, err: impl Into<Box<dyn Error + Send + Sync>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.\n","sig":null,"attributes":[{"value":"/ Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":16649,"byte_end":16738,"line_start":218,"line_end":218,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":17121,"byte_end":17137,"line_start":232,"line_end":232,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<DecodingError>::from_format_hint","value":"fn (format: ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create a `DecodingError` for an image format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":16965,"byte_end":17014,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":17019,"byte_end":17022,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":17027,"byte_end":17109,"line_start":231,"line_end":231,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":17336,"byte_end":17347,"line_start":240,"line_end":240,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<DecodingError>::format_hint","value":"fn (&self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":17268,"byte_end":17324,"line_start":239,"line_end":239,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":17540,"byte_end":17543,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<EncodingError>::new","value":"fn (format: ImageFormatHint, err: impl Into<Box<dyn Error + Send + Sync>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.\n","sig":null,"attributes":[{"value":"/ Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":17438,"byte_end":17528,"line_start":246,"line_end":246,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":17912,"byte_end":17928,"line_start":260,"line_end":260,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<EncodingError>::from_format_hint","value":"fn (format: ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create an `EncodingError` for an image format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":17755,"byte_end":17805,"line_start":257,"line_end":257,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":17810,"byte_end":17813,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":17818,"byte_end":17900,"line_start":259,"line_end":259,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18126,"byte_end":18137,"line_start":268,"line_end":268,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<EncodingError>::format_hint","value":"fn (&self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Return the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Return the image format associated with this error.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18059,"byte_end":18114,"line_start":267,"line_end":267,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18309,"byte_end":18318,"line_start":275,"line_end":275,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<ParameterError>::from_kind","value":"fn (kind: ParameterErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ParameterError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a `ParameterError` directly from a corresponding kind.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18229,"byte_end":18297,"line_start":274,"line_end":274,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18525,"byte_end":18529,"line_start":283,"line_end":283,"column_start":12,"column_end":16},"name":"kind","qualname":"<ParameterError>::kind","value":"fn (&self) -> ParameterErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `ParameterErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `ParameterErrorKind` of the error.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18449,"byte_end":18513,"line_start":282,"line_end":282,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18702,"byte_end":18711,"line_start":290,"line_end":290,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<LimitError>::from_kind","value":"fn (kind: LimitErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a generic `LimitError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a generic `LimitError` directly from a corresponding kind.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18618,"byte_end":18690,"line_start":289,"line_end":289,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18876,"byte_end":18880,"line_start":297,"line_end":297,"column_start":12,"column_end":16},"name":"kind","qualname":"<LimitError>::kind","value":"fn (&self) -> LimitErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `LimitErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `LimitErrorKind` of the error.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18804,"byte_end":18864,"line_start":296,"line_end":296,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":90},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":19759,"byte_end":19770,"line_start":333,"line_end":333,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::error::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[{"value":"/ Result of an image decoding/encoding process","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":19701,"byte_end":19749,"line_start":332,"line_end":332,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":116},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6879,"byte_end":6885,"line_start":162,"line_end":162,"column_start":9,"column_end":15},"name":"buffer","qualname":"::buffer","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","parent":null,"children":[{"krate":0,"index":117}],"decl_id":null,"docs":" Iterators and other auxiliary structure for the `ImageBuffer` type.\n","sig":null,"attributes":[{"value":"/ Iterators and other auxiliary structure for the `ImageBuffer` type.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6799,"byte_end":6870,"line_start":161,"line_end":161,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":127},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/mod.rs","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":170}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[{"value":"! Mathematical helper functions and types.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/mod.rs","byte_start":26403,"byte_end":26447,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":128},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nq","qualname":"::math::nq","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":3851},{"krate":0,"index":3859},{"krate":0,"index":3857},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":152}],"decl_id":null,"docs":" NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n See \"Kohonen neural networks for optimal colour quantization\"\n in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n for a discussion of the algorithm.\n See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>\n","sig":null,"attributes":[{"value":"! NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":26513,"byte_end":26584,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"! See \"Kohonen neural networks for optimal colour quantization\"","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":26585,"byte_end":26650,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"! in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":26651,"byte_end":26724,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"! for a discussion of the algorithm.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":26725,"byte_end":26763,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"! See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":26764,"byte_end":26868,"line_start":5,"line_end":5,"column_start":1,"column_end":105}}]},{"kind":"Struct","id":{"krate":0,"index":144},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":28752,"byte_end":28760,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::math::nq::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151}],"decl_id":null,"docs":" Neural network color quantizer\n","sig":null,"attributes":[{"value":"/ Neural network color quantizer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":28706,"byte_end":28740,"line_start":62,"line_end":62,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":29062,"byte_end":29065,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"fn (samplefac: i32, colors: usize, pixels: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new neural network and trains it with the supplied data\n","sig":null,"attributes":[{"value":"/ Creates a new neural network and trains it with the supplied data","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":28981,"byte_end":29050,"line_start":74,"line_end":74,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":29606,"byte_end":29610,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"fn (&mut self, pixels: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Initializes the neural network and trains it with the supplied data\n","sig":null,"attributes":[{"value":"/ Initializes the neural network and trains it with the supplied data","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":29523,"byte_end":29594,"line_start":90,"line_end":90,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":30600,"byte_end":30609,"line_start":123,"line_end":123,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"fn (&self, pixel: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Maps the pixel in-place to the best-matching color in the color map\n","sig":null,"attributes":[{"value":"/ Maps the pixel in-place to the best-matching color in the color map","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":30495,"byte_end":30566,"line_start":121,"line_end":121,"column_start":5,"column_end":76}},{"value":"inline(always)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":30571,"byte_end":30588,"line_start":122,"line_end":122,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":31161,"byte_end":31169,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"fn (&self, pixel: &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Finds the best-matching index in the color map for `pixel`\n","sig":null,"attributes":[{"value":"/ Finds the best-matching index in the color map for `pixel`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":31065,"byte_end":31127,"line_start":136,"line_end":136,"column_start":5,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":31132,"byte_end":31149,"line_start":137,"line_end":137,"column_start":5,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":166},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::math::utils","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/utils.rs","parent":null,"children":[{"krate":0,"index":167}],"decl_id":null,"docs":" Shared mathematical utility functions.\n","sig":null,"attributes":[{"value":"! Shared mathematical utility functions.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/utils.rs","byte_start":40845,"byte_end":40887,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":167},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/utils.rs","byte_start":41132,"byte_end":41137,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"clamp","qualname":"::math::utils::clamp","value":"fn <N> (a: N, min: N, max: N) -> N","parent":null,"children":[],"decl_id":null,"docs":" Cut value to be inside given range","sig":null,"attributes":[{"value":"/ Cut value to be inside given range","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/utils.rs","byte_start":40889,"byte_end":40927,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/utils.rs","byte_start":40928,"byte_end":40931,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/utils.rs","byte_start":40932,"byte_end":40939,"line_start":5,"line_end":5,"column_start":1,"column_end":8}},{"value":"/ use image::math::utils;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/utils.rs","byte_start":40940,"byte_end":40967,"line_start":6,"line_end":6,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/utils.rs","byte_start":40968,"byte_end":40971,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(utils::clamp(-5, 0, 10),  0);","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/utils.rs","byte_start":40972,"byte_end":41016,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp( 6, 0, 10),  6);","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/utils.rs","byte_start":41017,"byte_end":41061,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp(15, 0, 10), 10);","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/utils.rs","byte_start":41062,"byte_end":41106,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/utils.rs","byte_start":41107,"byte_end":41114,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/utils.rs","byte_start":41115,"byte_end":41124,"line_start":12,"line_end":12,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":3862},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/rect.rs","byte_start":41418,"byte_end":41422,"line_start":3,"line_end":3,"column_start":12,"column_end":16},"name":"Rect","qualname":"::math::rect::Rect","value":"Rect { x, y, width, height }","parent":null,"children":[{"krate":0,"index":3863},{"krate":0,"index":3864},{"krate":0,"index":3865},{"krate":0,"index":3866}],"decl_id":null,"docs":" A Rectangle defined by its top left corner, width and height.\n","sig":null,"attributes":[{"value":"/ A Rectangle defined by its top left corner, width and height.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/rect.rs","byte_start":41290,"byte_end":41355,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":3863},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/rect.rs","byte_start":41482,"byte_end":41483,"line_start":5,"line_end":5,"column_start":9,"column_end":10},"name":"x","qualname":"::math::rect::Rect::x","value":"u32","parent":{"krate":0,"index":3862},"children":[],"decl_id":null,"docs":" The x coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The x coordinate of the top left corner.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/rect.rs","byte_start":41429,"byte_end":41473,"line_start":4,"line_end":4,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":3864},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/rect.rs","byte_start":41547,"byte_end":41548,"line_start":7,"line_end":7,"column_start":9,"column_end":10},"name":"y","qualname":"::math::rect::Rect::y","value":"u32","parent":{"krate":0,"index":3862},"children":[],"decl_id":null,"docs":" The y coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The y coordinate of the top left corner.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/rect.rs","byte_start":41494,"byte_end":41538,"line_start":6,"line_end":6,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":3865},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/rect.rs","byte_start":41594,"byte_end":41599,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"width","qualname":"::math::rect::Rect::width","value":"u32","parent":{"krate":0,"index":3862},"children":[],"decl_id":null,"docs":" The rectangle's width.\n","sig":null,"attributes":[{"value":"/ The rectangle's width.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/rect.rs","byte_start":41559,"byte_end":41585,"line_start":8,"line_end":8,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":3866},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/rect.rs","byte_start":41646,"byte_end":41652,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"name":"height","qualname":"::math::rect::Rect::height","value":"u32","parent":{"krate":0,"index":3862},"children":[],"decl_id":null,"docs":" The rectangle's height.\n","sig":null,"attributes":[{"value":"/ The rectangle's height.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/rect.rs","byte_start":41610,"byte_end":41637,"line_start":10,"line_end":10,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":171},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":185},{"krate":0,"index":199},{"krate":0,"index":205},{"krate":0,"index":215},{"krate":0,"index":256},{"krate":0,"index":319},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":414}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[{"value":"! Image Processing Functions","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":41662,"byte_end":41692,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":225},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":50130,"byte_end":50138,"line_start":9,"line_end":9,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":50081,"byte_end":50122,"line_start":8,"line_end":8,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":227},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":50470,"byte_end":50479,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":50420,"byte_end":50462,"line_start":20,"line_end":20,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":229},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":50812,"byte_end":50821,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":50762,"byte_end":50804,"line_start":32,"line_end":32,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":231},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":51209,"byte_end":51220,"line_start":45,"line_end":45,"column_start":8,"column_end":19},"name":"rotate90_in","qualname":"::imageops::affine::rotate90_in","value":"fn <I, Container> (image: &I, destination: &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":51104,"byte_end":51201,"line_start":44,"line_end":44,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":234},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":51994,"byte_end":52006,"line_start":70,"line_end":70,"column_start":8,"column_end":20},"name":"rotate180_in","qualname":"::imageops::affine::rotate180_in","value":"fn <I, Container> (image: &I, destination: &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":51888,"byte_end":51986,"line_start":69,"line_end":69,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":237},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":52789,"byte_end":52801,"line_start":95,"line_end":95,"column_start":8,"column_end":20},"name":"rotate270_in","qualname":"::imageops::affine::rotate270_in","value":"fn <I, Container> (image: &I, destination: &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":52683,"byte_end":52781,"line_start":94,"line_end":94,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":240},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":53507,"byte_end":53522,"line_start":120,"line_end":120,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":53469,"byte_end":53499,"line_start":119,"line_end":119,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":242},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":53847,"byte_end":53860,"line_start":132,"line_end":132,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[{"value":"/ Flip an image vertically","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":53811,"byte_end":53839,"line_start":131,"line_end":131,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":244},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":54242,"byte_end":54260,"line_start":144,"line_end":144,"column_start":8,"column_end":26},"name":"flip_horizontal_in","qualname":"::imageops::affine::flip_horizontal_in","value":"fn <I, Container> (image: &I, destination: &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":54147,"byte_end":54234,"line_start":143,"line_end":143,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":247},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":55021,"byte_end":55037,"line_start":169,"line_end":169,"column_start":8,"column_end":24},"name":"flip_vertical_in","qualname":"::imageops::affine::flip_vertical_in","value":"fn <I, Container> (image: &I, destination: &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image vertically and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":54928,"byte_end":55013,"line_start":168,"line_end":168,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":250},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":55764,"byte_end":55782,"line_start":194,"line_end":194,"column_start":8,"column_end":26},"name":"rotate180_in_place","qualname":"::imageops::affine::rotate180_in_place","value":"fn <I> (image: &mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise in place.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise in place.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":55705,"byte_end":55756,"line_start":193,"line_end":193,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":252},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":56562,"byte_end":56586,"line_start":225,"line_end":225,"column_start":8,"column_end":32},"name":"flip_horizontal_in_place","qualname":"::imageops::affine::flip_horizontal_in_place","value":"fn <I> (image: &mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally in place.\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally in place.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":56514,"byte_end":56554,"line_start":224,"line_end":224,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":254},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":56992,"byte_end":57014,"line_start":240,"line_end":240,"column_start":8,"column_end":30},"name":"flip_vertical_in_place","qualname":"::imageops::affine::flip_vertical_in_place","value":"fn <I> (image: &mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically in place.\n","sig":null,"attributes":[{"value":"/ Flip an image vertically in place.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/affine.rs","byte_start":56946,"byte_end":56984,"line_start":239,"line_end":239,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":256},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":273},{"krate":0,"index":275},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":284},{"krate":0,"index":290},{"krate":0,"index":295},{"krate":0,"index":3882},{"krate":0,"index":3885},{"krate":0,"index":3884},{"krate":0,"index":299},{"krate":0,"index":303},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":316}],"decl_id":null,"docs":" Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[{"value":"! Functions for altering and converting the color of pixelbufs","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":61967,"byte_end":62031,"line_start":1,"line_end":1,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":275},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":62416,"byte_end":62425,"line_start":16,"line_end":16,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"fn <I> (image: &I) -> ImageBuffer<Luma<Subpixel<I>>, Vec<Subpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to grayscale","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":62365,"byte_end":62408,"line_start":15,"line_end":15,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":277},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":62964,"byte_end":62970,"line_start":38,"line_end":38,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"fn <I> (image: &mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[{"value":"/ Invert each pixel within the supplied image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":62871,"byte_end":62919,"line_start":36,"line_end":36,"column_start":1,"column_end":49}},{"value":"/ This function operates in place.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":62920,"byte_end":62956,"line_start":37,"line_end":37,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":279},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":63433,"byte_end":63441,"line_start":54,"line_end":54,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"fn <I, P, S> (image: &I, contrast: f32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":63234,"byte_end":63280,"line_start":51,"line_end":51,"column_start":1,"column_end":47}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":63281,"byte_end":63340,"line_start":52,"line_end":52,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":63341,"byte_end":63425,"line_start":53,"line_end":53,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":284},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":64416,"byte_end":64424,"line_start":89,"line_end":89,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"fn <I, P, S> (image: &I, value: i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the supplied image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":64242,"byte_end":64274,"line_start":86,"line_end":86,"column_start":1,"column_end":33}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":64275,"byte_end":64331,"line_start":87,"line_end":87,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":64332,"byte_end":64408,"line_start":88,"line_end":88,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":290},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":65410,"byte_end":65419,"line_start":124,"line_end":124,"column_start":8,"column_end":17},"name":"huerotate","qualname":"::imageops::colorops::huerotate","value":"fn <I, P, S> (image: &I, value: i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":65194,"byte_end":65228,"line_start":120,"line_end":120,"column_start":1,"column_end":35}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":65229,"byte_end":65280,"line_start":121,"line_end":121,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":65281,"byte_end":65350,"line_start":122,"line_end":122,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":65351,"byte_end":65402,"line_start":123,"line_end":123,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":295},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":67333,"byte_end":67341,"line_start":181,"line_end":181,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[{"value":"/ A color map","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":67307,"byte_end":67322,"line_start":180,"line_end":180,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":296},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":67405,"byte_end":67410,"line_start":183,"line_end":183,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":295},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[{"value":"/ The color type on which the map operates on","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":67348,"byte_end":67395,"line_start":182,"line_end":182,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":67502,"byte_end":67510,"line_start":186,"line_end":186,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"fn (&self, color: &Self::Color) -> usize","parent":{"krate":0,"index":295},"children":[],"decl_id":null,"docs":" Returns the index of the closed match of `color`\n in the color map.\n","sig":null,"attributes":[{"value":"/ Returns the index of the closed match of `color`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":67416,"byte_end":67468,"line_start":184,"line_end":184,"column_start":5,"column_end":57}},{"value":"/ in the color map.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":67473,"byte_end":67494,"line_start":185,"line_end":185,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":67616,"byte_end":67625,"line_start":188,"line_end":188,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"fn (&self, color: &mut Self::Color) -> ()","parent":{"krate":0,"index":295},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[{"value":"/ Maps `color` to the closest color in the color map.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":67553,"byte_end":67608,"line_start":187,"line_end":187,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":3882},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":67721,"byte_end":67728,"line_start":193,"line_end":193,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map\n","sig":null,"attributes":[{"value":"/ A bi-level color map","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":67662,"byte_end":67686,"line_start":191,"line_end":191,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":311},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":69587,"byte_end":69593,"line_start":259,"line_end":259,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"fn <Pix, Map> (image: &mut ImageBuffer<Pix, Vec<u8>>, color_map: &Map) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[{"value":"/ Reduces the colors of the image using the supplied `color_map` while applying","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":69435,"byte_end":69516,"line_start":257,"line_end":257,"column_start":1,"column_end":82}},{"value":"/ Floyd-Steinberg dithering to improve the visual conception","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":69517,"byte_end":69579,"line_start":258,"line_end":258,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":316},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":71138,"byte_end":71150,"line_start":297,"line_end":297,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"fn <Pix, Map> (image: &ImageBuffer<Pix, Vec<u8>>, color_map: &Map) -> ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[{"value":"/ Reduces the colors using the supplied `color_map` and returns an image of the indices","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":71041,"byte_end":71130,"line_start":296,"line_end":296,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3888},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74822,"byte_end":74829,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":3887},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[{"value":"/ Nearest Neighbor","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74797,"byte_end":74817,"line_start":83,"line_end":83,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3890},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74858,"byte_end":74866,"line_start":87,"line_end":87,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":3887},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[{"value":"/ Linear Filter","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74836,"byte_end":74853,"line_start":86,"line_end":86,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3892},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74894,"byte_end":74904,"line_start":90,"line_end":90,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":3887},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[{"value":"/ Cubic Filter","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74873,"byte_end":74889,"line_start":89,"line_end":89,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3894},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74935,"byte_end":74943,"line_start":93,"line_end":93,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":3887},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[{"value":"/ Gaussian Filter","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74911,"byte_end":74930,"line_start":92,"line_end":92,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3896},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74980,"byte_end":74988,"line_start":96,"line_end":96,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":3887},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[{"value":"/ Lanczos with window 3","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74950,"byte_end":74975,"line_start":95,"line_end":95,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":3887},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74780,"byte_end":74790,"line_start":82,"line_end":82,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"FilterType::{Nearest, Triangle, CatmullRom, Gaussian, Lanczos3}","parent":null,"children":[{"krate":0,"index":3888},{"krate":0,"index":3890},{"krate":0,"index":3892},{"krate":0,"index":3894},{"krate":0,"index":3896}],"decl_id":null,"docs":" Available Sampling Filters.","sig":null,"attributes":[{"value":"/ Available Sampling Filters.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72349,"byte_end":72380,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72381,"byte_end":72384,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72385,"byte_end":72400,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72401,"byte_end":72404,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ To test the different sampling filters on a real example, you can find two","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72405,"byte_end":72483,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ examples called","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72484,"byte_end":72503,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/ [`scaledown`](https://github.com/image-rs/image/tree/master/examples/scaledown)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72504,"byte_end":72587,"line_start":21,"line_end":21,"column_start":1,"column_end":84}},{"value":"/ and","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72588,"byte_end":72595,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ [`scaleup`](https://github.com/image-rs/image/tree/master/examples/scaleup)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72596,"byte_end":72675,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ in the `examples` directory of the crate source code.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72676,"byte_end":72733,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72734,"byte_end":72737,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Here is a 3.58 MiB","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72738,"byte_end":72760,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ [test image](https://github.com/image-rs/image/blob/master/examples/scaledown/test.jpg)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72761,"byte_end":72852,"line_start":27,"line_end":27,"column_start":1,"column_end":92}},{"value":"/ that has been scaled down to 300x225 px:","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72853,"byte_end":72897,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72898,"byte_end":72901,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ <!-- NOTE: To test new test images locally, replace the GitHub path with `../../../docs/` -->","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":72902,"byte_end":72999,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ <div style=\"display: flex; flex-wrap: wrap; align-items: flex-start;\">","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73000,"byte_end":73074,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73075,"byte_end":73115,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-near.png\" title=\"Nearest\"><br>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73116,"byte_end":73254,"line_start":33,"line_end":33,"column_start":1,"column_end":139}},{"value":"/     Nearest Neighbor","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73255,"byte_end":73279,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73280,"byte_end":73292,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73293,"byte_end":73333,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-tri.png\" title=\"Triangle\"><br>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73334,"byte_end":73472,"line_start":37,"line_end":37,"column_start":1,"column_end":139}},{"value":"/     Linear: Triangle","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73473,"byte_end":73497,"line_start":38,"line_end":38,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73498,"byte_end":73510,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73511,"byte_end":73551,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-cmr.png\" title=\"CatmullRom\"><br>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73552,"byte_end":73692,"line_start":41,"line_end":41,"column_start":1,"column_end":141}},{"value":"/     Cubic: Catmull-Rom","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73693,"byte_end":73719,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/   </div>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73720,"byte_end":73732,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73733,"byte_end":73773,"line_start":44,"line_end":44,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-gauss.png\" title=\"Gaussian\"><br>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73774,"byte_end":73914,"line_start":45,"line_end":45,"column_start":1,"column_end":141}},{"value":"/     Gaussian","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73915,"byte_end":73931,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/   </div>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73932,"byte_end":73944,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73945,"byte_end":73985,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-lcz2.png\" title=\"Lanczos3\"><br>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":73986,"byte_end":74125,"line_start":49,"line_end":49,"column_start":1,"column_end":140}},{"value":"/     Lanczos with window 3","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74126,"byte_end":74155,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/   </div>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74156,"byte_end":74168,"line_start":51,"line_end":51,"column_start":1,"column_end":13}},{"value":"/ </div>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74169,"byte_end":74179,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74180,"byte_end":74183,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Speed","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74184,"byte_end":74196,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74197,"byte_end":74200,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Time required to create each of the examples above, tested on an Intel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74201,"byte_end":74275,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/ i7-4770 CPU with Rust 1.37 in release mode:","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74276,"byte_end":74323,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74324,"byte_end":74327,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ <table style=\"width: auto;\">","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74328,"byte_end":74360,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/   <tr>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74361,"byte_end":74371,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/     <th>Nearest</th>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74372,"byte_end":74396,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     <td>31 ms</td>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74397,"byte_end":74419,"line_start":62,"line_end":62,"column_start":1,"column_end":23}},{"value":"/   </tr>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74420,"byte_end":74431,"line_start":63,"line_end":63,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74432,"byte_end":74442,"line_start":64,"line_end":64,"column_start":1,"column_end":11}},{"value":"/     <th>Triangle</th>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74443,"byte_end":74468,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/     <td>414 ms</td>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74469,"byte_end":74492,"line_start":66,"line_end":66,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74493,"byte_end":74504,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74505,"byte_end":74515,"line_start":68,"line_end":68,"column_start":1,"column_end":11}},{"value":"/     <th>CatmullRom</th>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74516,"byte_end":74543,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/     <td>817 ms</td>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74544,"byte_end":74567,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74568,"byte_end":74579,"line_start":71,"line_end":71,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74580,"byte_end":74590,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"/     <th>Gaussian</th>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74591,"byte_end":74616,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/     <td>1180 ms</td>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74617,"byte_end":74641,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74642,"byte_end":74653,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74654,"byte_end":74664,"line_start":76,"line_end":76,"column_start":1,"column_end":11}},{"value":"/     <th>Lanczos3</th>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74665,"byte_end":74690,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/     <td>1170 ms</td>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74691,"byte_end":74715,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74716,"byte_end":74727,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ </table>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":74728,"byte_end":74740,"line_start":80,"line_end":80,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":366},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":84450,"byte_end":84459,"line_start":393,"line_end":393,"column_start":8,"column_end":17},"name":"thumbnail","qualname":"::imageops::sample::thumbnail","value":"fn <I, P, S> (image: &I, new_width: u32, new_height: u32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specific dimensions.","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specific dimensions.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":83704,"byte_end":83761,"line_start":381,"line_end":381,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":83762,"byte_end":83765,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ For downscaling, this method uses a fast integer algorithm where each source pixel contributes","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":83766,"byte_end":83864,"line_start":383,"line_end":383,"column_start":1,"column_end":99}},{"value":"/ to exactly one target pixel.  May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":83865,"byte_end":83960,"line_start":384,"line_end":384,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":83961,"byte_end":83964,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ In case the current width is smaller than the new width or similar for the height, another","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":83965,"byte_end":84059,"line_start":386,"line_end":386,"column_start":1,"column_end":95}},{"value":"/ strategy is used instead.  For each pixel in the output, a rectangular region of the input is","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":84060,"byte_end":84157,"line_start":387,"line_end":387,"column_start":1,"column_end":98}},{"value":"/ determined, just as previously.  But when no input pixel is part of this region, the nearest","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":84158,"byte_end":84254,"line_start":388,"line_end":388,"column_start":1,"column_end":97}},{"value":"/ pixels are interpolated instead.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":84255,"byte_end":84291,"line_start":389,"line_end":389,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":84292,"byte_end":84295,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ For speed reasons, all interpolation is performed linearly over the colour values.  It will not","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":84296,"byte_end":84395,"line_start":391,"line_end":391,"column_start":1,"column_end":100}},{"value":"/ take the pixel colour spaces into account.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":84396,"byte_end":84442,"line_start":392,"line_end":392,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":389},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":92318,"byte_end":92327,"line_start":632,"line_end":632,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"fn <I, P, S> (image: &I, kernel: &[f32]) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[{"value":"/ Perform a 3x3 box filter on the supplied image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":92195,"byte_end":92246,"line_start":630,"line_end":630,"column_start":1,"column_end":52}},{"value":"/ ```kernel``` is an array of the filter weights of length 9.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":92247,"byte_end":92310,"line_start":631,"line_end":631,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":394},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":94754,"byte_end":94760,"line_start":712,"line_end":712,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"fn <I> (image: &I, nwidth: u32, nheight: u32, filter: FilterType) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specified dimensions.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":94581,"byte_end":94639,"line_start":709,"line_end":709,"column_start":1,"column_end":59}},{"value":"/ ```nwidth``` and ```nheight``` are the new dimensions.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":94640,"byte_end":94698,"line_start":710,"line_end":710,"column_start":1,"column_end":59}},{"value":"/ ```filter``` is the sampling filter to use.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":94699,"byte_end":94746,"line_start":711,"line_end":711,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":396},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":95886,"byte_end":95890,"line_start":751,"line_end":751,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"fn <I> (image: &I, sigma: f32) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on the supplied image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":95774,"byte_end":95825,"line_start":749,"line_end":749,"column_start":1,"column_end":52}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":95826,"byte_end":95878,"line_start":750,"line_end":750,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":399},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":96713,"byte_end":96722,"line_start":778,"line_end":778,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"fn <I, P, S> (image: &I, sigma: f32, threshold: i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for the difference between","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on the supplied image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":96452,"byte_end":96505,"line_start":773,"line_end":773,"column_start":1,"column_end":54}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":96506,"byte_end":96557,"line_start":774,"line_end":774,"column_start":1,"column_end":52}},{"value":"/ ```threshold``` is the threshold for the difference between","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":96558,"byte_end":96621,"line_start":775,"line_end":775,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":96622,"byte_end":96625,"line_start":776,"line_end":776,"column_start":1,"column_end":4}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":96626,"byte_end":96705,"line_start":777,"line_end":777,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":404},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42626,"byte_end":42630,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"fn <I> (image: &mut I, x: u32, y: u32, width: u32, height: u32) -> SubImage<&mut I>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n","sig":null,"attributes":[{"value":"/ Return a mutable view into an image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42579,"byte_end":42618,"line_start":30,"line_end":30,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":406},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42924,"byte_end":42932,"line_start":43,"line_end":43,"column_start":8,"column_end":16},"name":"crop_imm","qualname":"::imageops::crop_imm","value":"fn <I> (image: &I, x: u32, y: u32, width: u32, height: u32) -> SubImage<&I>","parent":null,"children":[],"decl_id":null,"docs":" Return an immutable view into an image\n","sig":null,"attributes":[{"value":"/ Return an immutable view into an image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42874,"byte_end":42916,"line_start":42,"line_end":42,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":410},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45716,"byte_end":45730,"line_start":127,"line_end":127,"column_start":8,"column_end":22},"name":"overlay_bounds","qualname":"::imageops::overlay_bounds","value":"fn ((bottom_width, bottom_height): (u32, u32), (top_width, top_height): (u32, u32), x: u32, y: u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Calculate the region that can be copied from top to bottom.","sig":null,"attributes":[{"value":"/ Calculate the region that can be copied from top to bottom.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":43544,"byte_end":43607,"line_start":72,"line_end":72,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":43608,"byte_end":43611,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ Given image size of bottom and top image, and a point at which we want to place the top image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":43612,"byte_end":43709,"line_start":74,"line_end":74,"column_start":1,"column_end":98}},{"value":"/ onto the bottom image, how large can we be? Have to wary of the following issues:","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":43710,"byte_end":43795,"line_start":75,"line_end":75,"column_start":1,"column_end":86}},{"value":"/ * Top might be larger than bottom","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":43796,"byte_end":43833,"line_start":76,"line_end":76,"column_start":1,"column_end":38}},{"value":"/ * Overflows in the computation","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":43834,"byte_end":43868,"line_start":77,"line_end":77,"column_start":1,"column_end":35}},{"value":"/ * Coordinates could be completely out of bounds","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":43869,"byte_end":43920,"line_start":78,"line_end":78,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":43921,"byte_end":43924,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ The main idea is to make use of inequalities provided by the nature of `saturing_add` and","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":43925,"byte_end":44018,"line_start":80,"line_end":80,"column_start":1,"column_end":94}},{"value":"/ `saturating_sub`. These intrinsically validate that all resulting coordinates will be in bounds","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44019,"byte_end":44118,"line_start":81,"line_end":81,"column_start":1,"column_end":100}},{"value":"/ for both images.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44119,"byte_end":44139,"line_start":82,"line_end":82,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44140,"byte_end":44143,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ We want that all these coordinate accesses are safe:","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44144,"byte_end":44200,"line_start":84,"line_end":84,"column_start":1,"column_end":57}},{"value":"/ 1. `bottom.get_pixel(x + [0..x_range), y + [0..y_range))`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44201,"byte_end":44262,"line_start":85,"line_end":85,"column_start":1,"column_end":62}},{"value":"/ 2. `top.get_pixel([0..x_range), [0..y_range))`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44263,"byte_end":44313,"line_start":86,"line_end":86,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44314,"byte_end":44317,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Proof that the function provides the necessary bounds for width. Note that all unaugmented math","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44318,"byte_end":44417,"line_start":88,"line_end":88,"column_start":1,"column_end":100}},{"value":"/ operations are to be read in standard arithmetic, not integer arithmetic. Since no direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44418,"byte_end":44511,"line_start":89,"line_end":89,"column_start":1,"column_end":94}},{"value":"/ integer arithmetic occurs in the implementation, this is unambiguous.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44512,"byte_end":44585,"line_start":90,"line_end":90,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44586,"byte_end":44589,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44590,"byte_end":44601,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"/ Three short notes/lemmata:","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44602,"byte_end":44632,"line_start":93,"line_end":93,"column_start":1,"column_end":31}},{"value":"/ - Iff `(a - b) <= 0` then `a.saturating_sub(b) = 0`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44633,"byte_end":44688,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"/ - Iff `(a - b) >= 0` then `a.saturating_sub(b) = a - b`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44689,"byte_end":44748,"line_start":95,"line_end":95,"column_start":1,"column_end":60}},{"value":"/ - If  `a <= c` then `a.saturating_sub(b) <= c.saturating_sub(b)`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44749,"byte_end":44817,"line_start":96,"line_end":96,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44818,"byte_end":44821,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ 1.1 We show that if `bottom_width <= x`, then `x_range = 0` therefore `x + [0..x_range)` is empty.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44822,"byte_end":44924,"line_start":98,"line_end":98,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44925,"byte_end":44928,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44929,"byte_end":44940,"line_start":100,"line_end":100,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":44941,"byte_end":45013,"line_start":101,"line_end":101,"column_start":1,"column_end":73}},{"value":"/ <= bottom_width.saturating_sub(x)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45014,"byte_end":45051,"line_start":102,"line_end":102,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45052,"byte_end":45055,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ bottom_width <= x","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45056,"byte_end":45077,"line_start":104,"line_end":104,"column_start":1,"column_end":22}},{"value":"/ <==> bottom_width - x <= 0","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45078,"byte_end":45108,"line_start":105,"line_end":105,"column_start":1,"column_end":31}},{"value":"/ <==> bottom_width.saturating_sub(x) = 0","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45109,"byte_end":45152,"line_start":106,"line_end":106,"column_start":1,"column_end":44}},{"value":"/  ==> x_range <= 0","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45153,"byte_end":45174,"line_start":107,"line_end":107,"column_start":1,"column_end":22}},{"value":"/  ==> x_range  = 0","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45175,"byte_end":45196,"line_start":108,"line_end":108,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45197,"byte_end":45200,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ 1.2 If `x < bottom_width` then `x + x_range < bottom_width`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45201,"byte_end":45264,"line_start":110,"line_end":110,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45265,"byte_end":45268,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ x + x_range","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45269,"byte_end":45284,"line_start":112,"line_end":112,"column_start":1,"column_end":16}},{"value":"/ <= x + bottom_width.saturating_sub(x)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45285,"byte_end":45326,"line_start":113,"line_end":113,"column_start":1,"column_end":42}},{"value":"/  = x + (bottom_width - x)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45327,"byte_end":45356,"line_start":114,"line_end":114,"column_start":1,"column_end":30}},{"value":"/  = bottom_width","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45357,"byte_end":45376,"line_start":115,"line_end":115,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45377,"byte_end":45380,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ 2. We show that `x_range <= top_width`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45381,"byte_end":45423,"line_start":117,"line_end":117,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45424,"byte_end":45427,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45428,"byte_end":45439,"line_start":119,"line_end":119,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45440,"byte_end":45512,"line_start":120,"line_end":120,"column_start":1,"column_end":73}},{"value":"/ <= top_width.saturating_add(x).saturating_sub(x)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45513,"byte_end":45565,"line_start":121,"line_end":121,"column_start":1,"column_end":53}},{"value":"/ <= (top_wdith + x).saturating_sub(x)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45566,"byte_end":45606,"line_start":122,"line_end":122,"column_start":1,"column_end":41}},{"value":"/  = top_width (due to `top_width >= 0` and `x >= 0`)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45607,"byte_end":45662,"line_start":123,"line_end":123,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45663,"byte_end":45670,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45671,"byte_end":45674,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ Proof is the same for height.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":45675,"byte_end":45708,"line_start":126,"line_end":126,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":411},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":46244,"byte_end":46251,"line_start":145,"line_end":145,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"fn <I, J> (bottom: &mut I, top: &J, x: u32, y: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Overlay an image at a given coordinate (x, y)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":46187,"byte_end":46236,"line_start":144,"line_end":144,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":414},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":46983,"byte_end":46990,"line_start":168,"line_end":168,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"fn <I, J> (bottom: &mut I, top: &J, x: u32, y: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Replace the contents of an image at a given coordinate (x, y)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":46910,"byte_end":46975,"line_start":167,"line_end":167,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":417},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/mod.rs","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":464},{"krate":0,"index":521}],"decl_id":null,"docs":" Input and output of images.\n","sig":null,"attributes":[{"value":"! Input and output of images.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/mod.rs","byte_start":99683,"byte_end":99714,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":439},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101911,"byte_end":101917,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442}],"decl_id":null,"docs":" A multi-format image reader.","sig":null,"attributes":[{"value":"/ A multi-format image reader.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100112,"byte_end":100144,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100145,"byte_end":100148,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Wraps an input reader to facilitate automatic detection of an image's format, appropriate","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100149,"byte_end":100242,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ decoding method, and dispatches into the set of supported [`ImageDecoder`] implementations.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100243,"byte_end":100338,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100339,"byte_end":100342,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100343,"byte_end":100355,"line_start":17,"line_end":17,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100356,"byte_end":100359,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Opening a file, deducing the format based on the file path automatically, and trying to decode","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100360,"byte_end":100458,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ the image contained can be performed by constructing the reader and immediately consuming it.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100459,"byte_end":100556,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100557,"byte_end":100560,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100561,"byte_end":100574,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/ # use image::ImageError;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100575,"byte_end":100603,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100604,"byte_end":100632,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100633,"byte_end":100676,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/ let image = Reader::open(\"path/to/image.png\")?","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100677,"byte_end":100727,"line_start":26,"line_end":26,"column_start":1,"column_end":51}},{"value":"/     .decode()?;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100728,"byte_end":100747,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/ # Ok(()) }","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100748,"byte_end":100762,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100763,"byte_end":100770,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100771,"byte_end":100774,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ It is also possible to make a guess based on the content. This is especially handy if the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100775,"byte_end":100868,"line_start":31,"line_end":31,"column_start":1,"column_end":94}},{"value":"/ source is some blob in memory and you have constructed the reader in another way. Here is an","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100869,"byte_end":100965,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ example with a `pnm` black-and-white subformat that encodes its pixel matrix with ascii values.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":100966,"byte_end":101065,"line_start":33,"line_end":33,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101066,"byte_end":101069,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # use image::ImageError;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101165,"byte_end":101193,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101194,"byte_end":101222,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101223,"byte_end":101266,"line_start":39,"line_end":39,"column_start":1,"column_end":44}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101267,"byte_end":101291,"line_start":40,"line_end":40,"column_start":1,"column_end":25}},{"value":"/ use image::ImageFormat;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101292,"byte_end":101319,"line_start":41,"line_end":41,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101320,"byte_end":101323,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let raw_data = b\"P1 2 2\\n\\","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101324,"byte_end":101354,"line_start":43,"line_end":43,"column_start":1,"column_end":31}},{"value":"/     0 1\\n\\","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101355,"byte_end":101369,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/     1 0\\n\";","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101370,"byte_end":101385,"line_start":45,"line_end":45,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101386,"byte_end":101389,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::new(Cursor::new(raw_data))","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101390,"byte_end":101445,"line_start":47,"line_end":47,"column_start":1,"column_end":56}},{"value":"/     .with_guessed_format()","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101446,"byte_end":101476,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/     .expect(\"Cursor io never fails\");","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101477,"byte_end":101518,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(reader.format(), Some(ImageFormat::Pnm));","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101519,"byte_end":101575,"line_start":50,"line_end":50,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101576,"byte_end":101579,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let image = reader.decode()?;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101580,"byte_end":101613,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/ # Ok(()) }","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101614,"byte_end":101628,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101629,"byte_end":101636,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101637,"byte_end":101640,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ As a final fallback or if only a specific format must be used, the reader always allows manual","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101641,"byte_end":101739,"line_start":56,"line_end":56,"column_start":1,"column_end":99}},{"value":"/ specification of the supposed image format with [`set_format`].","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101740,"byte_end":101807,"line_start":57,"line_end":57,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101808,"byte_end":101811,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`set_format`]: #method.set_format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101812,"byte_end":101850,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ [`ImageDecoder`]: ../trait.ImageDecoder.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":101851,"byte_end":101899,"line_start":60,"line_end":60,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102417,"byte_end":102420,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"fn (reader: R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new image reader without a preset format.","sig":null,"attributes":[{"value":"/ Create a new image reader without a preset format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102081,"byte_end":102135,"line_start":69,"line_end":69,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102140,"byte_end":102143,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It is possible to guess the format based on the content of the read object with","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102148,"byte_end":102231,"line_start":71,"line_end":71,"column_start":5,"column_end":88}},{"value":"/ [`guess_format`], or to set the format directly with [`set_format`].","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102236,"byte_end":102308,"line_start":72,"line_end":72,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102313,"byte_end":102316,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ [`guess_format`]: #method.guess_format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102321,"byte_end":102363,"line_start":74,"line_end":74,"column_start":5,"column_end":47}},{"value":"/ [`set_format`]: method.set_format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102368,"byte_end":102405,"line_start":75,"line_end":75,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102590,"byte_end":102601,"line_start":84,"line_end":84,"column_start":12,"column_end":23},"name":"with_format","qualname":"<Reader<R>>::with_format","value":"fn (reader: R, format: ImageFormat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a reader with specified format.\n","sig":null,"attributes":[{"value":"/ Construct a reader with specified format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102533,"byte_end":102578,"line_start":83,"line_end":83,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102795,"byte_end":102801,"line_start":92,"line_end":92,"column_start":12,"column_end":18},"name":"format","qualname":"<Reader<R>>::format","value":"fn (&self) -> Option<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently determined format.\n","sig":null,"attributes":[{"value":"/ Get the currently determined format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102743,"byte_end":102783,"line_start":91,"line_end":91,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102936,"byte_end":102946,"line_start":97,"line_end":97,"column_start":12,"column_end":22},"name":"set_format","qualname":"<Reader<R>>::set_format","value":"fn (&mut self, format: ImageFormat) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Supply the format as which to interpret the read image.\n","sig":null,"attributes":[{"value":"/ Supply the format as which to interpret the read image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102865,"byte_end":102924,"line_start":96,"line_end":96,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103276,"byte_end":103288,"line_start":105,"line_end":105,"column_start":12,"column_end":24},"name":"clear_format","qualname":"<Reader<R>>::clear_format","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove the current information on the image format.","sig":null,"attributes":[{"value":"/ Remove the current information on the image format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103028,"byte_end":103083,"line_start":101,"line_end":101,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103088,"byte_end":103091,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Note that many operations require format information to be present and will return e.g. an","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103096,"byte_end":103190,"line_start":103,"line_end":103,"column_start":5,"column_end":99}},{"value":"/ `ImageError::Unsupported` when the image format has not been set.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103195,"byte_end":103264,"line_start":104,"line_end":104,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103375,"byte_end":103385,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the reader.\n","sig":null,"attributes":[{"value":"/ Unwrap the reader.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103341,"byte_end":103363,"line_start":109,"line_end":109,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103847,"byte_end":103851,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"name":"open","qualname":"<Reader<BufReader<File>>>::open","value":"fn <P> (path: P) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Open a file to read, format will be guessed from path.","sig":null,"attributes":[{"value":"/ Open a file to read, format will be guessed from path.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103462,"byte_end":103520,"line_start":116,"line_end":116,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103525,"byte_end":103528,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This will not attempt any io operation on the opened file.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103533,"byte_end":103595,"line_start":118,"line_end":118,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103600,"byte_end":103603,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ If you want to inspect the content for a better guess on the format, which does not depend","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103608,"byte_end":103702,"line_start":120,"line_end":120,"column_start":5,"column_end":99}},{"value":"/ on file extensions, follow this call with a call to [`guess_format`].","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103707,"byte_end":103780,"line_start":121,"line_end":121,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103785,"byte_end":103788,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ [`guess_format`]: #method.guess_format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103793,"byte_end":103835,"line_start":123,"line_end":123,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":105497,"byte_end":105516,"line_start":166,"line_end":166,"column_start":12,"column_end":31},"name":"with_guessed_format","qualname":"<Reader<R>>::with_guessed_format","value":"fn (mut self) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Make a format guess based on the content, replacing it on success.","sig":null,"attributes":[{"value":"/ Make a format guess based on the content, replacing it on success.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104219,"byte_end":104289,"line_start":138,"line_end":138,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104294,"byte_end":104297,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok` with the guess if no io error occurs. Additionally, replaces the current","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104302,"byte_end":104391,"line_start":140,"line_end":140,"column_start":5,"column_end":94}},{"value":"/ format if the guess was successful. If the guess was not unable to determine a format then","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104396,"byte_end":104490,"line_start":141,"line_end":141,"column_start":5,"column_end":99}},{"value":"/ the current format of the reader is unchanged.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104495,"byte_end":104545,"line_start":142,"line_end":142,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104550,"byte_end":104553,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the underlying reader fails. The format is unchanged. The error is a","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104558,"byte_end":104650,"line_start":144,"line_end":144,"column_start":5,"column_end":97}},{"value":"/ `std::io::Error` and not `ImageError` since the only error case is an error when the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104655,"byte_end":104743,"line_start":145,"line_end":145,"column_start":5,"column_end":93}},{"value":"/ underlying reader seeks.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104748,"byte_end":104776,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104781,"byte_end":104784,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ When an error occurs, the reader may not have been properly reset and it is potentially","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104789,"byte_end":104880,"line_start":148,"line_end":148,"column_start":5,"column_end":96}},{"value":"/ hazardous to continue with more io.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104885,"byte_end":104924,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104929,"byte_end":104932,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ## Usage","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104937,"byte_end":104949,"line_start":151,"line_end":151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104954,"byte_end":104957,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ This supplements the path based type deduction from [`open`](Reader::open) with content based deduction.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104962,"byte_end":105070,"line_start":153,"line_end":153,"column_start":5,"column_end":113}},{"value":"/ This is more common in Linux and UNIX operating systems and also helpful if the path can","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":105075,"byte_end":105167,"line_start":154,"line_end":154,"column_start":5,"column_end":97}},{"value":"/ not be directly controlled.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":105172,"byte_end":105203,"line_start":155,"line_end":155,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":105208,"byte_end":105211,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":105216,"byte_end":105229,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/ # use image::ImageError;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":105234,"byte_end":105262,"line_start":158,"line_end":158,"column_start":5,"column_end":33}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":105267,"byte_end":105295,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":105300,"byte_end":105343,"line_start":160,"line_end":160,"column_start":5,"column_end":48}},{"value":"/ let image = Reader::open(\"image.unknown\")?","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":105348,"byte_end":105394,"line_start":161,"line_end":161,"column_start":5,"column_end":51}},{"value":"/     .with_guessed_format()?","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":105399,"byte_end":105430,"line_start":162,"line_end":162,"column_start":5,"column_end":36}},{"value":"/     .decode()?;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":105435,"byte_end":105454,"line_start":163,"line_end":163,"column_start":5,"column_end":24}},{"value":"/ # Ok(()) }","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":105459,"byte_end":105473,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":105478,"byte_end":105485,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":106474,"byte_end":106489,"line_start":192,"line_end":192,"column_start":12,"column_end":27},"name":"into_dimensions","qualname":"<Reader<R>>::into_dimensions","value":"fn (mut self) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the image dimensions.","sig":null,"attributes":[{"value":"/ Read the image dimensions.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":106261,"byte_end":106291,"line_start":187,"line_end":187,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":106296,"byte_end":106299,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":106304,"byte_end":106379,"line_start":189,"line_end":189,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":106384,"byte_end":106387,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":106392,"byte_end":106462,"line_start":191,"line_end":191,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":106883,"byte_end":106889,"line_start":202,"line_end":202,"column_start":12,"column_end":18},"name":"decode","qualname":"<Reader<R>>::decode","value":"fn (mut self) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Read the image (replaces `load`).","sig":null,"attributes":[{"value":"/ Read the image (replaces `load`).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":106663,"byte_end":106700,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":106705,"byte_end":106708,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":106713,"byte_end":106788,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":106793,"byte_end":106796,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":106801,"byte_end":106871,"line_start":201,"line_end":201,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":504},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/free_functions.rs","byte_start":108810,"byte_end":108814,"line_start":61,"line_end":61,"column_start":8,"column_end":12},"name":"load","qualname":"::io::free_functions::load","value":"fn <R> (r: R, format: ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader","sig":null,"attributes":[{"value":"/ Create a new image from a Reader","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/free_functions.rs","byte_start":108669,"byte_end":108705,"line_start":56,"line_end":56,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/free_functions.rs","byte_start":108706,"byte_end":108709,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/free_functions.rs","byte_start":108710,"byte_end":108756,"line_start":58,"line_end":58,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/free_functions.rs","byte_start":108757,"byte_end":108760,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/free_functions.rs","byte_start":108761,"byte_end":108802,"line_start":60,"line_end":60,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/free_functions.rs","byte_start":118065,"byte_end":118077,"line_start":270,"line_end":270,"column_start":8,"column_end":20},"name":"guess_format","qualname":"::io::free_functions::guess_format","value":"fn (buffer: &[u8]) -> ImageResult<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Guess image format from memory block","sig":null,"attributes":[{"value":"/ Guess image format from memory block","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/free_functions.rs","byte_start":117804,"byte_end":117844,"line_start":265,"line_end":265,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/free_functions.rs","byte_start":117845,"byte_end":117848,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format based on the Magic Bytes at the beginning.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/free_functions.rs","byte_start":117849,"byte_end":117942,"line_start":267,"line_end":267,"column_start":1,"column_end":94}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/free_functions.rs","byte_start":117943,"byte_end":117985,"line_start":268,"line_end":268,"column_start":1,"column_end":43}},{"value":"/ This is not to be trusted on the validity of the whole memory block","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/free_functions.rs","byte_start":117986,"byte_end":118057,"line_start":269,"line_end":269,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":522},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flat","qualname":"::flat","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","parent":null,"children":[{"krate":0,"index":523},{"krate":0,"index":527},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":543},{"krate":0,"index":546},{"krate":0,"index":3903},{"krate":0,"index":3911},{"krate":0,"index":3908},{"krate":0,"index":3914},{"krate":0,"index":3934},{"krate":0,"index":3933},{"krate":0,"index":3931},{"krate":0,"index":3927},{"krate":0,"index":3928},{"krate":0,"index":3924},{"krate":0,"index":3925},{"krate":0,"index":3921},{"krate":0,"index":3936},{"krate":0,"index":3962},{"krate":0,"index":3961},{"krate":0,"index":3959},{"krate":0,"index":3955},{"krate":0,"index":3956},{"krate":0,"index":3952},{"krate":0,"index":3953},{"krate":0,"index":3942},{"krate":0,"index":3940},{"krate":0,"index":547},{"krate":0,"index":570},{"krate":0,"index":574},{"krate":0,"index":3964},{"krate":0,"index":3973},{"krate":0,"index":3969},{"krate":0,"index":3977},{"krate":0,"index":3986},{"krate":0,"index":3982},{"krate":0,"index":3990},{"krate":0,"index":4012},{"krate":0,"index":4011},{"krate":0,"index":4009},{"krate":0,"index":4005},{"krate":0,"index":4006},{"krate":0,"index":4002},{"krate":0,"index":4003},{"krate":0,"index":3999},{"krate":0,"index":4014},{"krate":0,"index":4037},{"krate":0,"index":4036},{"krate":0,"index":4034},{"krate":0,"index":4031},{"krate":0,"index":4032},{"krate":0,"index":4028},{"krate":0,"index":4029},{"krate":0,"index":4025},{"krate":0,"index":616},{"krate":0,"index":629},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":648},{"krate":0,"index":652},{"krate":0,"index":664},{"krate":0,"index":676},{"krate":0,"index":684},{"krate":0,"index":689}],"decl_id":null,"docs":" Image representations for ffi.","sig":null,"attributes":[{"value":"! Image representations for ffi.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":118853,"byte_end":118887,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":118888,"byte_end":118891,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Usage","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":118892,"byte_end":118903,"line_start":3,"line_end":3,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":118904,"byte_end":118907,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Imagine you want to offer a very simple ffi interface: The caller provides an image buffer and","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":118908,"byte_end":119006,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"! your program creates a thumbnail from it and dumps that image as `png`. This module is designed","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119007,"byte_end":119106,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"! to help you transition from raw memory data to Rust representation.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119107,"byte_end":119178,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119179,"byte_end":119182,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! ```no_run","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119183,"byte_end":119196,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"! use std::ptr;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119197,"byte_end":119214,"line_start":10,"line_end":10,"column_start":1,"column_end":18}},{"value":"! use std::slice;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119215,"byte_end":119234,"line_start":11,"line_end":11,"column_start":1,"column_end":20}},{"value":"! use image::Rgb;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119235,"byte_end":119254,"line_start":12,"line_end":12,"column_start":1,"column_end":20}},{"value":"! use image::flat::{FlatSamples, SampleLayout};","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119255,"byte_end":119304,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"! use image::imageops::thumbnail;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119305,"byte_end":119340,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119341,"byte_end":119344,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! #[no_mangle]","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119345,"byte_end":119361,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"! pub extern \"C\" fn store_rgb8_compressed(","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119362,"byte_end":119406,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"!     data: *const u8, len: usize,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119407,"byte_end":119443,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"!     layout: *const SampleLayout","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119444,"byte_end":119479,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"! )","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119480,"byte_end":119485,"line_start":20,"line_end":20,"column_start":1,"column_end":6}},{"value":"!     -> bool","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119486,"byte_end":119501,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"! {","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119502,"byte_end":119507,"line_start":22,"line_end":22,"column_start":1,"column_end":6}},{"value":"!     let samples = unsafe { slice::from_raw_parts(data, len) };","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119508,"byte_end":119574,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"!     let layout = unsafe { ptr::read(layout) };","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119575,"byte_end":119625,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119626,"byte_end":119629,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"!     let buffer = FlatSamples {","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119630,"byte_end":119664,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"!         samples,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119665,"byte_end":119685,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"!         layout,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119686,"byte_end":119705,"line_start":28,"line_end":28,"column_start":1,"column_end":20}},{"value":"!         color_hint: None,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119706,"byte_end":119735,"line_start":29,"line_end":29,"column_start":1,"column_end":30}},{"value":"!     };","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119736,"byte_end":119746,"line_start":30,"line_end":30,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119747,"byte_end":119750,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"!     let view = match buffer.as_view::<Rgb<u8>>() {","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119751,"byte_end":119805,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"!         Err(_) => return false, // Invalid layout.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119806,"byte_end":119860,"line_start":33,"line_end":33,"column_start":1,"column_end":55}},{"value":"!         Ok(view) => view,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119861,"byte_end":119890,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"!     };","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119891,"byte_end":119901,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119902,"byte_end":119905,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"!     thumbnail(&view, 64, 64)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119906,"byte_end":119938,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"!         .save(\"output.png\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119939,"byte_end":119970,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"!         .map(|_| true)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119971,"byte_end":119997,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"!         .unwrap_or_else(|_| false)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":119998,"byte_end":120036,"line_start":40,"line_end":40,"column_start":1,"column_end":39}},{"value":"! }","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":120037,"byte_end":120042,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":120043,"byte_end":120050,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":120051,"byte_end":120054,"line_start":43,"line_end":43,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3903},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121098,"byte_end":121109,"line_start":67,"line_end":67,"column_start":12,"column_end":23},"name":"FlatSamples","qualname":"::flat::FlatSamples","value":"FlatSamples { samples, layout, color_hint }","parent":null,"children":[{"krate":0,"index":3905},{"krate":0,"index":3906},{"krate":0,"index":3907}],"decl_id":null,"docs":" A flat buffer over a (multi channel) image.","sig":null,"attributes":[{"value":"/ A flat buffer over a (multi channel) image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":120449,"byte_end":120496,"line_start":56,"line_end":56,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":120497,"byte_end":120500,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ In contrast to `ImageBuffer`, this representation of a sample collection is much more lenient","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":120501,"byte_end":120598,"line_start":58,"line_end":58,"column_start":1,"column_end":98}},{"value":"/ in the layout thereof. In particular, it also allows grouping by color planes instead of by","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":120599,"byte_end":120694,"line_start":59,"line_end":59,"column_start":1,"column_end":96}},{"value":"/ pixel, at least for the purpose of a `GenericImageView`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":120695,"byte_end":120755,"line_start":60,"line_end":60,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":120756,"byte_end":120759,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ Note that the strides need not conform to the assumption that constructed indices actually","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":120760,"byte_end":120854,"line_start":62,"line_end":62,"column_start":1,"column_end":95}},{"value":"/ refer inside the underlying buffer but return values of library functions will always guarantee","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":120855,"byte_end":120954,"line_start":63,"line_end":63,"column_start":1,"column_end":100}},{"value":"/ this. To manually make this check use `check_index_validities` and maybe put that inside an","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":120955,"byte_end":121050,"line_start":64,"line_end":64,"column_start":1,"column_end":96}},{"value":"/ assert.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121051,"byte_end":121062,"line_start":65,"line_end":65,"column_start":1,"column_end":12}}]},{"kind":"Field","id":{"krate":0,"index":3905},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121187,"byte_end":121194,"line_start":69,"line_end":69,"column_start":9,"column_end":16},"name":"samples","qualname":"::flat::FlatSamples::samples","value":"Buffer","parent":{"krate":0,"index":3903},"children":[],"decl_id":null,"docs":" Underlying linear container holding sample values.\n","sig":null,"attributes":[{"value":"/ Underlying linear container holding sample values.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121124,"byte_end":121178,"line_start":68,"line_end":68,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":3906},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121278,"byte_end":121284,"line_start":72,"line_end":72,"column_start":9,"column_end":15},"name":"layout","qualname":"::flat::FlatSamples::layout","value":"flat::SampleLayout","parent":{"krate":0,"index":3903},"children":[],"decl_id":null,"docs":" A `repr(C)` description of the layout of buffer samples.\n","sig":null,"attributes":[{"value":"/ A `repr(C)` description of the layout of buffer samples.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121209,"byte_end":121269,"line_start":71,"line_end":71,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":3907},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121739,"byte_end":121749,"line_start":80,"line_end":80,"column_start":9,"column_end":19},"name":"color_hint","qualname":"::flat::FlatSamples::color_hint","value":"std::option::Option<color::ColorType>","parent":{"krate":0,"index":3903},"children":[],"decl_id":null,"docs":" Supplementary color information.","sig":null,"attributes":[{"value":"/ Supplementary color information.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121305,"byte_end":121341,"line_start":74,"line_end":74,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121346,"byte_end":121349,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ You may keep this as `None` in most cases. This is NOT checked in `View` or other","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121354,"byte_end":121439,"line_start":76,"line_end":76,"column_start":5,"column_end":90}},{"value":"/ converters. It is intended mainly as a way for types that convert to this buffer type to","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121444,"byte_end":121536,"line_start":77,"line_end":77,"column_start":5,"column_end":97}},{"value":"/ attach their otherwise static color information. A dynamic image representation could","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121541,"byte_end":121630,"line_start":78,"line_end":78,"column_start":5,"column_end":94}},{"value":"/ however use this to resolve representational ambiguities such as the order of RGB channels.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121635,"byte_end":121730,"line_start":79,"line_end":79,"column_start":5,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":3914},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121899,"byte_end":121911,"line_start":86,"line_end":86,"column_start":12,"column_end":24},"name":"SampleLayout","qualname":"::flat::SampleLayout","value":"SampleLayout { channels, channel_stride, width, width_stride, height, height_stride }","parent":null,"children":[{"krate":0,"index":3915},{"krate":0,"index":3916},{"krate":0,"index":3917},{"krate":0,"index":3918},{"krate":0,"index":3919},{"krate":0,"index":3920}],"decl_id":null,"docs":" A ffi compatible description of a sample buffer.\n","sig":null,"attributes":[{"value":"/ A ffi compatible description of a sample buffer.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121773,"byte_end":121825,"line_start":83,"line_end":83,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121826,"byte_end":121836,"line_start":84,"line_end":84,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3915},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121995,"byte_end":122003,"line_start":88,"line_end":88,"column_start":9,"column_end":17},"name":"channels","qualname":"::flat::SampleLayout::channels","value":"u8","parent":{"krate":0,"index":3914},"children":[],"decl_id":null,"docs":" The number of channels in the color representation of the image.\n","sig":null,"attributes":[{"value":"/ The number of channels in the color representation of the image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":121918,"byte_end":121986,"line_start":87,"line_end":87,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3916},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122089,"byte_end":122103,"line_start":91,"line_end":91,"column_start":9,"column_end":23},"name":"channel_stride","qualname":"::flat::SampleLayout::channel_stride","value":"usize","parent":{"krate":0,"index":3914},"children":[],"decl_id":null,"docs":" Add this to an index to get to the sample in the next channel.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the sample in the next channel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122014,"byte_end":122080,"line_start":90,"line_end":90,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":3917},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122165,"byte_end":122170,"line_start":94,"line_end":94,"column_start":9,"column_end":14},"name":"width","qualname":"::flat::SampleLayout::width","value":"u32","parent":{"krate":0,"index":3914},"children":[],"decl_id":null,"docs":" The width of the represented image.\n","sig":null,"attributes":[{"value":"/ The width of the represented image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122117,"byte_end":122156,"line_start":93,"line_end":93,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":3918},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122257,"byte_end":122269,"line_start":97,"line_end":97,"column_start":9,"column_end":21},"name":"width_stride","qualname":"::flat::SampleLayout::width_stride","value":"usize","parent":{"krate":0,"index":3914},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in x-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in x-direction.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122182,"byte_end":122248,"line_start":96,"line_end":96,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":3919},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122332,"byte_end":122338,"line_start":100,"line_end":100,"column_start":9,"column_end":15},"name":"height","qualname":"::flat::SampleLayout::height","value":"u32","parent":{"krate":0,"index":3914},"children":[],"decl_id":null,"docs":" The height of the represented image.\n","sig":null,"attributes":[{"value":"/ The height of the represented image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122283,"byte_end":122323,"line_start":99,"line_end":99,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":3920},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122425,"byte_end":122438,"line_start":103,"line_end":103,"column_start":9,"column_end":22},"name":"height_stride","qualname":"::flat::SampleLayout::height_stride","value":"usize","parent":{"krate":0,"index":3914},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in y-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in y-direction.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122350,"byte_end":122416,"line_start":102,"line_end":102,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":123413,"byte_end":123429,"line_start":127,"line_end":127,"column_start":12,"column_end":28},"name":"row_major_packed","qualname":"<SampleLayout>::row_major_packed","value":"fn (channels: u8, width: u32, height: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a row-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a row-major image packed in all directions.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122619,"byte_end":122675,"line_start":111,"line_end":111,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122680,"byte_end":122683,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::RowMajorPacked`. It can therefore be converted to","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122688,"byte_end":122783,"line_start":113,"line_end":113,"column_start":5,"column_end":100}},{"value":"/ safely to an `ImageBuffer` with a large enough underlying buffer.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122788,"byte_end":122857,"line_start":114,"line_end":114,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122862,"byte_end":122865,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122870,"byte_end":122877,"line_start":116,"line_end":116,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122882,"byte_end":122932,"line_start":117,"line_end":117,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::row_major_packed(3, 640, 480);","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122937,"byte_end":122998,"line_start":118,"line_end":118,"column_start":5,"column_end":66}},{"value":"/ assert!(layout.is_normal(NormalForm::RowMajorPacked));","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":123003,"byte_end":123061,"line_start":119,"line_end":119,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":123066,"byte_end":123073,"line_start":120,"line_end":120,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":123078,"byte_end":123081,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":123086,"byte_end":123098,"line_start":122,"line_end":122,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":123103,"byte_end":123106,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":123111,"byte_end":123206,"line_start":124,"line_end":124,"column_start":5,"column_end":100}},{"value":"/ in the `height` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":123211,"byte_end":123302,"line_start":125,"line_end":125,"column_start":5,"column_end":96}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":123307,"byte_end":123401,"line_start":126,"line_end":126,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":124680,"byte_end":124699,"line_start":156,"line_end":156,"column_start":12,"column_end":31},"name":"column_major_packed","qualname":"<SampleLayout>::column_major_packed","value":"fn (channels: u8, width: u32, height: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a column-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a column-major image packed in all directions.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":123867,"byte_end":123926,"line_start":140,"line_end":140,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":123931,"byte_end":123934,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::ColumnMajorPacked`. This is not particularly","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":123939,"byte_end":124029,"line_start":142,"line_end":142,"column_start":5,"column_end":95}},{"value":"/ useful for conversion but can be used to describe such a buffer without pitfalls.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":124034,"byte_end":124119,"line_start":143,"line_end":143,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":124124,"byte_end":124127,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":124132,"byte_end":124139,"line_start":145,"line_end":145,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":124144,"byte_end":124194,"line_start":146,"line_end":146,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::column_major_packed(3, 640, 480);","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":124199,"byte_end":124263,"line_start":147,"line_end":147,"column_start":5,"column_end":69}},{"value":"/ assert!(layout.is_normal(NormalForm::ColumnMajorPacked));","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":124268,"byte_end":124329,"line_start":148,"line_end":148,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":124334,"byte_end":124341,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":124346,"byte_end":124349,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":124354,"byte_end":124366,"line_start":151,"line_end":151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":124371,"byte_end":124374,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":124379,"byte_end":124474,"line_start":153,"line_end":153,"column_start":5,"column_end":100}},{"value":"/ in the `width` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":124479,"byte_end":124569,"line_start":154,"line_end":154,"column_start":5,"column_end":95}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":124574,"byte_end":124668,"line_start":155,"line_end":155,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":125315,"byte_end":125326,"line_start":173,"line_end":173,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<SampleLayout>::strides_cwh","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":125140,"byte_end":125199,"line_start":169,"line_end":169,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":125204,"byte_end":125207,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":125212,"byte_end":125283,"line_start":171,"line_end":171,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":125288,"byte_end":125303,"line_start":172,"line_end":172,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":125643,"byte_end":125650,"line_start":181,"line_end":181,"column_start":12,"column_end":19},"name":"extents","qualname":"<SampleLayout>::extents","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":125441,"byte_end":125492,"line_start":177,"line_end":177,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":125497,"byte_end":125500,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":125505,"byte_end":125598,"line_start":179,"line_end":179,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":125603,"byte_end":125631,"line_start":180,"line_end":180,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126024,"byte_end":126030,"line_start":189,"line_end":189,"column_start":12,"column_end":18},"name":"bounds","qualname":"<SampleLayout>::bounds","value":"fn (&self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":125772,"byte_end":125826,"line_start":185,"line_end":185,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":125831,"byte_end":125834,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":125839,"byte_end":125929,"line_start":187,"line_end":187,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":125934,"byte_end":126012,"line_start":188,"line_end":188,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":128183,"byte_end":128193,"line_start":244,"line_end":244,"column_start":12,"column_end":22},"name":"min_length","qualname":"<SampleLayout>::min_length","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126118,"byte_end":126208,"line_start":193,"line_end":193,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126213,"byte_end":126216,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126221,"byte_end":126316,"line_start":195,"line_end":195,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126321,"byte_end":126411,"line_start":196,"line_end":196,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126416,"byte_end":126507,"line_start":197,"line_end":197,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126512,"byte_end":126569,"line_start":198,"line_end":198,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126574,"byte_end":126577,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126582,"byte_end":126599,"line_start":200,"line_end":200,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126604,"byte_end":126607,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126612,"byte_end":126696,"line_start":202,"line_end":202,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126701,"byte_end":126792,"line_start":203,"line_end":203,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126797,"byte_end":126800,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126805,"byte_end":126830,"line_start":205,"line_end":205,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126835,"byte_end":126838,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126843,"byte_end":126897,"line_start":207,"line_end":207,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126902,"byte_end":126926,"line_start":208,"line_end":208,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126931,"byte_end":126948,"line_start":209,"line_end":209,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126953,"byte_end":126978,"line_start":210,"line_end":210,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":126983,"byte_end":127001,"line_start":211,"line_end":211,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127006,"byte_end":127009,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127014,"byte_end":127025,"line_start":213,"line_end":213,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127030,"byte_end":127053,"line_start":214,"line_end":214,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127058,"byte_end":127077,"line_start":215,"line_end":215,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127082,"byte_end":127124,"line_start":216,"line_end":216,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127129,"byte_end":127136,"line_start":217,"line_end":217,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127141,"byte_end":127144,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127149,"byte_end":127241,"line_start":219,"line_end":219,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127246,"byte_end":127336,"line_start":220,"line_end":220,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127341,"byte_end":127344,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127349,"byte_end":127377,"line_start":222,"line_end":222,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127382,"byte_end":127385,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127390,"byte_end":127482,"line_start":224,"line_end":224,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127487,"byte_end":127581,"line_start":225,"line_end":225,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127586,"byte_end":127641,"line_start":226,"line_end":226,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127646,"byte_end":127649,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127654,"byte_end":127678,"line_start":228,"line_end":228,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127683,"byte_end":127700,"line_start":229,"line_end":229,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127705,"byte_end":127730,"line_start":230,"line_end":230,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127735,"byte_end":127753,"line_start":231,"line_end":231,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127758,"byte_end":127761,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127766,"byte_end":127777,"line_start":233,"line_end":233,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127782,"byte_end":127798,"line_start":234,"line_end":234,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127803,"byte_end":127822,"line_start":235,"line_end":235,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127827,"byte_end":127850,"line_start":236,"line_end":236,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127855,"byte_end":127884,"line_start":237,"line_end":237,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127889,"byte_end":127924,"line_start":238,"line_end":238,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127929,"byte_end":127936,"line_start":239,"line_end":239,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127941,"byte_end":127944,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":127949,"byte_end":128043,"line_start":241,"line_end":241,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":128048,"byte_end":128141,"line_start":242,"line_end":242,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":128146,"byte_end":128171,"line_start":243,"line_end":243,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":128525,"byte_end":128529,"line_start":254,"line_end":254,"column_start":12,"column_end":16},"name":"fits","qualname":"<SampleLayout>::fits","value":"fn (&self, len: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":128459,"byte_end":128513,"line_start":253,"line_end":253,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":129639,"byte_end":129658,"line_start":279,"line_end":279,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<SampleLayout>::has_aliased_samples","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":129289,"byte_end":129338,"line_start":274,"line_end":274,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":129343,"byte_end":129346,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":129351,"byte_end":129444,"line_start":276,"line_end":276,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":129449,"byte_end":129543,"line_start":277,"line_end":277,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":129548,"byte_end":129627,"line_start":278,"line_end":278,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":130903,"byte_end":130912,"line_start":309,"line_end":309,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<SampleLayout>::is_normal","value":"fn (&self, form: NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":130393,"byte_end":130458,"line_start":302,"line_end":302,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":130463,"byte_end":130466,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":130471,"byte_end":130564,"line_start":304,"line_end":304,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":130569,"byte_end":130664,"line_start":305,"line_end":305,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":130669,"byte_end":130761,"line_start":306,"line_end":306,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":130766,"byte_end":130860,"line_start":307,"line_end":307,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":130865,"byte_end":130891,"line_start":308,"line_end":308,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":132610,"byte_end":132619,"line_start":364,"line_end":364,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<SampleLayout>::in_bounds","value":"fn (&self, channel: u8, x: u32, y: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":132268,"byte_end":132329,"line_start":359,"line_end":359,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":132334,"byte_end":132337,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":132342,"byte_end":132431,"line_start":361,"line_end":361,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":132436,"byte_end":132530,"line_start":362,"line_end":362,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":132535,"byte_end":132598,"line_start":363,"line_end":363,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":132893,"byte_end":132898,"line_start":371,"line_end":371,"column_start":12,"column_end":17},"name":"index","qualname":"<SampleLayout>::index","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":132746,"byte_end":132791,"line_start":368,"line_end":368,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":132796,"byte_end":132799,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":132804,"byte_end":132881,"line_start":370,"line_end":370,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":133492,"byte_end":133513,"line_start":384,"line_end":384,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<SampleLayout>::index_ignoring_bounds","value":"fn (&self, channel: usize, x: usize, y: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (channel, x, y).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (channel, x, y).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":133121,"byte_end":133180,"line_start":379,"line_end":379,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":133185,"byte_end":133188,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":133193,"byte_end":133282,"line_start":381,"line_end":381,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":133287,"byte_end":133381,"line_start":382,"line_end":382,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":133386,"byte_end":133480,"line_start":383,"line_end":383,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":134444,"byte_end":134459,"line_start":405,"line_end":405,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<SampleLayout>::in_bounds_index","value":"fn (&self, c: u8, x: u32, y: u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":134143,"byte_end":134183,"line_start":400,"line_end":400,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":134188,"byte_end":134191,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":134196,"byte_end":134288,"line_start":402,"line_end":402,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":134293,"byte_end":134388,"line_start":403,"line_end":403,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":134393,"byte_end":134432,"line_start":404,"line_end":404,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":134987,"byte_end":134996,"line_start":416,"line_end":416,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<SampleLayout>::shrink_to","value":"fn (&mut self, channels: u8, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":134662,"byte_end":134727,"line_start":411,"line_end":411,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":134732,"byte_end":134735,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":134740,"byte_end":134828,"line_start":413,"line_end":413,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":134833,"byte_end":134928,"line_start":414,"line_end":414,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":134933,"byte_end":134975,"line_start":415,"line_end":415,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":135669,"byte_end":135680,"line_start":443,"line_end":443,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<FlatSamples<Buffer>>::strides_cwh","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":135494,"byte_end":135553,"line_start":439,"line_end":439,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":135558,"byte_end":135561,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":135566,"byte_end":135637,"line_start":441,"line_end":441,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":135642,"byte_end":135657,"line_start":442,"line_end":442,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":135962,"byte_end":135969,"line_start":451,"line_end":451,"column_start":12,"column_end":19},"name":"extents","qualname":"<FlatSamples<Buffer>>::extents","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":135760,"byte_end":135811,"line_start":447,"line_end":447,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":135816,"byte_end":135819,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":135824,"byte_end":135917,"line_start":449,"line_end":449,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":135922,"byte_end":135950,"line_start":450,"line_end":450,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":136297,"byte_end":136303,"line_start":459,"line_end":459,"column_start":12,"column_end":18},"name":"bounds","qualname":"<FlatSamples<Buffer>>::bounds","value":"fn (&self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":136045,"byte_end":136099,"line_start":455,"line_end":455,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":136104,"byte_end":136107,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":136112,"byte_end":136202,"line_start":457,"line_end":457,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":136207,"byte_end":136285,"line_start":458,"line_end":458,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":136417,"byte_end":136423,"line_start":464,"line_end":464,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FlatSamples<Buffer>>::as_ref","value":"fn <T> (&self) -> FlatSamples<&[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference based version.\n","sig":null,"attributes":[{"value":"/ Get a reference based version.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":136371,"byte_end":136405,"line_start":463,"line_end":463,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":136697,"byte_end":136703,"line_start":473,"line_end":473,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<FlatSamples<Buffer>>::as_mut","value":"fn <T> (&mut self) -> FlatSamples<&mut [T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference based version.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference based version.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":136643,"byte_end":136685,"line_start":472,"line_end":472,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":136982,"byte_end":136988,"line_start":482,"line_end":482,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<FlatSamples<Buffer>>::to_vec","value":"fn <T> (&self) -> FlatSamples<Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":" Copy the data into an owned vector.\n","sig":null,"attributes":[{"value":"/ Copy the data into an owned vector.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":136931,"byte_end":136970,"line_start":481,"line_end":481,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":138261,"byte_end":138271,"line_start":513,"line_end":513,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<FlatSamples<Buffer>>::get_sample","value":"fn <T> (&self, channel: u8, x: u32, y: u32) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a reference to a single sample.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137241,"byte_end":137280,"line_start":492,"line_end":492,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137285,"byte_end":137288,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::Index` but guarantees to properly","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137293,"byte_end":137388,"line_start":494,"line_end":494,"column_start":5,"column_end":100}},{"value":"/ check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137393,"byte_end":137471,"line_start":495,"line_end":495,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137476,"byte_end":137479,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137484,"byte_end":137491,"line_start":497,"line_end":497,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137496,"byte_end":137524,"line_start":498,"line_end":498,"column_start":5,"column_end":33}},{"value":"/ let flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137529,"byte_end":137588,"line_start":499,"line_end":499,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137593,"byte_end":137596,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ // Get the blue channel at (10, 10).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137601,"byte_end":137641,"line_start":501,"line_end":501,"column_start":5,"column_end":45}},{"value":"/ assert!(flat.get_sample(1, 10, 10).is_some());","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137646,"byte_end":137696,"line_start":502,"line_end":502,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137701,"byte_end":137704,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137709,"byte_end":137742,"line_start":504,"line_end":504,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_sample(3, 10, 10).is_none());","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137747,"byte_end":137797,"line_start":505,"line_end":505,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137802,"byte_end":137809,"line_start":506,"line_end":506,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137814,"byte_end":137817,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137822,"byte_end":137912,"line_start":508,"line_end":508,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":137917,"byte_end":137998,"line_start":509,"line_end":509,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":138003,"byte_end":138098,"line_start":510,"line_end":510,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":138103,"byte_end":138190,"line_start":511,"line_end":511,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":138195,"byte_end":138249,"line_start":512,"line_end":512,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139868,"byte_end":139882,"line_start":546,"line_end":546,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<FlatSamples<Buffer>>::get_mut_sample","value":"fn <T> (&mut self, channel: u8, x: u32, y: u32) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a single sample.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":138458,"byte_end":138505,"line_start":520,"line_end":520,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":138510,"byte_end":138513,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::IndexMut` but guarantees to","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":138518,"byte_end":138607,"line_start":522,"line_end":522,"column_start":5,"column_end":94}},{"value":"/ properly check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":138612,"byte_end":138699,"line_start":523,"line_end":523,"column_start":5,"column_end":92}},{"value":"/ Contrary to conversion to `ViewMut`, this does not require that samples are packed since it","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":138704,"byte_end":138799,"line_start":524,"line_end":524,"column_start":5,"column_end":100}},{"value":"/ does not need to convert samples to a color representation.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":138804,"byte_end":138867,"line_start":525,"line_end":525,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":138872,"byte_end":138875,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":138880,"byte_end":138974,"line_start":527,"line_end":527,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":138979,"byte_end":139048,"line_start":528,"line_end":528,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139053,"byte_end":139056,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139061,"byte_end":139068,"line_start":530,"line_end":530,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139073,"byte_end":139101,"line_start":531,"line_end":531,"column_start":5,"column_end":33}},{"value":"/ let mut flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139106,"byte_end":139169,"line_start":532,"line_end":532,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139174,"byte_end":139177,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ // Assign some new color to the blue channel at (10, 10).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139182,"byte_end":139243,"line_start":534,"line_end":534,"column_start":5,"column_end":66}},{"value":"/ *flat.get_mut_sample(1, 10, 10).unwrap() = 255;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139248,"byte_end":139299,"line_start":535,"line_end":535,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139304,"byte_end":139307,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139312,"byte_end":139345,"line_start":537,"line_end":537,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_mut_sample(3, 10, 10).is_none());","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139350,"byte_end":139404,"line_start":538,"line_end":538,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139409,"byte_end":139416,"line_start":539,"line_end":539,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139421,"byte_end":139424,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139429,"byte_end":139519,"line_start":541,"line_end":541,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139524,"byte_end":139605,"line_start":542,"line_end":542,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139610,"byte_end":139705,"line_start":543,"line_end":543,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139710,"byte_end":139797,"line_start":544,"line_end":544,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":139802,"byte_end":139856,"line_start":545,"line_end":545,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":140546,"byte_end":140553,"line_start":561,"line_end":561,"column_start":12,"column_end":19},"name":"as_view","qualname":"<FlatSamples<Buffer>>::as_view","value":"fn <P> (&self) -> Result<View<&[P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer as an image over some type of pixel.","sig":null,"attributes":[{"value":"/ View this buffer as an image over some type of pixel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":140134,"byte_end":140191,"line_start":555,"line_end":555,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":140196,"byte_end":140199,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":140204,"byte_end":140294,"line_start":557,"line_end":557,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":140299,"byte_end":140393,"line_start":558,"line_end":558,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":140398,"byte_end":140492,"line_start":559,"line_end":559,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":140497,"byte_end":140534,"line_start":560,"line_end":560,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":142130,"byte_end":142154,"line_start":598,"line_end":598,"column_start":12,"column_end":36},"name":"as_view_with_mut_samples","qualname":"<FlatSamples<Buffer>>::as_view_with_mut_samples","value":"fn <P> (&mut self) -> Result<View<&mut [P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer but keep mutability at a sample level.","sig":null,"attributes":[{"value":"/ View this buffer but keep mutability at a sample level.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":141165,"byte_end":141224,"line_start":583,"line_end":583,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":141229,"byte_end":141232,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ This is similar to `as_view` but subtly different from `as_view_mut`. The resulting type","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":141237,"byte_end":141329,"line_start":585,"line_end":585,"column_start":5,"column_end":97}},{"value":"/ can be used as a `GenericImage` with the same prior invariants needed as for `as_view`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":141334,"byte_end":141425,"line_start":586,"line_end":586,"column_start":5,"column_end":96}},{"value":"/ It can not be used as a mutable `GenericImage` but does not need channels to be packed in","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":141430,"byte_end":141523,"line_start":587,"line_end":587,"column_start":5,"column_end":98}},{"value":"/ their pixel representation.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":141528,"byte_end":141559,"line_start":588,"line_end":588,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":141564,"byte_end":141567,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":141572,"byte_end":141662,"line_start":590,"line_end":590,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":141667,"byte_end":141761,"line_start":591,"line_end":591,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":141766,"byte_end":141860,"line_start":592,"line_end":592,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":141865,"byte_end":141902,"line_start":593,"line_end":593,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":141907,"byte_end":141910,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":141915,"byte_end":142009,"line_start":595,"line_end":595,"column_start":5,"column_end":99}},{"value":"/ for one sample can in fact modify other samples as well. Sometimes exactly this is","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":142014,"byte_end":142100,"line_start":596,"line_end":596,"column_start":5,"column_end":91}},{"value":"/ intended.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":142105,"byte_end":142118,"line_start":597,"line_end":597,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":143517,"byte_end":143528,"line_start":631,"line_end":631,"column_start":12,"column_end":23},"name":"as_view_mut","qualname":"<FlatSamples<Buffer>>::as_view_mut","value":"fn <P> (&mut self) -> Result<ViewMut<&mut [P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Interpret this buffer as a mutable image.","sig":null,"attributes":[{"value":"/ Interpret this buffer as a mutable image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":142774,"byte_end":142819,"line_start":620,"line_end":620,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":142824,"byte_end":142827,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ To succeed, the pixels in this buffer may not alias each other and the samples of each","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":142832,"byte_end":142922,"line_start":622,"line_end":622,"column_start":5,"column_end":95}},{"value":"/ pixel must be packed (i.e. `channel_stride` is `1`). The number of channels must be","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":142927,"byte_end":143014,"line_start":623,"line_end":623,"column_start":5,"column_end":92}},{"value":"/ consistent with the channel count expected by the pixel format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":143019,"byte_end":143086,"line_start":624,"line_end":624,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":143091,"byte_end":143094,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ This is similar to an `ImageBuffer` except it is a temporary view that is not normalized as","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":143099,"byte_end":143194,"line_start":626,"line_end":626,"column_start":5,"column_end":100}},{"value":"/ strongly. To get an owning version, consider copying the data into an `ImageBuffer`. This","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":143199,"byte_end":143292,"line_start":627,"line_end":627,"column_start":5,"column_end":98}},{"value":"/ provides many more operations, is possibly faster (if not you may want to open an issue) is","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":143297,"byte_end":143392,"line_start":628,"line_end":628,"column_start":5,"column_end":100}},{"value":"/ generally polished. You can also try to convert this buffer inline, see","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":143397,"byte_end":143472,"line_start":629,"line_end":629,"column_start":5,"column_end":80}},{"value":"/ `ImageBuffer::from_raw`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":143477,"byte_end":143505,"line_start":630,"line_end":630,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":144525,"byte_end":144533,"line_start":661,"line_end":661,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FlatSamples<Buffer>>::as_slice","value":"fn <T> (&self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":144301,"byte_end":144333,"line_start":657,"line_end":657,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":144338,"byte_end":144341,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":144346,"byte_end":144438,"line_start":659,"line_end":659,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":144443,"byte_end":144513,"line_start":660,"line_end":660,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":144844,"byte_end":144856,"line_start":669,"line_end":669,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FlatSamples<Buffer>>::as_mut_slice","value":"fn <T> (&mut self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":144620,"byte_end":144652,"line_start":665,"line_end":665,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":144657,"byte_end":144660,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":144665,"byte_end":144757,"line_start":667,"line_end":667,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":144762,"byte_end":144832,"line_start":668,"line_end":668,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":145287,"byte_end":145298,"line_start":678,"line_end":678,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<FlatSamples<Buffer>>::image_slice","value":"fn <T> (&self) -> Option<&[T]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":144951,"byte_end":145013,"line_start":673,"line_end":673,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":145018,"byte_end":145021,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ This may fail when the coordinates in this image are either out-of-bounds of the underlying","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":145026,"byte_end":145121,"line_start":675,"line_end":675,"column_start":5,"column_end":100}},{"value":"/ buffer or can not be represented. Note that the slice may have holes that do not correspond","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":145126,"byte_end":145221,"line_start":676,"line_end":676,"column_start":5,"column_end":100}},{"value":"/ to any sample in the image represented by it.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":145226,"byte_end":145275,"line_start":677,"line_end":677,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":145715,"byte_end":145730,"line_start":693,"line_end":693,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<FlatSamples<Buffer>>::image_mut_slice","value":"fn <T> (&mut self) -> Option<&mut [T]>","parent":null,"children":[],"decl_id":null,"docs":" Mutable portion of the buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Mutable portion of the buffer that holds sample values.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":145644,"byte_end":145703,"line_start":692,"line_end":692,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":146384,"byte_end":146399,"line_start":712,"line_end":712,"column_start":12,"column_end":27},"name":"try_into_buffer","qualname":"<FlatSamples<Buffer>>::try_into_buffer","value":"fn <P> (self) -> Result<ImageBuffer<P, Buffer>, (Error, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Move the data into an image buffer.","sig":null,"attributes":[{"value":"/ Move the data into an image buffer.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":146088,"byte_end":146127,"line_start":707,"line_end":707,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":146132,"byte_end":146135,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ This does **not** convert the sample layout. The buffer needs to be in packed row-major form","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":146140,"byte_end":146236,"line_start":709,"line_end":709,"column_start":5,"column_end":101}},{"value":"/ before calling this function. In case of an error, returns the buffer again so that it does","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":146241,"byte_end":146336,"line_start":710,"line_end":710,"column_start":5,"column_end":100}},{"value":"/ not release any allocation.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":146341,"byte_end":146372,"line_start":711,"line_end":711,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":149235,"byte_end":149245,"line_start":786,"line_end":786,"column_start":12,"column_end":22},"name":"min_length","qualname":"<FlatSamples<Buffer>>::min_length","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147170,"byte_end":147260,"line_start":735,"line_end":735,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147265,"byte_end":147268,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147273,"byte_end":147368,"line_start":737,"line_end":737,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147373,"byte_end":147463,"line_start":738,"line_end":738,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147468,"byte_end":147559,"line_start":739,"line_end":739,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147564,"byte_end":147621,"line_start":740,"line_end":740,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147626,"byte_end":147629,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147634,"byte_end":147651,"line_start":742,"line_end":742,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147656,"byte_end":147659,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147664,"byte_end":147748,"line_start":744,"line_end":744,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147753,"byte_end":147844,"line_start":745,"line_end":745,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147849,"byte_end":147852,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147857,"byte_end":147882,"line_start":747,"line_end":747,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147887,"byte_end":147890,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147895,"byte_end":147949,"line_start":749,"line_end":749,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147954,"byte_end":147978,"line_start":750,"line_end":750,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":147983,"byte_end":148000,"line_start":751,"line_end":751,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148005,"byte_end":148030,"line_start":752,"line_end":752,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148035,"byte_end":148053,"line_start":753,"line_end":753,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148058,"byte_end":148061,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148066,"byte_end":148077,"line_start":755,"line_end":755,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148082,"byte_end":148105,"line_start":756,"line_end":756,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148110,"byte_end":148129,"line_start":757,"line_end":757,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148134,"byte_end":148176,"line_start":758,"line_end":758,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148181,"byte_end":148188,"line_start":759,"line_end":759,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148193,"byte_end":148196,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148201,"byte_end":148293,"line_start":761,"line_end":761,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148298,"byte_end":148388,"line_start":762,"line_end":762,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148393,"byte_end":148396,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148401,"byte_end":148429,"line_start":764,"line_end":764,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148434,"byte_end":148437,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148442,"byte_end":148534,"line_start":766,"line_end":766,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148539,"byte_end":148633,"line_start":767,"line_end":767,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148638,"byte_end":148693,"line_start":768,"line_end":768,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148698,"byte_end":148701,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148706,"byte_end":148730,"line_start":770,"line_end":770,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148735,"byte_end":148752,"line_start":771,"line_end":771,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148757,"byte_end":148782,"line_start":772,"line_end":772,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148787,"byte_end":148805,"line_start":773,"line_end":773,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148810,"byte_end":148813,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148818,"byte_end":148829,"line_start":775,"line_end":775,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148834,"byte_end":148850,"line_start":776,"line_end":776,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148855,"byte_end":148874,"line_start":777,"line_end":777,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148879,"byte_end":148902,"line_start":778,"line_end":778,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148907,"byte_end":148936,"line_start":779,"line_end":779,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148941,"byte_end":148976,"line_start":780,"line_end":780,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148981,"byte_end":148988,"line_start":781,"line_end":781,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":148993,"byte_end":148996,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":149001,"byte_end":149095,"line_start":783,"line_end":783,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":149100,"byte_end":149193,"line_start":784,"line_end":784,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":149198,"byte_end":149223,"line_start":785,"line_end":785,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":149382,"byte_end":149386,"line_start":791,"line_end":791,"column_start":12,"column_end":16},"name":"fits","qualname":"<FlatSamples<Buffer>>::fits","value":"fn (&self, len: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":149316,"byte_end":149370,"line_start":790,"line_end":790,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":149807,"byte_end":149826,"line_start":800,"line_end":800,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<FlatSamples<Buffer>>::has_aliased_samples","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":149457,"byte_end":149506,"line_start":795,"line_end":795,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":149511,"byte_end":149514,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":149519,"byte_end":149612,"line_start":797,"line_end":797,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":149617,"byte_end":149711,"line_start":798,"line_end":798,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":149716,"byte_end":149795,"line_start":799,"line_end":799,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":150407,"byte_end":150416,"line_start":811,"line_end":811,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<FlatSamples<Buffer>>::is_normal","value":"fn (&self, form: NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":149897,"byte_end":149962,"line_start":804,"line_end":804,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":149967,"byte_end":149970,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":149975,"byte_end":150068,"line_start":806,"line_end":806,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":150073,"byte_end":150168,"line_start":807,"line_end":807,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":150173,"byte_end":150265,"line_start":808,"line_end":808,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":150270,"byte_end":150364,"line_start":809,"line_end":809,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":150369,"byte_end":150395,"line_start":810,"line_end":810,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":150841,"byte_end":150850,"line_start":820,"line_end":820,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<FlatSamples<Buffer>>::in_bounds","value":"fn (&self, channel: u8, x: u32, y: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":150499,"byte_end":150560,"line_start":815,"line_end":815,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":150565,"byte_end":150568,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":150573,"byte_end":150662,"line_start":817,"line_end":817,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":150667,"byte_end":150761,"line_start":818,"line_end":818,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":150766,"byte_end":150829,"line_start":819,"line_end":819,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":151100,"byte_end":151105,"line_start":827,"line_end":827,"column_start":12,"column_end":17},"name":"index","qualname":"<FlatSamples<Buffer>>::index","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":150953,"byte_end":150998,"line_start":824,"line_end":824,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":151003,"byte_end":151006,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":151011,"byte_end":151088,"line_start":826,"line_end":826,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":151584,"byte_end":151605,"line_start":836,"line_end":836,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<FlatSamples<Buffer>>::index_ignoring_bounds","value":"fn (&self, channel: usize, x: usize, y: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (x, y, channel).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (x, y, channel).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":151213,"byte_end":151272,"line_start":831,"line_end":831,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":151277,"byte_end":151280,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":151285,"byte_end":151374,"line_start":833,"line_end":833,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":151379,"byte_end":151473,"line_start":834,"line_end":834,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":151478,"byte_end":151572,"line_start":835,"line_end":835,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":152037,"byte_end":152052,"line_start":845,"line_end":845,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<FlatSamples<Buffer>>::in_bounds_index","value":"fn (&self, channel: u8, x: u32, y: u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":151736,"byte_end":151776,"line_start":840,"line_end":840,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":151781,"byte_end":151784,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":151789,"byte_end":151881,"line_start":842,"line_end":842,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":151886,"byte_end":151981,"line_start":843,"line_end":843,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":151986,"byte_end":152025,"line_start":844,"line_end":844,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":152487,"byte_end":152496,"line_start":854,"line_end":854,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<FlatSamples<Buffer>>::shrink_to","value":"fn (&mut self, channels: u8, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":152162,"byte_end":152227,"line_start":849,"line_end":849,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":152232,"byte_end":152235,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":152240,"byte_end":152328,"line_start":851,"line_end":851,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":152333,"byte_end":152428,"line_start":852,"line_end":852,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":152433,"byte_end":152475,"line_start":853,"line_end":853,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":3964},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153315,"byte_end":153319,"line_start":874,"line_end":874,"column_start":12,"column_end":16},"name":"View","qualname":"::flat::View","value":"View {  }","parent":null,"children":[{"krate":0,"index":3967},{"krate":0,"index":3968}],"decl_id":null,"docs":" A flat buffer that can be used as an image view.","sig":null,"attributes":[{"value":"/ A flat buffer that can be used as an image view.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":152613,"byte_end":152665,"line_start":859,"line_end":859,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":152666,"byte_end":152669,"line_start":860,"line_end":860,"column_start":1,"column_end":4}},{"value":"/ This is a nearly trivial wrapper around a buffer but at least sanitizes by checking the buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":152670,"byte_end":152768,"line_start":861,"line_end":861,"column_start":1,"column_end":99}},{"value":"/ length first and constraining the pixel type.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":152769,"byte_end":152818,"line_start":862,"line_end":862,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":152819,"byte_end":152822,"line_start":863,"line_end":863,"column_start":1,"column_end":4}},{"value":"/ Note that this does not eliminate panics as the `AsRef<[T]>` implementation of `Buffer` may be","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":152823,"byte_end":152921,"line_start":864,"line_end":864,"column_start":1,"column_end":99}},{"value":"/ unreliable, i.e. return different buffers at different times. This of course is a non-issue for","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":152922,"byte_end":153021,"line_start":865,"line_end":865,"column_start":1,"column_end":100}},{"value":"/ all common collections where the bounds check once must be enough.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153022,"byte_end":153092,"line_start":866,"line_end":866,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153093,"byte_end":153096,"line_start":867,"line_end":867,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153097,"byte_end":153119,"line_start":868,"line_end":868,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153120,"byte_end":153123,"line_start":869,"line_end":869,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153124,"byte_end":153207,"line_start":870,"line_end":870,"column_start":1,"column_end":84}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153208,"byte_end":153275,"line_start":871,"line_end":871,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153276,"byte_end":153279,"line_start":872,"line_end":872,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3977},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154165,"byte_end":154172,"line_start":897,"line_end":897,"column_start":12,"column_end":19},"name":"ViewMut","qualname":"::flat::ViewMut","value":"ViewMut {  }","parent":null,"children":[{"krate":0,"index":3980},{"krate":0,"index":3981}],"decl_id":null,"docs":" A mutable owning version of a flat buffer.","sig":null,"attributes":[{"value":"/ A mutable owning version of a flat buffer.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153443,"byte_end":153489,"line_start":882,"line_end":882,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153490,"byte_end":153493,"line_start":883,"line_end":883,"column_start":1,"column_end":4}},{"value":"/ While this wraps a buffer similar to `ImageBuffer`, this is mostly intended as a utility. The","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153494,"byte_end":153591,"line_start":884,"line_end":884,"column_start":1,"column_end":98}},{"value":"/ library endorsed normalized representation is still `ImageBuffer`. Also, the implementation of","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153592,"byte_end":153690,"line_start":885,"line_end":885,"column_start":1,"column_end":99}},{"value":"/ `AsMut<[P::Subpixel]>` must always yield the same buffer. Therefore there is no public way to","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153691,"byte_end":153788,"line_start":886,"line_end":886,"column_start":1,"column_end":98}},{"value":"/ construct this with an owning buffer.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153789,"byte_end":153830,"line_start":887,"line_end":887,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153831,"byte_end":153834,"line_start":888,"line_end":888,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153835,"byte_end":153857,"line_start":889,"line_end":889,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153858,"byte_end":153861,"line_start":890,"line_end":890,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153862,"byte_end":153945,"line_start":891,"line_end":891,"column_start":1,"column_end":84}},{"value":"/ * There is no aliasing of samples","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153946,"byte_end":153983,"line_start":892,"line_end":892,"column_start":1,"column_end":38}},{"value":"/ * The samples are packed, i.e. `self.inner.layout.sample_stride == 1`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":153984,"byte_end":154057,"line_start":893,"line_end":893,"column_start":1,"column_end":74}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154058,"byte_end":154125,"line_start":894,"line_end":894,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154126,"byte_end":154129,"line_start":895,"line_end":895,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3991},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154880,"byte_end":154888,"line_start":916,"line_end":916,"column_start":5,"column_end":13},"name":"TooLarge","qualname":"::flat::Error::TooLarge","value":"Error::TooLarge","parent":{"krate":0,"index":3990},"children":[],"decl_id":null,"docs":" The represented image was too large.","sig":null,"attributes":[{"value":"/ The represented image was too large.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154757,"byte_end":154797,"line_start":913,"line_end":913,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154802,"byte_end":154805,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ The optional value denotes a possibly accepted maximal bound.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154810,"byte_end":154875,"line_start":915,"line_end":915,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3993},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155045,"byte_end":155063,"line_start":921,"line_end":921,"column_start":5,"column_end":23},"name":"NormalFormRequired","qualname":"::flat::Error::NormalFormRequired","value":"Error::NormalFormRequired(NormalForm)","parent":{"krate":0,"index":3990},"children":[],"decl_id":null,"docs":" The represented image can not use this representation.","sig":null,"attributes":[{"value":"/ The represented image can not use this representation.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154895,"byte_end":154953,"line_start":918,"line_end":918,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154958,"byte_end":154961,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ Has an additional value of the normalized form that would be accepted.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154966,"byte_end":155040,"line_start":920,"line_end":920,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3996},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155672,"byte_end":155682,"line_start":932,"line_end":932,"column_start":5,"column_end":15},"name":"WrongColor","qualname":"::flat::Error::WrongColor","value":"Error::WrongColor(ColorType)","parent":{"krate":0,"index":3990},"children":[],"decl_id":null,"docs":" The color format did not match the channel count.","sig":null,"attributes":[{"value":"/ The color format did not match the channel count.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155082,"byte_end":155135,"line_start":923,"line_end":923,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155140,"byte_end":155143,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ In some cases you might be able to fix this by lowering the reported pixel count of the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155148,"byte_end":155239,"line_start":925,"line_end":925,"column_start":5,"column_end":96}},{"value":"/ buffer without touching the strides.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155244,"byte_end":155284,"line_start":926,"line_end":926,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155289,"byte_end":155292,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155297,"byte_end":155392,"line_start":928,"line_end":928,"column_start":5,"column_end":100}},{"value":"/ directly memory unsafe although that will likely alias pixels. One scenario is when you","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155397,"byte_end":155488,"line_start":929,"line_end":929,"column_start":5,"column_end":96}},{"value":"/ want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155493,"byte_end":155588,"line_start":930,"line_end":930,"column_start":5,"column_end":100}},{"value":"/ care about the value of the alpha channel even though you need `Rgba`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155593,"byte_end":155667,"line_start":931,"line_end":931,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":3990},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154745,"byte_end":154750,"line_start":912,"line_end":912,"column_start":10,"column_end":15},"name":"Error","qualname":"::flat::Error","value":"Error::{TooLarge, NormalFormRequired, WrongColor}","parent":null,"children":[{"krate":0,"index":3991},{"krate":0,"index":3993},{"krate":0,"index":3996}],"decl_id":null,"docs":" Denotes invalid flat sample buffers when trying to convert to stricter types.","sig":null,"attributes":[{"value":"/ Denotes invalid flat sample buffers when trying to convert to stricter types.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154296,"byte_end":154377,"line_start":905,"line_end":905,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154378,"byte_end":154381,"line_start":906,"line_end":906,"column_start":1,"column_end":4}},{"value":"/ The biggest use case being `ImageBuffer` which expects closely packed","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154382,"byte_end":154455,"line_start":907,"line_end":907,"column_start":1,"column_end":74}},{"value":"/ samples in a row major matrix representation. But this error type may be","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154456,"byte_end":154532,"line_start":908,"line_end":908,"column_start":1,"column_end":77}},{"value":"/ resused for other import functions. A more versatile user may also try to","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154533,"byte_end":154610,"line_start":909,"line_end":909,"column_start":1,"column_end":78}},{"value":"/ correct the underlying representation depending on the error variant.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":154611,"byte_end":154684,"line_start":910,"line_end":910,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4015},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156181,"byte_end":156190,"line_start":945,"line_end":945,"column_start":5,"column_end":14},"name":"Unaliased","qualname":"::flat::NormalForm::Unaliased","value":"NormalForm::Unaliased","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" No pixel aliases another.","sig":null,"attributes":[{"value":"/ No pixel aliases another.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155958,"byte_end":155987,"line_start":941,"line_end":941,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155992,"byte_end":155995,"line_start":942,"line_end":942,"column_start":5,"column_end":8}},{"value":"/ Unaliased also guarantees that all index calculations in the image bounds using","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156000,"byte_end":156083,"line_start":943,"line_end":943,"column_start":5,"column_end":88}},{"value":"/ `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156088,"byte_end":156176,"line_start":944,"line_end":944,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4017},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156420,"byte_end":156431,"line_start":951,"line_end":951,"column_start":5,"column_end":16},"name":"PixelPacked","qualname":"::flat::NormalForm::PixelPacked","value":"NormalForm::PixelPacked","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" At least pixels are packed.","sig":null,"attributes":[{"value":"/ At least pixels are packed.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156197,"byte_end":156228,"line_start":947,"line_end":947,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156233,"byte_end":156236,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ Images of these types can wrap `[T]`-slices into the standard color types. This is a","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156241,"byte_end":156329,"line_start":949,"line_end":949,"column_start":5,"column_end":93}},{"value":"/ precondition for `GenericImage` which requires by-reference access to pixels.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156334,"byte_end":156415,"line_start":950,"line_end":950,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4019},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156715,"byte_end":156726,"line_start":958,"line_end":958,"column_start":5,"column_end":16},"name":"ImagePacked","qualname":"::flat::NormalForm::ImagePacked","value":"NormalForm::ImagePacked","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" All samples are packed.","sig":null,"attributes":[{"value":"/ All samples are packed.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156438,"byte_end":156465,"line_start":953,"line_end":953,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156470,"byte_end":156473,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156478,"byte_end":156571,"line_start":955,"line_end":955,"column_start":5,"column_end":98}},{"value":"/ it is not necessary that the pixel samples themselves are adjacent. An example of this","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156576,"byte_end":156666,"line_start":956,"line_end":956,"column_start":5,"column_end":95}},{"value":"/ behaviour is a planar image layout.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156671,"byte_end":156710,"line_start":957,"line_end":957,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4021},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156936,"byte_end":156950,"line_start":964,"line_end":964,"column_start":5,"column_end":19},"name":"RowMajorPacked","qualname":"::flat::NormalForm::RowMajorPacked","value":"NormalForm::RowMajorPacked","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" The samples are in row-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in row-major form and all samples are packed.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156733,"byte_end":156798,"line_start":960,"line_end":960,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156803,"byte_end":156806,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156811,"byte_end":156904,"line_start":962,"line_end":962,"column_start":5,"column_end":98}},{"value":"/ in row-major form.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156909,"byte_end":156931,"line_start":963,"line_end":963,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4023},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157166,"byte_end":157183,"line_start":970,"line_end":970,"column_start":5,"column_end":22},"name":"ColumnMajorPacked","qualname":"::flat::NormalForm::ColumnMajorPacked","value":"NormalForm::ColumnMajorPacked","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" The samples are in column-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in column-major form and all samples are packed.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":156957,"byte_end":157025,"line_start":966,"line_end":966,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157030,"byte_end":157033,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157038,"byte_end":157131,"line_start":968,"line_end":968,"column_start":5,"column_end":98}},{"value":"/ in column-major form.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157136,"byte_end":157161,"line_start":969,"line_end":969,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":4014},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155941,"byte_end":155951,"line_start":940,"line_end":940,"column_start":10,"column_end":20},"name":"NormalForm","qualname":"::flat::NormalForm","value":"NormalForm::{Unaliased, PixelPacked, ImagePacked, RowMajorPacked, ColumnMajorPacked}","parent":null,"children":[{"krate":0,"index":4015},{"krate":0,"index":4017},{"krate":0,"index":4019},{"krate":0,"index":4021},{"krate":0,"index":4023}],"decl_id":null,"docs":" Different normal forms of buffers.","sig":null,"attributes":[{"value":"/ Different normal forms of buffers.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155698,"byte_end":155736,"line_start":935,"line_end":935,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155737,"byte_end":155740,"line_start":936,"line_end":936,"column_start":1,"column_end":4}},{"value":"/ A normal form is an unaliased buffer with some additional constraints.  The `ÌmageBuffer` uses","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155741,"byte_end":155840,"line_start":937,"line_end":937,"column_start":1,"column_end":99}},{"value":"/ row major form with packed samples.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":155841,"byte_end":155880,"line_start":938,"line_end":938,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157391,"byte_end":157401,"line_start":980,"line_end":980,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<View<Buffer, P>>::into_inner","value":"fn (self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157272,"byte_end":157303,"line_start":977,"line_end":977,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157308,"byte_end":157311,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157316,"byte_end":157379,"line_start":979,"line_end":979,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157884,"byte_end":157888,"line_start":990,"line_end":990,"column_start":12,"column_end":16},"name":"flat","qualname":"<View<Buffer, P>>::flat","value":"fn (&self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner sample descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the inner sample descriptor.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157463,"byte_end":157514,"line_start":984,"line_end":984,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157519,"byte_end":157522,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157527,"byte_end":157616,"line_start":986,"line_end":986,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157621,"byte_end":157714,"line_start":987,"line_end":987,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157719,"byte_end":157806,"line_start":988,"line_end":988,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157811,"byte_end":157872,"line_start":989,"line_end":989,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":158167,"byte_end":158174,"line_start":998,"line_end":998,"column_start":12,"column_end":19},"name":"samples","qualname":"<View<Buffer, P>>::samples","value":"fn (&self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157953,"byte_end":157993,"line_start":994,"line_end":994,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157998,"byte_end":158001,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":158006,"byte_end":158096,"line_start":996,"line_end":996,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":158101,"byte_end":158155,"line_start":997,"line_end":997,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":158493,"byte_end":158503,"line_start":1006,"line_end":1006,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<View<Buffer, P>>::get_sample","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":158234,"byte_end":158296,"line_start":1002,"line_end":1002,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":158301,"byte_end":158304,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":158309,"byte_end":158399,"line_start":1004,"line_end":1004,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":158404,"byte_end":158481,"line_start":1005,"line_end":1005,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":159377,"byte_end":159391,"line_start":1024,"line_end":1024,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<View<Buffer, P>>::get_mut_sample","value":"fn (&mut self, channel: u8, x: u32, y: u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":158835,"byte_end":158905,"line_start":1016,"line_end":1016,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":158910,"byte_end":158913,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`.  This","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":158918,"byte_end":159012,"line_start":1018,"line_end":1018,"column_start":5,"column_end":99}},{"value":"/ method will return `None` when the sample is out-of-bounds. All errors that could occur due","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":159017,"byte_end":159112,"line_start":1019,"line_end":1019,"column_start":5,"column_end":100}},{"value":"/ to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":159117,"byte_end":159184,"line_start":1020,"line_end":1020,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":159189,"byte_end":159192,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":159197,"byte_end":159291,"line_start":1022,"line_end":1022,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":159296,"byte_end":159365,"line_start":1023,"line_end":1023,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":159968,"byte_end":159978,"line_start":1039,"line_end":1039,"column_start":12,"column_end":22},"name":"min_length","qualname":"<View<Buffer, P>>::min_length","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":159786,"byte_end":159876,"line_start":1036,"line_end":1036,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":159881,"byte_end":159884,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":159889,"byte_end":159956,"line_start":1038,"line_end":1038,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":160312,"byte_end":160323,"line_start":1047,"line_end":1047,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<View<Buffer, P>>::image_slice","value":"fn (&self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":160049,"byte_end":160111,"line_start":1043,"line_end":1043,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":160116,"byte_end":160119,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":160124,"byte_end":160215,"line_start":1045,"line_end":1045,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":160220,"byte_end":160300,"line_start":1046,"line_end":1046,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":160780,"byte_end":160795,"line_start":1056,"line_end":1056,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<View<Buffer, P>>::image_mut_slice","value":"fn (&mut self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the mutable portion of the buffer that holds sample values.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":160416,"byte_end":160486,"line_start":1051,"line_end":1051,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":160491,"byte_end":160494,"line_start":1052,"line_end":1052,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`. While","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":160499,"byte_end":160593,"line_start":1053,"line_end":1053,"column_start":5,"column_end":99}},{"value":"/ this can not fail–the validity of all coordinates has been validated during the conversion","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":160598,"byte_end":160694,"line_start":1054,"line_end":1054,"column_start":5,"column_end":99}},{"value":"/ from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":160699,"byte_end":160768,"line_start":1055,"line_end":1055,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161318,"byte_end":161327,"line_start":1068,"line_end":1068,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<View<Buffer, P>>::shrink_to","value":"fn (&mut self, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":160988,"byte_end":161015,"line_start":1063,"line_end":1063,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161020,"byte_end":161023,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161028,"byte_end":161115,"line_start":1065,"line_end":1065,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161120,"byte_end":161213,"line_start":1066,"line_end":1066,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161218,"byte_end":161306,"line_start":1067,"line_end":1067,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":162331,"byte_end":162342,"line_start":1091,"line_end":1091,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<View<Buffer, P>>::try_upgrade","value":"fn (self) -> Result<ViewMut<Buffer, P>, (Error, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this into an image with mutable pixels.","sig":null,"attributes":[{"value":"/ Try to convert this into an image with mutable pixels.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161482,"byte_end":161540,"line_start":1073,"line_end":1073,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161545,"byte_end":161548,"line_start":1074,"line_end":1074,"column_start":5,"column_end":8}},{"value":"/ The resulting image implements `GenericImage` in addition to `GenericImageView`. While this","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161553,"byte_end":161648,"line_start":1075,"line_end":1075,"column_start":5,"column_end":100}},{"value":"/ has mutable samples, it does not enforce that pixel can not alias and that samples are","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161653,"byte_end":161743,"line_start":1076,"line_end":1076,"column_start":5,"column_end":95}},{"value":"/ packed enough for a mutable pixel reference. This is slightly cheaper than the chain","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161748,"byte_end":161836,"line_start":1077,"line_end":1077,"column_start":5,"column_end":93}},{"value":"/ `self.into_inner().as_view_mut()` and keeps the `View` alive on failure.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161841,"byte_end":161917,"line_start":1078,"line_end":1078,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161922,"byte_end":161925,"line_start":1079,"line_end":1079,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161930,"byte_end":161937,"line_start":1080,"line_end":1080,"column_start":5,"column_end":12}},{"value":"/ # use image::RgbImage;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161942,"byte_end":161968,"line_start":1081,"line_end":1081,"column_start":5,"column_end":31}},{"value":"/ # use image::Rgb;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161973,"byte_end":161994,"line_start":1082,"line_end":1082,"column_start":5,"column_end":26}},{"value":"/ let mut buffer = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":161999,"byte_end":162064,"line_start":1083,"line_end":1083,"column_start":5,"column_end":70}},{"value":"/ let view = buffer.as_view_with_mut_samples::<Rgb<u8>>().unwrap();","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":162069,"byte_end":162138,"line_start":1084,"line_end":1084,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":162143,"byte_end":162146,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ // Inspect some pixels, …","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":162151,"byte_end":162182,"line_start":1086,"line_end":1086,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":162187,"byte_end":162190,"line_start":1087,"line_end":1087,"column_start":5,"column_end":8}},{"value":"/ // Doesn't fail because it was originally an `RgbImage`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":162195,"byte_end":162255,"line_start":1088,"line_end":1088,"column_start":5,"column_end":65}},{"value":"/ let view_mut = view.try_upgrade().unwrap();","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":162260,"byte_end":162307,"line_start":1089,"line_end":1089,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":162312,"byte_end":162319,"line_start":1090,"line_end":1090,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":162983,"byte_end":162993,"line_start":1113,"line_end":1113,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ViewMut<Buffer, P>>::into_inner","value":"fn (self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":162864,"byte_end":162895,"line_start":1110,"line_end":1110,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":162900,"byte_end":162903,"line_start":1111,"line_end":1111,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":162908,"byte_end":162971,"line_start":1112,"line_end":1112,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":163477,"byte_end":163481,"line_start":1123,"line_end":1123,"column_start":12,"column_end":16},"name":"flat","qualname":"<ViewMut<Buffer, P>>::flat","value":"fn (&self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the sample buffer descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the sample buffer descriptor.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":163055,"byte_end":163107,"line_start":1117,"line_end":1117,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":163112,"byte_end":163115,"line_start":1118,"line_end":1118,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":163120,"byte_end":163209,"line_start":1119,"line_end":1119,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":163214,"byte_end":163307,"line_start":1120,"line_end":1120,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":163312,"byte_end":163399,"line_start":1121,"line_end":1121,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":163404,"byte_end":163465,"line_start":1122,"line_end":1122,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":163854,"byte_end":163861,"line_start":1132,"line_end":1132,"column_start":12,"column_end":19},"name":"samples","qualname":"<ViewMut<Buffer, P>>::samples","value":"fn (&self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":163546,"byte_end":163586,"line_start":1127,"line_end":1127,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":163591,"byte_end":163594,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":163599,"byte_end":163689,"line_start":1129,"line_end":1129,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties. However, its contents can be accessed","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":163694,"byte_end":163786,"line_start":1130,"line_end":1130,"column_start":5,"column_end":97}},{"value":"/ mutable through a slice with `image_mut_slice`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":163791,"byte_end":163842,"line_start":1131,"line_end":1131,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":164103,"byte_end":164113,"line_start":1139,"line_end":1139,"column_start":12,"column_end":22},"name":"min_length","qualname":"<ViewMut<Buffer, P>>::min_length","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":163921,"byte_end":164011,"line_start":1136,"line_end":1136,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":164016,"byte_end":164019,"line_start":1137,"line_end":1137,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":164024,"byte_end":164091,"line_start":1138,"line_end":1138,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":164424,"byte_end":164434,"line_start":1147,"line_end":1147,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<ViewMut<Buffer, P>>::get_sample","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":164184,"byte_end":164227,"line_start":1143,"line_end":1143,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":164232,"byte_end":164235,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":164240,"byte_end":164330,"line_start":1145,"line_end":1145,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":164335,"byte_end":164412,"line_start":1146,"line_end":1146,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":165059,"byte_end":165073,"line_start":1163,"line_end":1163,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<ViewMut<Buffer, P>>::get_mut_sample","value":"fn (&mut self, channel: u8, x: u32, y: u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected sample.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":164813,"byte_end":164862,"line_start":1159,"line_end":1159,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":164867,"byte_end":164870,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":164875,"byte_end":164965,"line_start":1161,"line_end":1161,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":164970,"byte_end":165047,"line_start":1162,"line_end":1162,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":165684,"byte_end":165695,"line_start":1177,"line_end":1177,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<ViewMut<Buffer, P>>::image_slice","value":"fn (&self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":165421,"byte_end":165483,"line_start":1173,"line_end":1173,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":165488,"byte_end":165491,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":165496,"byte_end":165587,"line_start":1175,"line_end":1175,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":165592,"byte_end":165672,"line_start":1176,"line_end":1176,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":165894,"byte_end":165909,"line_start":1182,"line_end":1182,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<ViewMut<Buffer, P>>::image_mut_slice","value":"fn (&mut self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Return the mutable buffer that holds sample values.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":165827,"byte_end":165882,"line_start":1181,"line_end":1181,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":166377,"byte_end":166386,"line_start":1192,"line_end":1192,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<ViewMut<Buffer, P>>::shrink_to","value":"fn (&mut self, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":166047,"byte_end":166074,"line_start":1187,"line_end":1187,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":166079,"byte_end":166082,"line_start":1188,"line_end":1188,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":166087,"byte_end":166174,"line_start":1189,"line_end":1189,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":166179,"byte_end":166272,"line_start":1190,"line_end":1190,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":166277,"byte_end":166365,"line_start":1191,"line_end":1191,"column_start":5,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":691},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bmp","qualname":"::bmp","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/mod.rs","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":902}],"decl_id":null,"docs":"  Decoding and Encoding of BMP Images","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7339,"byte_end":7362,"line_start":190,"line_end":190,"column_start":1,"column_end":24}},{"value":"!  Decoding and Encoding of BMP Images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/mod.rs","byte_start":178590,"byte_end":178630,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/mod.rs","byte_start":178631,"byte_end":178634,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  A decoder and encoder for BMP (Windows Bitmap) images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/mod.rs","byte_start":178635,"byte_end":178693,"line_start":3,"line_end":3,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/mod.rs","byte_start":178694,"byte_end":178697,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/mod.rs","byte_start":178698,"byte_end":178718,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <https://msdn.microsoft.com/en-us/library/windows/desktop/dd183375%28v=vs.85%29.aspx>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/mod.rs","byte_start":178719,"byte_end":178811,"line_start":6,"line_end":6,"column_start":1,"column_end":93}},{"value":"!  * <https://en.wikipedia.org/wiki/BMP_file_format>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/mod.rs","byte_start":178812,"byte_end":178866,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/mod.rs","byte_start":178867,"byte_end":178870,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":800},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":196916,"byte_end":196926,"line_start":545,"line_end":545,"column_start":12,"column_end":22},"name":"BmpDecoder","qualname":"::bmp::decoder::BmpDecoder","value":"BmpDecoder {  }","parent":null,"children":[{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815}],"decl_id":null,"docs":" A bmp decoder\n","sig":null,"attributes":[{"value":"/ A bmp decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":196887,"byte_end":196904,"line_start":544,"line_end":544,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":199494,"byte_end":199497,"line_start":632,"line_end":632,"column_start":12,"column_end":15},"name":"new","qualname":"<BmpDecoder<R>>::new","value":"fn (reader: R) -> ImageResult<BmpDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":199421,"byte_end":199482,"line_start":631,"line_end":631,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":211295,"byte_end":211322,"line_start":945,"line_end":945,"column_start":12,"column_end":39},"name":"read_metadata_in_ico_format","qualname":"<BmpDecoder<R>>::read_metadata_in_ico_format","value":"fn (&mut self) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":211241,"byte_end":211264,"line_start":943,"line_end":943,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":878},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":231251,"byte_end":231260,"line_start":1419,"line_end":1419,"column_start":12,"column_end":21},"name":"BmpReader","qualname":"::bmp::decoder::BmpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":231194,"byte_end":231239,"line_start":1418,"line_end":1418,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":919},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/encoder.rs","byte_start":233886,"byte_end":233896,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"name":"BMPEncoder","qualname":"::bmp::encoder::BMPEncoder","value":"BMPEncoder {  }","parent":null,"children":[{"krate":0,"index":922}],"decl_id":null,"docs":" The representation of a BMP encoder.\n","sig":null,"attributes":[{"value":"/ The representation of a BMP encoder.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/encoder.rs","byte_start":233834,"byte_end":233874,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/encoder.rs","byte_start":234055,"byte_end":234058,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"new","qualname":"<BMPEncoder>::new","value":"fn (w: &'a mut W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/encoder.rs","byte_start":233984,"byte_end":234043,"line_start":18,"line_end":18,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/encoder.rs","byte_start":234266,"byte_end":234272,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"name":"encode","qualname":"<BMPEncoder>::encode","value":"fn (&mut self, image: &[u8], width: u32, height: u32, c: color::ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```.\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/encoder.rs","byte_start":234127,"byte_end":234160,"line_start":23,"line_end":23,"column_start":5,"column_end":38}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/encoder.rs","byte_start":234165,"byte_end":234217,"line_start":24,"line_end":24,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/encoder.rs","byte_start":234222,"byte_end":234254,"line_start":25,"line_end":25,"column_start":5,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":941},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dds","qualname":"::dds","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":954},{"krate":0,"index":961},{"krate":0,"index":4227},{"krate":0,"index":4260},{"krate":0,"index":4259},{"krate":0,"index":4257},{"krate":0,"index":4254},{"krate":0,"index":4250},{"krate":0,"index":4251},{"krate":0,"index":4247},{"krate":0,"index":4248},{"krate":0,"index":4241},{"krate":0,"index":4239},{"krate":0,"index":964},{"krate":0,"index":966},{"krate":0,"index":968},{"krate":0,"index":4262},{"krate":0,"index":4272},{"krate":0,"index":4274},{"krate":0,"index":4283},{"krate":0,"index":969},{"krate":0,"index":972},{"krate":0,"index":978},{"krate":0,"index":981},{"krate":0,"index":985}],"decl_id":null,"docs":"  Decoding of DDS images","sig":null,"attributes":[{"value":"cfg(feature = \"dds\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7376,"byte_end":7399,"line_start":192,"line_end":192,"column_start":1,"column_end":24}},{"value":"!  Decoding of DDS images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":245229,"byte_end":245256,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":245257,"byte_end":245260,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  DDS (DirectDraw Surface) is a container format for storing DXT (S3TC) compressed images.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":245261,"byte_end":245354,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":245355,"byte_end":245358,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":245359,"byte_end":245379,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide> - Description of the DDS format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":245380,"byte_end":245503,"line_start":6,"line_end":6,"column_start":1,"column_end":124}}]},{"kind":"Struct","id":{"krate":0,"index":978},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":249935,"byte_end":249945,"line_start":155,"line_end":155,"column_start":12,"column_end":22},"name":"DdsDecoder","qualname":"::dds::DdsDecoder","value":"DdsDecoder {  }","parent":null,"children":[{"krate":0,"index":980}],"decl_id":null,"docs":" The representation of a DDS decoder\n","sig":null,"attributes":[{"value":"/ The representation of a DDS decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":249884,"byte_end":249923,"line_start":154,"line_end":154,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":250089,"byte_end":250092,"line_start":161,"line_end":161,"column_start":12,"column_end":15},"name":"new","qualname":"<DdsDecoder<R>>::new","value":"fn (mut r: R) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream `r`\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream `r`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":250020,"byte_end":250077,"line_start":160,"line_end":160,"column_start":5,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":994},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dxt","qualname":"::dxt","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","parent":null,"children":[{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1008},{"krate":0,"index":4285},{"krate":0,"index":4301},{"krate":0,"index":4300},{"krate":0,"index":4298},{"krate":0,"index":4295},{"krate":0,"index":4296},{"krate":0,"index":4292},{"krate":0,"index":4293},{"krate":0,"index":1014},{"krate":0,"index":1018},{"krate":0,"index":1025},{"krate":0,"index":1029},{"krate":0,"index":1038},{"krate":0,"index":1046},{"krate":0,"index":1050},{"krate":0,"index":1054},{"krate":0,"index":1057},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1073},{"krate":0,"index":1075},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1080},{"krate":0,"index":1082},{"krate":0,"index":1084},{"krate":0,"index":1095},{"krate":0,"index":1099},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1107},{"krate":0,"index":1109}],"decl_id":null,"docs":"  Decoding of DXT (S3TC) compression","sig":null,"attributes":[{"value":"cfg(feature = \"dxt\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7413,"byte_end":7436,"line_start":194,"line_end":194,"column_start":1,"column_end":24}},{"value":"!  Decoding of DXT (S3TC) compression","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":251993,"byte_end":252032,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":252033,"byte_end":252036,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  DXT is an image format that supports lossy compression","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":252037,"byte_end":252096,"line_start":3,"line_end":3,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":252097,"byte_end":252100,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":252101,"byte_end":252121,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_compression_s3tc.txt> - Description of the DXT compression OpenGL extensions.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":252122,"byte_end":252274,"line_start":6,"line_end":6,"column_start":1,"column_end":153}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":252275,"byte_end":252278,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"!  Note: this module only implements bare DXT encoding/decoding, it does not parse formats that can contain DXT files like .dds","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":252279,"byte_end":252408,"line_start":8,"line_end":8,"column_start":1,"column_end":130}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4286},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":253029,"byte_end":253033,"line_start":24,"line_end":24,"column_start":5,"column_end":9},"name":"DXT1","qualname":"::dxt::DXTVariant::DXT1","value":"DXTVariant::DXT1","parent":{"krate":0,"index":4285},"children":[],"decl_id":null,"docs":" The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is\n compressed into an 8 byte block of DXT1 data\n","sig":null,"attributes":[{"value":"/ The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":252905,"byte_end":252971,"line_start":22,"line_end":22,"column_start":5,"column_end":71}},{"value":"/ compressed into an 8 byte block of DXT1 data","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":252976,"byte_end":253024,"line_start":23,"line_end":23,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4288},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":253164,"byte_end":253168,"line_start":27,"line_end":27,"column_start":5,"column_end":9},"name":"DXT3","qualname":"::dxt::DXTVariant::DXT3","value":"DXTVariant::DXT3","parent":{"krate":0,"index":4285},"children":[],"decl_id":null,"docs":" The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT3 data\n","sig":null,"attributes":[{"value":"/ The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":253039,"byte_end":253106,"line_start":25,"line_end":25,"column_start":5,"column_end":72}},{"value":"/ compressed into a 16 byte block of DXT3 data","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":253111,"byte_end":253159,"line_start":26,"line_end":26,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4290},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":253299,"byte_end":253303,"line_start":30,"line_end":30,"column_start":5,"column_end":9},"name":"DXT5","qualname":"::dxt::DXTVariant::DXT5","value":"DXTVariant::DXT5","parent":{"krate":0,"index":4285},"children":[],"decl_id":null,"docs":" The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT5 data\n","sig":null,"attributes":[{"value":"/ The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":253174,"byte_end":253241,"line_start":28,"line_end":28,"column_start":5,"column_end":72}},{"value":"/ compressed into a 16 byte block of DXT5 data","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":253246,"byte_end":253294,"line_start":29,"line_end":29,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":4285},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":252888,"byte_end":252898,"line_start":21,"line_end":21,"column_start":10,"column_end":20},"name":"DXTVariant","qualname":"::dxt::DXTVariant","value":"DXTVariant::{DXT1, DXT3, DXT5}","parent":null,"children":[{"krate":0,"index":4286},{"krate":0,"index":4288},{"krate":0,"index":4290}],"decl_id":null,"docs":" What version of DXT compression are we using?\n Note that DXT2 and DXT4 are left away as they're\n just DXT3 and DXT5 with premultiplied alpha\n","sig":null,"attributes":[{"value":"/ What version of DXT compression are we using?","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":252683,"byte_end":252732,"line_start":17,"line_end":17,"column_start":1,"column_end":50}},{"value":"/ Note that DXT2 and DXT4 are left away as they're","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":252733,"byte_end":252785,"line_start":18,"line_end":18,"column_start":1,"column_end":53}},{"value":"/ just DXT3 and DXT5 with premultiplied alpha","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":252786,"byte_end":252833,"line_start":19,"line_end":19,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":253924,"byte_end":253934,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"color_type","qualname":"<DXTVariant>::color_type","value":"fn (self) -> ColorType","parent":null,"children":[],"decl_id":null,"docs":" Returns the color type that is stored in this DXT variant\n","sig":null,"attributes":[{"value":"/ Returns the color type that is stored in this DXT variant","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":253851,"byte_end":253912,"line_start":51,"line_end":51,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1018},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":254141,"byte_end":254151,"line_start":61,"line_end":61,"column_start":12,"column_end":22},"name":"DxtDecoder","qualname":"::dxt::DxtDecoder","value":"DxtDecoder {  }","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024}],"decl_id":null,"docs":" DXT decoder\n","sig":null,"attributes":[{"value":"/ DXT decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":254114,"byte_end":254129,"line_start":60,"line_end":60,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1027},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":254731,"byte_end":254734,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"new","qualname":"<DxtDecoder<R>>::new","value":"fn (r: R, width: u32, height: u32, variant: DXTVariant) -> Result<DxtDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new DXT decoder that decodes from the stream ```r```.\n As DXT is often stored as raw buffers with the width/height\n somewhere else the width and height of the image need\n to be passed in ```width``` and ```height```, as well as the\n DXT variant in ```variant```.\n width and height are required to be powers of 2 and at least 4.\n otherwise an error will be returned\n","sig":null,"attributes":[{"value":"/ Create a new DXT decoder that decodes from the stream ```r```.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":254300,"byte_end":254366,"line_start":70,"line_end":70,"column_start":5,"column_end":71}},{"value":"/ As DXT is often stored as raw buffers with the width/height","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":254371,"byte_end":254434,"line_start":71,"line_end":71,"column_start":5,"column_end":68}},{"value":"/ somewhere else the width and height of the image need","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":254439,"byte_end":254496,"line_start":72,"line_end":72,"column_start":5,"column_end":62}},{"value":"/ to be passed in ```width``` and ```height```, as well as the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":254501,"byte_end":254565,"line_start":73,"line_end":73,"column_start":5,"column_end":69}},{"value":"/ DXT variant in ```variant```.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":254570,"byte_end":254603,"line_start":74,"line_end":74,"column_start":5,"column_end":38}},{"value":"/ width and height are required to be powers of 2 and at least 4.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":254608,"byte_end":254675,"line_start":75,"line_end":75,"column_start":5,"column_end":72}},{"value":"/ otherwise an error will be returned","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":254680,"byte_end":254719,"line_start":76,"line_end":76,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1046},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":257830,"byte_end":257839,"line_start":175,"line_end":175,"column_start":12,"column_end":21},"name":"DXTReader","qualname":"::dxt::DXTReader","value":"DXTReader {  }","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1049}],"decl_id":null,"docs":" DXT reader\n","sig":null,"attributes":[{"value":"/ DXT reader","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":257804,"byte_end":257818,"line_start":174,"line_end":174,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":1054},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":258151,"byte_end":258161,"line_start":187,"line_end":187,"column_start":12,"column_end":22},"name":"DXTEncoder","qualname":"::dxt::DXTEncoder","value":"DXTEncoder {  }","parent":null,"children":[{"krate":0,"index":1056}],"decl_id":null,"docs":" DXT encoder\n","sig":null,"attributes":[{"value":"/ DXT encoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":258124,"byte_end":258139,"line_start":186,"line_end":186,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":258292,"byte_end":258295,"line_start":193,"line_end":193,"column_start":12,"column_end":15},"name":"new","qualname":"<DXTEncoder<W>>::new","value":"fn (w: W) -> DXTEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":258222,"byte_end":258280,"line_start":192,"line_end":192,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":258559,"byte_end":258565,"line_start":201,"line_end":201,"column_start":12,"column_end":18},"name":"encode","qualname":"<DXTEncoder<W>>::encode","value":"fn (mut self, data: &[u8], width: u32, height: u32, variant: DXTVariant) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image data ```data```\n that has dimensions ```width``` and ```height```\n in ```DXTVariant``` ```variant```\n data is assumed to be in variant.color_type()\n","sig":null,"attributes":[{"value":"/ Encodes the image data ```data```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":258357,"byte_end":258394,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":258399,"byte_end":258451,"line_start":198,"line_end":198,"column_start":5,"column_end":57}},{"value":"/ in ```DXTVariant``` ```variant```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":258456,"byte_end":258493,"line_start":199,"line_end":199,"column_start":5,"column_end":42}},{"value":"/ data is assumed to be in variant.color_type()","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":258498,"byte_end":258547,"line_start":200,"line_end":200,"column_start":5,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":1111},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gif","qualname":"::gif","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","parent":null,"children":[{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1124},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1133},{"krate":0,"index":1141},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1150},{"krate":0,"index":1153},{"krate":0,"index":1158},{"krate":0,"index":1162},{"krate":0,"index":1172},{"krate":0,"index":1178},{"krate":0,"index":1181},{"krate":0,"index":1187},{"krate":0,"index":1191},{"krate":0,"index":1195},{"krate":0,"index":1209}],"decl_id":null,"docs":"  Decoding of GIF Images","sig":null,"attributes":[{"value":"cfg(feature = \"gif\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7450,"byte_end":7473,"line_start":196,"line_end":196,"column_start":1,"column_end":24}},{"value":"!  Decoding of GIF Images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280486,"byte_end":280513,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280514,"byte_end":280517,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  GIF (Graphics Interchange Format) is an image format that supports lossless compression.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280518,"byte_end":280611,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280612,"byte_end":280615,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280616,"byte_end":280636,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <http://www.w3.org/Graphics/GIF/spec-gif89a.txt> - The GIF Specification","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280637,"byte_end":280716,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280717,"byte_end":280720,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280721,"byte_end":280735,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"! ```rust,no_run","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280736,"byte_end":280754,"line_start":9,"line_end":9,"column_start":1,"column_end":19}},{"value":"! use image::gif::{GifDecoder, Encoder};","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280755,"byte_end":280797,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"! use image::{ImageDecoder, AnimationDecoder};","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280798,"byte_end":280846,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"! use std::fs::File;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280847,"byte_end":280869,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"! # fn main() -> std::io::Result<()> {","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280870,"byte_end":280910,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"! // Decode a gif into frames","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280911,"byte_end":280942,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"! let file_in = File::open(\"foo.gif\")?;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280943,"byte_end":280984,"line_start":15,"line_end":15,"column_start":1,"column_end":42}},{"value":"! let mut decoder = GifDecoder::new(file_in).unwrap();","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":280985,"byte_end":281041,"line_start":16,"line_end":16,"column_start":1,"column_end":57}},{"value":"! let frames = decoder.into_frames();","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":281042,"byte_end":281081,"line_start":17,"line_end":17,"column_start":1,"column_end":40}},{"value":"! let frames = frames.collect_frames().expect(\"error decoding gif\");","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":281082,"byte_end":281152,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":281153,"byte_end":281156,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! // Encode frames into a gif and save to a file","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":281157,"byte_end":281207,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"! let mut file_out = File::open(\"out.gif\")?;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":281208,"byte_end":281254,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"! let mut encoder = Encoder::new(file_out);","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":281255,"byte_end":281300,"line_start":22,"line_end":22,"column_start":1,"column_end":46}},{"value":"! encoder.encode_frames(frames.into_iter());","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":281301,"byte_end":281347,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"! # Ok(())","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":281348,"byte_end":281360,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"! # }","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":281361,"byte_end":281368,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"! ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":281369,"byte_end":281376,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"allow(clippy :: while_let_loop)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":281377,"byte_end":281410,"line_start":27,"line_end":27,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1147},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":281995,"byte_end":282005,"line_start":47,"line_end":47,"column_start":12,"column_end":22},"name":"GifDecoder","qualname":"::gif::GifDecoder","value":"GifDecoder {  }","parent":null,"children":[{"krate":0,"index":1149}],"decl_id":null,"docs":" GIF decoder\n","sig":null,"attributes":[{"value":"/ GIF decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":281968,"byte_end":281983,"line_start":46,"line_end":46,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":282156,"byte_end":282159,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<GifDecoder<R>>::new","value":"fn (r: R) -> ImageResult<GifDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes the input steam ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes the input steam ```r```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":282082,"byte_end":282144,"line_start":52,"line_end":52,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1153},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":282460,"byte_end":282469,"line_start":64,"line_end":64,"column_start":12,"column_end":21},"name":"GifReader","qualname":"::gif::GifReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":282403,"byte_end":282448,"line_start":63,"line_end":63,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1191},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":291428,"byte_end":291435,"line_start":293,"line_end":293,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::gif::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":1193},{"krate":0,"index":1194}],"decl_id":null,"docs":" GIF encoder.\n","sig":null,"attributes":[{"value":"/ GIF encoder.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":291400,"byte_end":291416,"line_start":292,"line_end":292,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":291585,"byte_end":291588,"line_start":300,"line_end":300,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder<W>>::new","value":"fn (w: W) -> Encoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new GIF encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new GIF encoder.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":291543,"byte_end":291573,"line_start":299,"line_end":299,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":291743,"byte_end":291749,"line_start":308,"line_end":308,"column_start":12,"column_end":18},"name":"encode","qualname":"<Encoder<W>>::encode","value":"fn (&mut self, data: &[u8], width: u32, height: u32, color: ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode a single image.\n","sig":null,"attributes":[{"value":"/ Encode a single image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":291705,"byte_end":291731,"line_start":307,"line_end":307,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1199},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":292463,"byte_end":292475,"line_start":329,"line_end":329,"column_start":12,"column_end":24},"name":"encode_frame","qualname":"<Encoder<W>>::encode_frame","value":"fn (&mut self, img_frame: animation::Frame) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode one frame of animation.\n","sig":null,"attributes":[{"value":"/ Encode one frame of animation.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":292417,"byte_end":292451,"line_start":328,"line_end":328,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":292761,"byte_end":292774,"line_start":336,"line_end":336,"column_start":12,"column_end":25},"name":"encode_frames","qualname":"<Encoder<W>>::encode_frames","value":"fn <F> (&mut self, frames: F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes Frames.\n Consider using `try_encode_frames` instead to encode an `animation::Frames` like iterator.\n","sig":null,"attributes":[{"value":"/ Encodes Frames.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":292631,"byte_end":292650,"line_start":334,"line_end":334,"column_start":5,"column_end":24}},{"value":"/ Consider using `try_encode_frames` instead to encode an `animation::Frames` like iterator.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":292655,"byte_end":292749,"line_start":335,"line_end":335,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":293252,"byte_end":293269,"line_start":349,"line_end":349,"column_start":12,"column_end":29},"name":"try_encode_frames","qualname":"<Encoder<W>>::try_encode_frames","value":"fn <F> (&mut self, frames: F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to encode a collection of `ImageResult<animation::Frame>` objects.\n Use this function to encode an `animation::Frames` like iterator.\n Whenever an `Err` item is encountered, that value is returned without further actions.\n","sig":null,"attributes":[{"value":"/ Try to encode a collection of `ImageResult<animation::Frame>` objects.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":292997,"byte_end":293071,"line_start":346,"line_end":346,"column_start":5,"column_end":79}},{"value":"/ Use this function to encode an `animation::Frames` like iterator.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":293076,"byte_end":293145,"line_start":347,"line_end":347,"column_start":5,"column_end":74}},{"value":"/ Whenever an `Err` item is encountered, that value is returned without further actions.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":293150,"byte_end":293240,"line_start":348,"line_end":348,"column_start":5,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1212},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hdr","qualname":"::hdr","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/mod.rs","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1383},{"krate":0,"index":1434},{"krate":0,"index":1435}],"decl_id":null,"docs":"  Decoding of Radiance HDR Images","sig":null,"attributes":[{"value":"cfg(feature = \"hdr\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7487,"byte_end":7510,"line_start":198,"line_end":198,"column_start":1,"column_end":24}},{"value":"!  Decoding of Radiance HDR Images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/mod.rs","byte_start":295852,"byte_end":295888,"line_start":1,"line_end":1,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/mod.rs","byte_start":295889,"byte_end":295892,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  A decoder for Radiance HDR images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/mod.rs","byte_start":295893,"byte_end":295931,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/mod.rs","byte_start":295932,"byte_end":295935,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/mod.rs","byte_start":295936,"byte_end":295956,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/mod.rs","byte_start":295957,"byte_end":295960,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"!  * <http://radsite.lbl.gov/radiance/refer/filefmts.pdf>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/mod.rs","byte_start":295961,"byte_end":296020,"line_start":7,"line_end":7,"column_start":1,"column_end":60}},{"value":"!  * <http://www.graphics.cornell.edu/~bjw/rgbe/rgbe.c>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/mod.rs","byte_start":296021,"byte_end":296078,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/mod.rs","byte_start":296079,"byte_end":296082,"line_start":9,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4376},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":300641,"byte_end":300651,"line_start":118,"line_end":118,"column_start":12,"column_end":22},"name":"HDRAdapter","qualname":"::hdr::decoder::HDRAdapter","value":"HDRAdapter {  }","parent":null,"children":[{"krate":0,"index":4378},{"krate":0,"index":4379}],"decl_id":null,"docs":" Adapter to conform to ```ImageDecoder``` trait\n","sig":null,"attributes":[{"value":"/ Adapter to conform to ```ImageDecoder``` trait","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":300562,"byte_end":300612,"line_start":116,"line_end":116,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":300824,"byte_end":300827,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"new","qualname":"<HDRAdapter<R>>::new","value":"fn (r: R) -> ImageResult<HDRAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates adapter\n","sig":null,"attributes":[{"value":"/ Creates adapter","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":300793,"byte_end":300812,"line_start":125,"line_end":125,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":301100,"byte_end":301113,"line_start":136,"line_end":136,"column_start":12,"column_end":25},"name":"new_nonstrict","qualname":"<HDRAdapter<R>>::new_nonstrict","value":"fn (r: R) -> ImageResult<HDRAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Allows reading old Radiance HDR images\n","sig":null,"attributes":[{"value":"/ Allows reading old Radiance HDR images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":301046,"byte_end":301088,"line_start":135,"line_end":135,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1265},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":302090,"byte_end":302099,"line_start":165,"line_end":165,"column_start":12,"column_end":21},"name":"HdrReader","qualname":"::hdr::decoder::HdrReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":302033,"byte_end":302078,"line_start":164,"line_end":164,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":1289},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":303543,"byte_end":303552,"line_start":216,"line_end":216,"column_start":11,"column_end":20},"name":"SIGNATURE","qualname":"::hdr::decoder::SIGNATURE","value":"&[u8]","parent":null,"children":[],"decl_id":null,"docs":" Radiance HDR file signature\n","sig":null,"attributes":[{"value":"/ Radiance HDR file signature","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":303501,"byte_end":303532,"line_start":215,"line_end":215,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":4383},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":303670,"byte_end":303680,"line_start":221,"line_end":221,"column_start":12,"column_end":22},"name":"HdrDecoder","qualname":"::hdr::decoder::HdrDecoder","value":"HdrDecoder {  }","parent":null,"children":[{"krate":0,"index":4385},{"krate":0,"index":4386},{"krate":0,"index":4387},{"krate":0,"index":4388}],"decl_id":null,"docs":" An Radiance HDR decoder\n","sig":null,"attributes":[{"value":"/ An Radiance HDR decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":303614,"byte_end":303641,"line_start":219,"line_end":219,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":4392},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":303905,"byte_end":303915,"line_start":231,"line_end":231,"column_start":12,"column_end":22},"name":"RGBE8Pixel","qualname":"::hdr::decoder::RGBE8Pixel","value":"RGBE8Pixel { c, e }","parent":null,"children":[{"krate":0,"index":4393},{"krate":0,"index":4395}],"decl_id":null,"docs":" Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)\n","sig":null,"attributes":[{"value":"/ Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":303755,"byte_end":303828,"line_start":228,"line_end":228,"column_start":1,"column_end":74}},{"value":"repr(C)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":303829,"byte_end":303839,"line_start":229,"line_end":229,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":4393},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":303951,"byte_end":303952,"line_start":233,"line_end":233,"column_start":9,"column_end":10},"name":"c","qualname":"::hdr::decoder::RGBE8Pixel::c","value":"[u8; 3]","parent":{"krate":0,"index":4392},"children":[],"decl_id":null,"docs":" Color components\n","sig":null,"attributes":[{"value":"/ Color components","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":303922,"byte_end":303942,"line_start":232,"line_end":232,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":4395},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":303988,"byte_end":303989,"line_start":235,"line_end":235,"column_start":9,"column_end":10},"name":"e","qualname":"::hdr::decoder::RGBE8Pixel::e","value":"u8","parent":{"krate":0,"index":4392},"children":[],"decl_id":null,"docs":" Exponent\n","sig":null,"attributes":[{"value":"/ Exponent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":303967,"byte_end":303979,"line_start":234,"line_end":234,"column_start":5,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":1291},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":304050,"byte_end":304055,"line_start":239,"line_end":239,"column_start":8,"column_end":13},"name":"rgbe8","qualname":"::hdr::decoder::rgbe8","value":"fn (r: u8, g: u8, b: u8, e: u8) -> RGBE8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Creates ```RGBE8Pixel``` from components\n","sig":null,"attributes":[{"value":"/ Creates ```RGBE8Pixel``` from components","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":303998,"byte_end":304042,"line_start":238,"line_end":238,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1293},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":304244,"byte_end":304250,"line_start":246,"line_end":246,"column_start":12,"column_end":18},"name":"to_hdr","qualname":"<RGBE8Pixel>::to_hdr","value":"fn (self) -> Rgb<f32>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```RGBE8Pixel``` into ```Rgb<f32>``` linearly\n","sig":null,"attributes":[{"value":"/ Converts ```RGBE8Pixel``` into ```Rgb<f32>``` linearly","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":304160,"byte_end":304218,"line_start":244,"line_end":244,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":304223,"byte_end":304232,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":305010,"byte_end":305016,"line_start":268,"line_end":268,"column_start":12,"column_end":18},"name":"to_ldr","qualname":"<RGBE8Pixel>::to_ldr","value":"fn <T> (self) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```RGBE8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2","sig":null,"attributes":[{"value":"/ Converts ```RGBE8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":304745,"byte_end":304819,"line_start":260,"line_end":260,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":304824,"byte_end":304827,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ color_ldr = (color_hdr*scale)<sup>gamma</sup>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":304832,"byte_end":304881,"line_start":262,"line_end":262,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":304886,"byte_end":304889,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":304894,"byte_end":304905,"line_start":264,"line_end":264,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":304910,"byte_end":304913,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ Panics when ```T::max_value()``` cannot be represented as f32.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":304918,"byte_end":304984,"line_start":266,"line_end":266,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":304989,"byte_end":304998,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":305402,"byte_end":305420,"line_start":281,"line_end":281,"column_start":12,"column_end":30},"name":"to_ldr_scale_gamma","qualname":"<RGBE8Pixel>::to_ldr_scale_gamma","value":"fn <T> (self, scale: f32, gamma: f32) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts RGBE8Pixel into Rgb<T> using provided scale and gamma","sig":null,"attributes":[{"value":"/ Converts RGBE8Pixel into Rgb<T> using provided scale and gamma","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":305109,"byte_end":305175,"line_start":272,"line_end":272,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":305180,"byte_end":305183,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ color_ldr = (color_hdr*scale)<sup>gamma</sup>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":305188,"byte_end":305237,"line_start":274,"line_end":274,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":305242,"byte_end":305245,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":305250,"byte_end":305261,"line_start":276,"line_end":276,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":305266,"byte_end":305269,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Panics when T::max_value() cannot be represented as f32.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":305274,"byte_end":305334,"line_start":278,"line_end":278,"column_start":5,"column_end":65}},{"value":"/ Panics when scale or gamma is NaN","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":305339,"byte_end":305376,"line_start":279,"line_end":279,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":305381,"byte_end":305390,"line_start":280,"line_end":280,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":306628,"byte_end":306631,"line_start":312,"line_end":312,"column_start":12,"column_end":15},"name":"new","qualname":"<HdrDecoder<R>>::new","value":"fn (reader: R) -> ImageResult<HdrDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```r```\n if the header is valid, creates HdrDecoder\n strict mode is enabled\n","sig":null,"attributes":[{"value":"/ Reads Radiance HDR image header from stream ```r```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":306479,"byte_end":306534,"line_start":309,"line_end":309,"column_start":5,"column_end":60}},{"value":"/ if the header is valid, creates HdrDecoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":306539,"byte_end":306585,"line_start":310,"line_end":310,"column_start":5,"column_end":51}},{"value":"/ strict mode is enabled","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":306590,"byte_end":306616,"line_start":311,"line_end":311,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":307039,"byte_end":307054,"line_start":323,"line_end":323,"column_start":12,"column_end":27},"name":"with_strictness","qualname":"<HdrDecoder<R>>::with_strictness","value":"fn (mut reader: R, strict: bool) -> ImageResult<HdrDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```reader```,\n if the header is valid, creates ```HdrDecoder```.","sig":null,"attributes":[{"value":"/ Reads Radiance HDR image header from stream ```reader```,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":306736,"byte_end":306797,"line_start":316,"line_end":316,"column_start":5,"column_end":66}},{"value":"/ if the header is valid, creates ```HdrDecoder```.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":306802,"byte_end":306855,"line_start":317,"line_end":317,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":306860,"byte_end":306863,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ strict enables strict mode","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":306868,"byte_end":306898,"line_start":319,"line_end":319,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":306903,"byte_end":306906,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ Warning! Reading wrong file in non-strict mode","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":306911,"byte_end":306961,"line_start":321,"line_end":321,"column_start":5,"column_end":55}},{"value":"/   could consume file size worth of memory in the process.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":306966,"byte_end":307027,"line_start":322,"line_end":322,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1305},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":309607,"byte_end":309615,"line_start":390,"line_end":390,"column_start":12,"column_end":20},"name":"metadata","qualname":"<HdrDecoder<R>>::metadata","value":"fn (&self) -> HDRMetadata","parent":null,"children":[],"decl_id":null,"docs":" Returns file metadata. Refer to ```HDRMetadata``` for details.\n","sig":null,"attributes":[{"value":"/ Returns file metadata. Refer to ```HDRMetadata``` for details.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":309529,"byte_end":309595,"line_start":389,"line_end":389,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":309746,"byte_end":309763,"line_start":395,"line_end":395,"column_start":12,"column_end":29},"name":"read_image_native","qualname":"<HdrDecoder<R>>::read_image_native","value":"fn (mut self) -> ImageResult<Vec<RGBE8Pixel>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of RGBE8 pixels\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of RGBE8 pixels","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":309677,"byte_end":309734,"line_start":394,"line_end":394,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":310396,"byte_end":310416,"line_start":410,"line_end":410,"column_start":12,"column_end":32},"name":"read_image_transform","qualname":"<HdrDecoder<R>>::read_image_transform","value":"fn <T, F> (mut self, f: F, output_slice: &mut [T]) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of transformed pixels\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of transformed pixels","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":310321,"byte_end":310384,"line_start":409,"line_end":409,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":311555,"byte_end":311569,"line_start":446,"line_end":446,"column_start":12,"column_end":26},"name":"read_image_ldr","qualname":"<HdrDecoder<R>>::read_image_ldr","value":"fn (self) -> ImageResult<Vec<Rgb<u8>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<u8> pixels.\n scale = 1, gamma = 2.2\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of Rgb<u8> pixels.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":311452,"byte_end":311512,"line_start":444,"line_end":444,"column_start":5,"column_end":65}},{"value":"/ scale = 1, gamma = 2.2","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":311517,"byte_end":311543,"line_start":445,"line_end":445,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1314},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":311873,"byte_end":311887,"line_start":454,"line_end":454,"column_start":12,"column_end":26},"name":"read_image_hdr","qualname":"<HdrDecoder<R>>::read_image_hdr","value":"fn (self) -> ImageResult<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<f32> pixels.","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of Rgb<f32> pixels.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":311792,"byte_end":311853,"line_start":452,"line_end":452,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":311858,"byte_end":311861,"line_start":453,"line_end":453,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1321},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":312698,"byte_end":312721,"line_start":479,"line_end":479,"column_start":12,"column_end":35},"name":"HDRImageDecoderIterator","qualname":"::hdr::decoder::HDRImageDecoderIterator","value":"HDRImageDecoderIterator {  }","parent":null,"children":[{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329}],"decl_id":null,"docs":" Scanline buffered pixel by pixel iterator\n","sig":null,"attributes":[{"value":"/ Scanline buffered pixel by pixel iterator","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":312641,"byte_end":312686,"line_start":478,"line_end":478,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4412},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":320286,"byte_end":320297,"line_start":701,"line_end":701,"column_start":12,"column_end":23},"name":"HDRMetadata","qualname":"::hdr::decoder::HDRMetadata","value":"HDRMetadata { width, height, orientation, exposure, color_correction, pixel_aspect_ratio, custom_attributes }","parent":null,"children":[{"krate":0,"index":4413},{"krate":0,"index":4414},{"krate":0,"index":4415},{"krate":0,"index":4416},{"krate":0,"index":4417},{"krate":0,"index":4418},{"krate":0,"index":4419}],"decl_id":null,"docs":" Metadata for Radiance HDR image\n","sig":null,"attributes":[{"value":"/ Metadata for Radiance HDR image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":320215,"byte_end":320250,"line_start":699,"line_end":699,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":4413},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":320435,"byte_end":320440,"line_start":704,"line_end":704,"column_start":9,"column_end":14},"name":"width","qualname":"::hdr::decoder::HDRMetadata::width","value":"u32","parent":{"krate":0,"index":4412},"children":[],"decl_id":null,"docs":" Width of decoded image. It could be either scanline length,\n or scanline count, depending on image orientation.\n","sig":null,"attributes":[{"value":"/ Width of decoded image. It could be either scanline length,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":320304,"byte_end":320367,"line_start":702,"line_end":702,"column_start":5,"column_end":68}},{"value":"/ or scanline count, depending on image orientation.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":320372,"byte_end":320426,"line_start":703,"line_end":703,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4414},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":320519,"byte_end":320525,"line_start":706,"line_end":706,"column_start":9,"column_end":15},"name":"height","qualname":"::hdr::decoder::HDRMetadata::height","value":"u32","parent":{"krate":0,"index":4412},"children":[],"decl_id":null,"docs":" Height of decoded image. It depends on orientation too.\n","sig":null,"attributes":[{"value":"/ Height of decoded image. It depends on orientation too.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":320451,"byte_end":320510,"line_start":705,"line_end":705,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":4415},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":320800,"byte_end":320811,"line_start":710,"line_end":710,"column_start":9,"column_end":20},"name":"orientation","qualname":"::hdr::decoder::HDRMetadata::orientation","value":"((i8, i8), (i8, i8))","parent":{"krate":0,"index":4412},"children":[],"decl_id":null,"docs":" Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom.\n First pair tells how resulting pixel coordinates change along a scanline.\n Second pair tells how they change from one scanline to the next.\n","sig":null,"attributes":[{"value":"/ Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":320536,"byte_end":320636,"line_start":707,"line_end":707,"column_start":5,"column_end":105}},{"value":"/ First pair tells how resulting pixel coordinates change along a scanline.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":320641,"byte_end":320718,"line_start":708,"line_end":708,"column_start":5,"column_end":82}},{"value":"/ Second pair tells how they change from one scanline to the next.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":320723,"byte_end":320791,"line_start":709,"line_end":709,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":4416},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":321036,"byte_end":321044,"line_start":715,"line_end":715,"column_start":9,"column_end":17},"name":"exposure","qualname":"::hdr::decoder::HDRMetadata::exposure","value":"std::option::Option<f32>","parent":{"krate":0,"index":4412},"children":[],"decl_id":null,"docs":" Divide color values by exposure to get to get physical radiance in\n watts/steradian/m<sup>2</sup>","sig":null,"attributes":[{"value":"/ Divide color values by exposure to get to get physical radiance in","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":320839,"byte_end":320909,"line_start":711,"line_end":711,"column_start":5,"column_end":75}},{"value":"/ watts/steradian/m<sup>2</sup>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":320914,"byte_end":320947,"line_start":712,"line_end":712,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":320952,"byte_end":320955,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ Image may not contain physical data, even if this field is set.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":320960,"byte_end":321027,"line_start":714,"line_end":714,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":4417},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":321288,"byte_end":321304,"line_start":720,"line_end":720,"column_start":9,"column_end":25},"name":"color_correction","qualname":"::hdr::decoder::HDRMetadata::color_correction","value":"std::option::Option<(f32, f32, f32)>","parent":{"krate":0,"index":4412},"children":[],"decl_id":null,"docs":" Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance\n in watts/steradian/m<sup>2</sup>","sig":null,"attributes":[{"value":"/ Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":321063,"byte_end":321158,"line_start":716,"line_end":716,"column_start":5,"column_end":100}},{"value":"/ in watts/steradian/m<sup>2</sup>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":321163,"byte_end":321199,"line_start":717,"line_end":717,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":321204,"byte_end":321207,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ Image may not contain physical data, even if this field is set.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":321212,"byte_end":321279,"line_start":719,"line_end":719,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":4418},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":321383,"byte_end":321401,"line_start":722,"line_end":722,"column_start":9,"column_end":27},"name":"pixel_aspect_ratio","qualname":"::hdr::decoder::HDRMetadata::pixel_aspect_ratio","value":"std::option::Option<f32>","parent":{"krate":0,"index":4412},"children":[],"decl_id":null,"docs":" Pixel height divided by pixel width\n","sig":null,"attributes":[{"value":"/ Pixel height divided by pixel width","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":321335,"byte_end":321374,"line_start":721,"line_end":721,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":4419},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":321630,"byte_end":321647,"line_start":726,"line_end":726,"column_start":9,"column_end":26},"name":"custom_attributes","qualname":"::hdr::decoder::HDRMetadata::custom_attributes","value":"std::vec::Vec<(std::string::String, std::string::String)>","parent":{"krate":0,"index":4412},"children":[],"decl_id":null,"docs":" All lines contained in image header are put here. Ordering of lines is preserved.\n Lines in the form \"key=value\" are represented as (\"key\", \"value\").\n All other lines are (\"\", \"line\")\n","sig":null,"attributes":[{"value":"/ All lines contained in image header are put here. Ordering of lines is preserved.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":321420,"byte_end":321505,"line_start":723,"line_end":723,"column_start":5,"column_end":90}},{"value":"/ Lines in the form \"key=value\" are represented as (\"key\", \"value\").","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":321510,"byte_end":321580,"line_start":724,"line_end":724,"column_start":5,"column_end":75}},{"value":"/ All other lines are (\"\", \"line\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":321585,"byte_end":321621,"line_start":725,"line_end":725,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1376},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":330739,"byte_end":330752,"line_start":947,"line_end":947,"column_start":8,"column_end":21},"name":"read_raw_file","qualname":"::hdr::decoder::read_raw_file","value":"fn <P> (path: P) -> ::std::io::Result<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Helper function for reading raw 3-channel f32 images\n","sig":null,"attributes":[{"value":"/ Helper function for reading raw 3-channel f32 images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":330675,"byte_end":330731,"line_start":946,"line_end":946,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1394},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":331573,"byte_end":331583,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"HDREncoder","qualname":"::hdr::encoder::HDREncoder","value":"HDREncoder {  }","parent":null,"children":[{"krate":0,"index":1396}],"decl_id":null,"docs":" Radiance HDR encoder\n","sig":null,"attributes":[{"value":"/ Radiance HDR encoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":331537,"byte_end":331561,"line_start":7,"line_end":7,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":331675,"byte_end":331678,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"new","qualname":"<HDREncoder<W>>::new","value":"fn (w: W) -> HDREncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates encoder\n","sig":null,"attributes":[{"value":"/ Creates encoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":331644,"byte_end":331663,"line_start":13,"line_end":13,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":331841,"byte_end":331847,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"name":"encode","qualname":"<HDREncoder<W>>::encode","value":"fn (mut self, data: &[Rgb<f32>], width: usize, height: usize) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```data```\n that has dimensions ```width``` and ```height```\n","sig":null,"attributes":[{"value":"/ Encodes the image ```data```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":331740,"byte_end":331772,"line_start":18,"line_end":18,"column_start":5,"column_end":37}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":331777,"byte_end":331829,"line_start":19,"line_end":19,"column_start":5,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":1432},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":339277,"byte_end":339285,"line_start":228,"line_end":228,"column_start":8,"column_end":16},"name":"to_rgbe8","qualname":"::hdr::encoder::to_rgbe8","value":"fn (pix: Rgb<f32>) -> RGBE8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Converts ```Rgb<f32>``` into ```RGBE8Pixel```\n","sig":null,"attributes":[{"value":"/ Converts ```Rgb<f32>``` into ```RGBE8Pixel```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":339220,"byte_end":339269,"line_start":227,"line_end":227,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":1436},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ico","qualname":"::ico","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/mod.rs","parent":null,"children":[{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1530}],"decl_id":null,"docs":"  Decoding and Encoding of ICO files","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7524,"byte_end":7547,"line_start":200,"line_end":200,"column_start":1,"column_end":24}},{"value":"!  Decoding and Encoding of ICO files","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/mod.rs","byte_start":346662,"byte_end":346701,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/mod.rs","byte_start":346702,"byte_end":346705,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  A decoder and encoder for ICO (Windows Icon) image container files.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/mod.rs","byte_start":346706,"byte_end":346778,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/mod.rs","byte_start":346779,"byte_end":346782,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/mod.rs","byte_start":346783,"byte_end":346803,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <https://msdn.microsoft.com/en-us/library/ms997538.aspx>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/mod.rs","byte_start":346804,"byte_end":346867,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"!  * <https://en.wikipedia.org/wiki/ICO_%28file_format%29>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/mod.rs","byte_start":346868,"byte_end":346928,"line_start":7,"line_end":7,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1480},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":351090,"byte_end":351100,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"IcoDecoder","qualname":"::ico::decoder::IcoDecoder","value":"IcoDecoder {  }","parent":null,"children":[{"krate":0,"index":1482},{"krate":0,"index":1483}],"decl_id":null,"docs":" An ico decoder\n","sig":null,"attributes":[{"value":"/ An ico decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":351060,"byte_end":351078,"line_start":104,"line_end":104,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":351598,"byte_end":351601,"line_start":131,"line_end":131,"column_start":12,"column_end":15},"name":"new","qualname":"<IcoDecoder<R>>::new","value":"fn (mut r: R) -> ImageResult<IcoDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":351525,"byte_end":351586,"line_start":130,"line_end":130,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1513},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":355069,"byte_end":355078,"line_start":248,"line_end":248,"column_start":12,"column_end":21},"name":"IcoReader","qualname":"::ico::decoder::IcoReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":355012,"byte_end":355057,"line_start":247,"line_end":247,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1544},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/encoder.rs","byte_start":360644,"byte_end":360654,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"ICOEncoder","qualname":"::ico::encoder::ICOEncoder","value":"ICOEncoder {  }","parent":null,"children":[{"krate":0,"index":1546}],"decl_id":null,"docs":" ICO encoder\n","sig":null,"attributes":[{"value":"/ ICO encoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/encoder.rs","byte_start":360617,"byte_end":360632,"line_start":17,"line_end":17,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1549},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/encoder.rs","byte_start":360786,"byte_end":360789,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"new","qualname":"<ICOEncoder<W>>::new","value":"fn (w: W) -> ICOEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/encoder.rs","byte_start":360715,"byte_end":360774,"line_start":23,"line_end":23,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1550},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/encoder.rs","byte_start":361087,"byte_end":361093,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"name":"encode","qualname":"<ICOEncoder<W>>::encode","value":"fn (mut self, data: &[u8], width: u32, height: u32, color: ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image``` that has dimensions ```width``` and\n ```height``` and ```ColorType``` ```c```.  The dimensions of the image\n must be between 1 and 256 (inclusive) or an error will be returned.\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image``` that has dimensions ```width``` and","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/encoder.rs","byte_start":360851,"byte_end":360920,"line_start":28,"line_end":28,"column_start":5,"column_end":74}},{"value":"/ ```height``` and ```ColorType``` ```c```.  The dimensions of the image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/encoder.rs","byte_start":360925,"byte_end":360999,"line_start":29,"line_end":29,"column_start":5,"column_end":79}},{"value":"/ must be between 1 and 256 (inclusive) or an error will be returned.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/encoder.rs","byte_start":361004,"byte_end":361075,"line_start":30,"line_end":30,"column_start":5,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":1560},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jpeg","qualname":"::jpeg","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/mod.rs","parent":null,"children":[{"krate":0,"index":1561},{"krate":0,"index":1562},{"krate":0,"index":1566},{"krate":0,"index":1615},{"krate":0,"index":1736},{"krate":0,"index":1739}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7561,"byte_end":7585,"line_start":202,"line_end":202,"column_start":1,"column_end":25}},{"value":"! Decoding and Encoding of JPEG Images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/mod.rs","byte_start":363408,"byte_end":363448,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/mod.rs","byte_start":363449,"byte_end":363452,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! JPEG (Joint Photographic Experts Group) is an image format that supports lossy compression.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/mod.rs","byte_start":363453,"byte_end":363548,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"! This module implements the Baseline JPEG standard.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/mod.rs","byte_start":363549,"byte_end":363603,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/mod.rs","byte_start":363604,"byte_end":363607,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/mod.rs","byte_start":363608,"byte_end":363627,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"! * <http://www.w3.org/Graphics/JPEG/itu-t81.pdf> - The JPEG specification","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/mod.rs","byte_start":363628,"byte_end":363704,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/mod.rs","byte_start":363705,"byte_end":363708,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1584},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":364191,"byte_end":364202,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"JpegDecoder","qualname":"::jpeg::decoder::JpegDecoder","value":"JpegDecoder {  }","parent":null,"children":[{"krate":0,"index":1586},{"krate":0,"index":1587}],"decl_id":null,"docs":" JPEG decoder\n","sig":null,"attributes":[{"value":"/ JPEG decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":364163,"byte_end":364179,"line_start":12,"line_end":12,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":364381,"byte_end":364384,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegDecoder<R>>::new","value":"fn (r: R) -> ImageResult<JpegDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":364308,"byte_end":364369,"line_start":19,"line_end":19,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1591},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":364942,"byte_end":364952,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"JpegReader","qualname":"::jpeg::decoder::JpegReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":364885,"byte_end":364930,"line_start":38,"line_end":38,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4545},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396470,"byte_end":396486,"line_start":279,"line_end":279,"column_start":5,"column_end":21},"name":"PixelAspectRatio","qualname":"::jpeg::encoder::PixelDensityUnit::PixelAspectRatio","value":"PixelDensityUnit::PixelAspectRatio","parent":{"krate":0,"index":4544},"children":[],"decl_id":null,"docs":" Represents the absence of a unit, the values indicate only a\n [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)\n","sig":null,"attributes":[{"value":"/ Represents the absence of a unit, the values indicate only a","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396322,"byte_end":396386,"line_start":277,"line_end":277,"column_start":5,"column_end":69}},{"value":"/ [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396391,"byte_end":396465,"line_start":278,"line_end":278,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4547},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396527,"byte_end":396533,"line_start":282,"line_end":282,"column_start":5,"column_end":11},"name":"Inches","qualname":"::jpeg::encoder::PixelDensityUnit::Inches","value":"PixelDensityUnit::Inches","parent":{"krate":0,"index":4544},"children":[],"decl_id":null,"docs":" Pixels per inch (2.54 cm)\n","sig":null,"attributes":[{"value":"/ Pixels per inch (2.54 cm)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396493,"byte_end":396522,"line_start":281,"line_end":281,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4549},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396570,"byte_end":396581,"line_start":285,"line_end":285,"column_start":5,"column_end":16},"name":"Centimeters","qualname":"::jpeg::encoder::PixelDensityUnit::Centimeters","value":"PixelDensityUnit::Centimeters","parent":{"krate":0,"index":4544},"children":[],"decl_id":null,"docs":" Pixels per centimeter\n","sig":null,"attributes":[{"value":"/ Pixels per centimeter","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396540,"byte_end":396565,"line_start":284,"line_end":284,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":4544},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396299,"byte_end":396315,"line_start":276,"line_end":276,"column_start":10,"column_end":26},"name":"PixelDensityUnit","qualname":"::jpeg::encoder::PixelDensityUnit","value":"PixelDensityUnit::{PixelAspectRatio, Inches, Centimeters}","parent":null,"children":[{"krate":0,"index":4545},{"krate":0,"index":4547},{"krate":0,"index":4549}],"decl_id":null,"docs":" Represents a unit in which the density of an image is measured\n","sig":null,"attributes":[{"value":"/ Represents a unit in which the density of an image is measured","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396178,"byte_end":396244,"line_start":274,"line_end":274,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":4562},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396918,"byte_end":396930,"line_start":298,"line_end":298,"column_start":12,"column_end":24},"name":"PixelDensity","qualname":"::jpeg::encoder::PixelDensity","value":"PixelDensity { density, unit }","parent":null,"children":[{"krate":0,"index":4563},{"krate":0,"index":4564}],"decl_id":null,"docs":" Represents the pixel density of an image","sig":null,"attributes":[{"value":"/ Represents the pixel density of an image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396586,"byte_end":396630,"line_start":288,"line_end":288,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396631,"byte_end":396634,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ For example, a 300 DPI image is represented by:","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396635,"byte_end":396686,"line_start":290,"line_end":290,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396687,"byte_end":396690,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396691,"byte_end":396702,"line_start":292,"line_end":292,"column_start":1,"column_end":12}},{"value":"/ use image::jpeg::*;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396703,"byte_end":396726,"line_start":293,"line_end":293,"column_start":1,"column_end":24}},{"value":"/ let hdpi = PixelDensity::dpi(300);","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396727,"byte_end":396765,"line_start":294,"line_end":294,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(hdpi, PixelDensity {density: (300,300), unit: PixelDensityUnit::Inches})","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396766,"byte_end":396853,"line_start":295,"line_end":295,"column_start":1,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396854,"byte_end":396861,"line_start":296,"line_end":296,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":4563},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396993,"byte_end":397000,"line_start":300,"line_end":300,"column_start":9,"column_end":16},"name":"density","qualname":"::jpeg::encoder::PixelDensity::density","value":"(u16, u16)","parent":{"krate":0,"index":4562},"children":[],"decl_id":null,"docs":" A couple of values for (Xdensity, Ydensity)\n","sig":null,"attributes":[{"value":"/ A couple of values for (Xdensity, Ydensity)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":396937,"byte_end":396984,"line_start":299,"line_end":299,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":4564},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":397072,"byte_end":397076,"line_start":302,"line_end":302,"column_start":9,"column_end":13},"name":"unit","qualname":"::jpeg::encoder::PixelDensity::unit","value":"jpeg::encoder::PixelDensityUnit","parent":{"krate":0,"index":4562},"children":[],"decl_id":null,"docs":" The unit in which the density is measured\n","sig":null,"attributes":[{"value":"/ The unit in which the density is measured","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":397018,"byte_end":397063,"line_start":301,"line_end":301,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1684},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":397282,"byte_end":397285,"line_start":309,"line_end":309,"column_start":12,"column_end":15},"name":"dpi","qualname":"<PixelDensity>::dpi","value":"fn (density: u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates the most common pixel density type:\n the horizontal and the vertical density are equal,\n and measured in pixels per inch.\n","sig":null,"attributes":[{"value":"/ Creates the most common pixel density type:","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":397123,"byte_end":397170,"line_start":306,"line_end":306,"column_start":5,"column_end":52}},{"value":"/ the horizontal and the vertical density are equal,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":397175,"byte_end":397229,"line_start":307,"line_end":307,"column_start":5,"column_end":59}},{"value":"/ and measured in pixels per inch.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":397234,"byte_end":397270,"line_start":308,"line_end":308,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1687},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":397736,"byte_end":397747,"line_start":328,"line_end":328,"column_start":12,"column_end":23},"name":"JPEGEncoder","qualname":"::jpeg::encoder::JPEGEncoder","value":"JPEGEncoder {  }","parent":null,"children":[{"krate":0,"index":1690},{"krate":0,"index":1691},{"krate":0,"index":1692},{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1696},{"krate":0,"index":1697}],"decl_id":null,"docs":" The representation of a JPEG encoder\n","sig":null,"attributes":[{"value":"/ The representation of a JPEG encoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":397684,"byte_end":397724,"line_start":327,"line_end":327,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1701},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":398137,"byte_end":398140,"line_start":344,"line_end":344,"column_start":12,"column_end":15},"name":"new","qualname":"<JPEGEncoder>::new","value":"fn (w: &mut W) -> JPEGEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":398067,"byte_end":398125,"line_start":343,"line_end":343,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1702},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":398433,"byte_end":398449,"line_start":351,"line_end":351,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<JPEGEncoder>::new_with_quality","value":"fn (w: &mut W, quality: u8) -> JPEGEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```, and has\n the quality parameter ```quality``` with a value in the range 1-100\n where 1 is the worst and 100 is the best.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```, and has","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":398228,"byte_end":398295,"line_start":348,"line_end":348,"column_start":5,"column_end":72}},{"value":"/ the quality parameter ```quality``` with a value in the range 1-100","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":398300,"byte_end":398371,"line_start":349,"line_end":349,"column_start":5,"column_end":76}},{"value":"/ where 1 is the worst and 100 is the best.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":398376,"byte_end":398421,"line_start":350,"line_end":350,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":400817,"byte_end":400834,"line_start":423,"line_end":423,"column_start":12,"column_end":29},"name":"set_pixel_density","qualname":"<JPEGEncoder>::set_pixel_density","value":"fn (&mut self, pixel_density: PixelDensity) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the pixel density of the images the encoder will encode.\n If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,\n and no DPI information will be stored in the image.\n","sig":null,"attributes":[{"value":"/ Set the pixel density of the images the encoder will encode.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":400585,"byte_end":400649,"line_start":420,"line_end":420,"column_start":5,"column_end":69}},{"value":"/ If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":400654,"byte_end":400745,"line_start":421,"line_end":421,"column_start":5,"column_end":96}},{"value":"/ and no DPI information will be stored in the image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":400750,"byte_end":400805,"line_start":422,"line_end":422,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1705},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":401136,"byte_end":401142,"line_start":432,"line_end":432,"column_start":12,"column_end":18},"name":"encode","qualname":"<JPEGEncoder>::encode","value":"fn (&mut self, image: &[u8], width: u32, height: u32, c: color::ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```","sig":null,"attributes":[{"value":"/ Encodes the image ```image```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":400932,"byte_end":400965,"line_start":427,"line_end":427,"column_start":5,"column_end":38}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":400970,"byte_end":401022,"line_start":428,"line_end":428,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":401027,"byte_end":401058,"line_start":429,"line_end":429,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":401063,"byte_end":401066,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":401071,"byte_end":401124,"line_start":431,"line_end":431,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":1755},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"png","qualname":"::png","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","parent":null,"children":[{"krate":0,"index":1756},{"krate":0,"index":1757},{"krate":0,"index":1761},{"krate":0,"index":1764},{"krate":0,"index":1774},{"krate":0,"index":1778},{"krate":0,"index":1783},{"krate":0,"index":1786},{"krate":0,"index":1790},{"krate":0,"index":1794},{"krate":0,"index":1798},{"krate":0,"index":1812},{"krate":0,"index":1815},{"krate":0,"index":1821},{"krate":0,"index":1829}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7600,"byte_end":7623,"line_start":204,"line_end":204,"column_start":1,"column_end":24}},{"value":"! Decoding and Encoding of PNG Images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":425661,"byte_end":425700,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":425701,"byte_end":425704,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! PNG (Portable Network Graphics) is an image format that supports lossless compression.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":425705,"byte_end":425795,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":425796,"byte_end":425799,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":425800,"byte_end":425819,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"! * <http://www.w3.org/TR/PNG/> - The PNG Specification","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":425820,"byte_end":425877,"line_start":6,"line_end":6,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":425878,"byte_end":425881,"line_start":7,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1778},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":426417,"byte_end":426426,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"PNGReader","qualname":"::png::PNGReader","value":"PNGReader {  }","parent":null,"children":[{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782}],"decl_id":null,"docs":" PNG Reader","sig":null,"attributes":[{"value":"/ PNG Reader","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":426227,"byte_end":426241,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":426242,"byte_end":426245,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This reader will try to read the png one row at a time,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":426246,"byte_end":426305,"line_start":20,"line_end":20,"column_start":1,"column_end":60}},{"value":"/ however for interlaced png files this is not possible and","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":426306,"byte_end":426367,"line_start":21,"line_end":21,"column_start":1,"column_end":62}},{"value":"/ these are therefore read at once.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":426368,"byte_end":426405,"line_start":22,"line_end":22,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1790},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":428459,"byte_end":428469,"line_start":94,"line_end":94,"column_start":12,"column_end":22},"name":"PngDecoder","qualname":"::png::PngDecoder","value":"PngDecoder {  }","parent":null,"children":[{"krate":0,"index":1792},{"krate":0,"index":1793}],"decl_id":null,"docs":" PNG decoder\n","sig":null,"attributes":[{"value":"/ PNG decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":428432,"byte_end":428447,"line_start":93,"line_end":93,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1796},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":428647,"byte_end":428650,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"new","qualname":"<PngDecoder<R>>::new","value":"fn (r: R) -> ImageResult<PngDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":428573,"byte_end":428635,"line_start":100,"line_end":100,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1812},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":433430,"byte_end":433440,"line_start":207,"line_end":207,"column_start":12,"column_end":22},"name":"PNGEncoder","qualname":"::png::PNGEncoder","value":"PNGEncoder {  }","parent":null,"children":[{"krate":0,"index":1814}],"decl_id":null,"docs":" PNG encoder\n","sig":null,"attributes":[{"value":"/ PNG encoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":433403,"byte_end":433418,"line_start":206,"line_end":206,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1817},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":433571,"byte_end":433574,"line_start":213,"line_end":213,"column_start":12,"column_end":15},"name":"new","qualname":"<PNGEncoder<W>>::new","value":"fn (w: W) -> PNGEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":433501,"byte_end":433559,"line_start":212,"line_end":212,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1818},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":433773,"byte_end":433779,"line_start":220,"line_end":220,"column_start":12,"column_end":18},"name":"encode","qualname":"<PNGEncoder<W>>::encode","value":"fn (self, data: &[u8], width: u32, height: u32, color: ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```data```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```\n","sig":null,"attributes":[{"value":"/ Encodes the image ```data```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":433636,"byte_end":433668,"line_start":217,"line_end":217,"column_start":5,"column_end":37}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":433673,"byte_end":433725,"line_start":218,"line_end":218,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":433730,"byte_end":433761,"line_start":219,"line_end":219,"column_start":5,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":1832},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pnm","qualname":"::pnm","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","parent":null,"children":[{"krate":0,"index":1833},{"krate":0,"index":1834},{"krate":0,"index":1835},{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":1843},{"krate":0,"index":1847},{"krate":0,"index":1867},{"krate":0,"index":2033},{"krate":0,"index":2169}],"decl_id":null,"docs":" Decoding of netpbm image formats (pbm, pgm, ppm and pam).","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7637,"byte_end":7660,"line_start":206,"line_end":206,"column_start":1,"column_end":24}},{"value":"! Decoding of netpbm image formats (pbm, pgm, ppm and pam).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":438638,"byte_end":438699,"line_start":1,"line_end":1,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":438700,"byte_end":438703,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! The formats pbm, pgm and ppm are fully supported. The pam decoder recognizes the tuple types","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":438704,"byte_end":438800,"line_start":3,"line_end":3,"column_start":1,"column_end":97}},{"value":"! `BLACKANDWHITE`, `GRAYSCALE` and `RGB` and explicitely recognizes but rejects their `_ALPHA`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":438801,"byte_end":438897,"line_start":4,"line_end":4,"column_start":1,"column_end":97}},{"value":"! variants for now as alpha color types are unsupported.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/mod.rs","byte_start":438898,"byte_end":438956,"line_start":5,"line_end":5,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1938},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":455379,"byte_end":455389,"line_start":220,"line_end":220,"column_start":12,"column_end":22},"name":"PnmDecoder","qualname":"::pnm::decoder::PnmDecoder","value":"PnmDecoder {  }","parent":null,"children":[{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1942}],"decl_id":null,"docs":" PNM decoder\n","sig":null,"attributes":[{"value":"/ PNM decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":455352,"byte_end":455367,"line_start":219,"line_end":219,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1945},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":455579,"byte_end":455582,"line_start":228,"line_end":228,"column_start":12,"column_end":15},"name":"new","qualname":"<PnmDecoder<R>>::new","value":"fn (read: R) -> ImageResult<PnmDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```read```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```read```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":455503,"byte_end":455567,"line_start":227,"line_end":227,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1946},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":456756,"byte_end":456766,"line_start":252,"line_end":252,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<PnmDecoder<R>>::into_inner","value":"fn (self) -> (R, PNMHeader)","parent":null,"children":[],"decl_id":null,"docs":" Extract the reader and header after an image has been read.\n","sig":null,"attributes":[{"value":"/ Extract the reader and header after an image has been read.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":456681,"byte_end":456744,"line_start":251,"line_end":251,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":1973},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":466243,"byte_end":466252,"line_start":514,"line_end":514,"column_start":12,"column_end":21},"name":"PnmReader","qualname":"::pnm::decoder::PnmReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":466186,"byte_end":466231,"line_start":513,"line_end":513,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1997},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":469844,"byte_end":469851,"line_start":611,"line_end":611,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PnmDecoder<R>>::subtype","value":"fn (&self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Get the pnm subtype, depending on the magic constant contained in the header\n","sig":null,"attributes":[{"value":"/ Get the pnm subtype, depending on the magic constant contained in the header","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":469752,"byte_end":469832,"line_start":610,"line_end":610,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4710},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":492311,"byte_end":492313,"line_start":27,"line_end":27,"column_start":5,"column_end":7},"name":"U8","qualname":"::pnm::encoder::FlatSamples::U8","value":"FlatSamples::U8(&'a [u8])","parent":{"krate":0,"index":4708},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4713},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":492329,"byte_end":492332,"line_start":28,"line_end":28,"column_start":5,"column_end":8},"name":"U16","qualname":"::pnm::encoder::FlatSamples::U16","value":"FlatSamples::U16(&'a [u16])","parent":{"krate":0,"index":4708},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4708},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":492289,"byte_end":492300,"line_start":26,"line_end":26,"column_start":10,"column_end":21},"name":"FlatSamples","qualname":"::pnm::encoder::FlatSamples","value":"FlatSamples::{U8, U16}","parent":null,"children":[{"krate":0,"index":4710},{"krate":0,"index":4713}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2074},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":492413,"byte_end":492423,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"PNMEncoder","qualname":"::pnm::encoder::PNMEncoder","value":"PNMEncoder {  }","parent":null,"children":[{"krate":0,"index":2076},{"krate":0,"index":2077}],"decl_id":null,"docs":" Encodes images to any of the `pnm` image formats.\n","sig":null,"attributes":[{"value":"/ Encodes images to any of the `pnm` image formats.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":492348,"byte_end":492401,"line_start":31,"line_end":31,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":493813,"byte_end":493816,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"new","qualname":"<PNMEncoder<W>>::new","value":"fn (writer: W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new PNMEncoder from the `writer`.","sig":null,"attributes":[{"value":"/ Create new PNMEncoder from the `writer`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":493511,"byte_end":493555,"line_start":82,"line_end":82,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":493560,"byte_end":493563,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ The encoded images will have some `pnm` format. If more control over the image type is","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":493568,"byte_end":493658,"line_start":84,"line_end":84,"column_start":5,"column_end":95}},{"value":"/ required, use either one of `with_subtype` or `with_header`. For more information on the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":493663,"byte_end":493755,"line_start":85,"line_end":85,"column_start":5,"column_end":97}},{"value":"/ behaviour, see `with_dynamic_header`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":493760,"byte_end":493801,"line_start":86,"line_end":86,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2113},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":494366,"byte_end":494378,"line_start":101,"line_end":101,"column_start":12,"column_end":24},"name":"with_subtype","qualname":"<PNMEncoder<W>>::with_subtype","value":"fn (self, subtype: PNMSubtype) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encode a specific pnm subtype image.","sig":null,"attributes":[{"value":"/ Encode a specific pnm subtype image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":493945,"byte_end":493985,"line_start":94,"line_end":94,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":493990,"byte_end":493993,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ The magic number and encoding type will be chosen as provided while the rest of the header","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":493998,"byte_end":494092,"line_start":96,"line_end":96,"column_start":5,"column_end":99}},{"value":"/ data will be generated dynamically. Trying to encode incompatible images (e.g. encoding an","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":494097,"byte_end":494191,"line_start":97,"line_end":97,"column_start":5,"column_end":99}},{"value":"/ RGB image as Graymap) will result in an error.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":494196,"byte_end":494246,"line_start":98,"line_end":98,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":494251,"byte_end":494254,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_header` and `with_dynamic_header`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":494259,"byte_end":494354,"line_start":100,"line_end":100,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":2114},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":495084,"byte_end":495095,"line_start":117,"line_end":117,"column_start":12,"column_end":23},"name":"with_header","qualname":"<PNMEncoder<W>>::with_header","value":"fn (self, header: PNMHeader) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enforce the use of a chosen header.","sig":null,"attributes":[{"value":"/ Enforce the use of a chosen header.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":494545,"byte_end":494584,"line_start":108,"line_end":108,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":494589,"byte_end":494592,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ While this option gives the most control over the actual written data, the encoding process","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":494597,"byte_end":494692,"line_start":110,"line_end":110,"column_start":5,"column_end":100}},{"value":"/ will error in case the header data and image parameters do not agree. It is the users","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":494697,"byte_end":494786,"line_start":111,"line_end":111,"column_start":5,"column_end":94}},{"value":"/ obligation to ensure that the width and height are set accordingly, for example.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":494791,"byte_end":494875,"line_start":112,"line_end":112,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":494880,"byte_end":494883,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ Choose this option if you want a lossless decoding/encoding round trip.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":494888,"byte_end":494963,"line_start":114,"line_end":114,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":494968,"byte_end":494971,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_subtype` and `with_dynamic_header`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":494976,"byte_end":495072,"line_start":116,"line_end":116,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2115},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":495666,"byte_end":495685,"line_start":131,"line_end":131,"column_start":12,"column_end":31},"name":"with_dynamic_header","qualname":"<PNMEncoder<W>>::with_dynamic_header","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create the header dynamically for each image.","sig":null,"attributes":[{"value":"/ Create the header dynamically for each image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":495258,"byte_end":495307,"line_start":124,"line_end":124,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":495312,"byte_end":495315,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ This is the default option upon creation of the encoder. With this, most images should be","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":495320,"byte_end":495413,"line_start":126,"line_end":126,"column_start":5,"column_end":98}},{"value":"/ encodable but the specific format chosen is out of the users control. The pnm subtype is","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":495418,"byte_end":495510,"line_start":127,"line_end":127,"column_start":5,"column_end":97}},{"value":"/ chosen arbitrarily by the library.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":495515,"byte_end":495553,"line_start":128,"line_end":128,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":495558,"byte_end":495561,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_subtype` and `with_header`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":495566,"byte_end":495654,"line_start":130,"line_end":130,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2116},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":496061,"byte_end":496067,"line_start":142,"line_end":142,"column_start":12,"column_end":18},"name":"encode","qualname":"<PNMEncoder<W>>::encode","value":"fn <'s, S> (&mut self, image: S, width: u32, height: u32, color: ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode an image whose samples are represented as `u8`.","sig":null,"attributes":[{"value":"/ Encode an image whose samples are represented as `u8`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":495822,"byte_end":495880,"line_start":138,"line_end":138,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":495885,"byte_end":495888,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Some `pnm` subtypes are incompatible with some color options, a chosen header most","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":495893,"byte_end":495979,"line_start":140,"line_end":140,"column_start":5,"column_end":91}},{"value":"/ certainly with any deviation from the original decoded image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":495984,"byte_end":496049,"line_start":141,"line_end":141,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4722},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515114,"byte_end":515120,"line_start":7,"line_end":7,"column_start":5,"column_end":11},"name":"Binary","qualname":"::pnm::header::SampleEncoding::Binary","value":"SampleEncoding::Binary","parent":{"krate":0,"index":4721},"children":[],"decl_id":null,"docs":" Samples are unsigned binary integers in big endian\n","sig":null,"attributes":[{"value":"/ Samples are unsigned binary integers in big endian","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515055,"byte_end":515109,"line_start":6,"line_end":6,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4724},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515204,"byte_end":515209,"line_start":10,"line_end":10,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::pnm::header::SampleEncoding::Ascii","value":"SampleEncoding::Ascii","parent":{"krate":0,"index":4721},"children":[],"decl_id":null,"docs":" Samples are encoded as decimal ascii strings separated by whitespace\n","sig":null,"attributes":[{"value":"/ Samples are encoded as decimal ascii strings separated by whitespace","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515127,"byte_end":515199,"line_start":9,"line_end":9,"column_start":5,"column_end":77}}]},{"kind":"Enum","id":{"krate":0,"index":4721},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515034,"byte_end":515048,"line_start":5,"line_end":5,"column_start":10,"column_end":24},"name":"SampleEncoding","qualname":"::pnm::header::SampleEncoding","value":"SampleEncoding::{Binary, Ascii}","parent":null,"children":[{"krate":0,"index":4722},{"krate":0,"index":4724}],"decl_id":null,"docs":" The kind of encoding used to store sample values\n","sig":null,"attributes":[{"value":"/ The kind of encoding used to store sample values","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":514927,"byte_end":514979,"line_start":3,"line_end":3,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4738},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515362,"byte_end":515368,"line_start":17,"line_end":17,"column_start":5,"column_end":11},"name":"Bitmap","qualname":"::pnm::header::PNMSubtype::Bitmap","value":"PNMSubtype::Bitmap(SampleEncoding)","parent":{"krate":0,"index":4737},"children":[],"decl_id":null,"docs":" Magic numbers P1 and P4\n","sig":null,"attributes":[{"value":"/ Magic numbers P1 and P4","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515330,"byte_end":515357,"line_start":16,"line_end":16,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4741},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515423,"byte_end":515430,"line_start":20,"line_end":20,"column_start":5,"column_end":12},"name":"Graymap","qualname":"::pnm::header::PNMSubtype::Graymap","value":"PNMSubtype::Graymap(SampleEncoding)","parent":{"krate":0,"index":4737},"children":[],"decl_id":null,"docs":" Magic numbers P2 and P5\n","sig":null,"attributes":[{"value":"/ Magic numbers P2 and P5","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515391,"byte_end":515418,"line_start":19,"line_end":19,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4744},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515485,"byte_end":515491,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Pixmap","qualname":"::pnm::header::PNMSubtype::Pixmap","value":"PNMSubtype::Pixmap(SampleEncoding)","parent":{"krate":0,"index":4737},"children":[],"decl_id":null,"docs":" Magic numbers P3 and P6\n","sig":null,"attributes":[{"value":"/ Magic numbers P3 and P6","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515453,"byte_end":515480,"line_start":22,"line_end":22,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4747},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515538,"byte_end":515550,"line_start":26,"line_end":26,"column_start":5,"column_end":17},"name":"ArbitraryMap","qualname":"::pnm::header::PNMSubtype::ArbitraryMap","value":"PNMSubtype::ArbitraryMap","parent":{"krate":0,"index":4737},"children":[],"decl_id":null,"docs":" Magic number P7\n","sig":null,"attributes":[{"value":"/ Magic number P7","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515514,"byte_end":515533,"line_start":25,"line_end":25,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":4737},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515313,"byte_end":515323,"line_start":15,"line_end":15,"column_start":10,"column_end":20},"name":"PNMSubtype","qualname":"::pnm::header::PNMSubtype","value":"PNMSubtype::{Bitmap, Graymap, Pixmap, ArbitraryMap}","parent":null,"children":[{"krate":0,"index":4738},{"krate":0,"index":4741},{"krate":0,"index":4744},{"krate":0,"index":4747}],"decl_id":null,"docs":" Denotes the category of the magic number\n","sig":null,"attributes":[{"value":"/ Denotes the category of the magic number","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515214,"byte_end":515258,"line_start":13,"line_end":13,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":2173},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515942,"byte_end":515951,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"PNMHeader","qualname":"::pnm::header::PNMHeader","value":"PNMHeader {  }","parent":null,"children":[{"krate":0,"index":2174},{"krate":0,"index":2175}],"decl_id":null,"docs":" Stores the complete header data of a file.","sig":null,"attributes":[{"value":"/ Stores the complete header data of a file.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515555,"byte_end":515601,"line_start":29,"line_end":29,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515602,"byte_end":515605,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Internally, provides mechanisms for lossless reencoding. After reading a file with the decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515606,"byte_end":515704,"line_start":31,"line_end":31,"column_start":1,"column_end":99}},{"value":"/ it is possible to recover the header and construct an encoder. Using the encoder on the just","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515705,"byte_end":515801,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ loaded image should result in a byte copy of the original file (for single image pnms without","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515802,"byte_end":515899,"line_start":33,"line_end":33,"column_start":1,"column_end":98}},{"value":"/ additional trailing data).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":515900,"byte_end":515930,"line_start":34,"line_end":34,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":4761},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516280,"byte_end":516292,"line_start":49,"line_end":49,"column_start":12,"column_end":24},"name":"BitmapHeader","qualname":"::pnm::header::BitmapHeader","value":"BitmapHeader { encoding, height, width }","parent":null,"children":[{"krate":0,"index":4762},{"krate":0,"index":4763},{"krate":0,"index":4764}],"decl_id":null,"docs":" Header produced by a `pbm` file (\"Portable Bit Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pbm` file (\"Portable Bit Map\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516182,"byte_end":516238,"line_start":47,"line_end":47,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":4762},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516340,"byte_end":516348,"line_start":51,"line_end":51,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::BitmapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":4761},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516299,"byte_end":516331,"line_start":50,"line_end":50,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":4763},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516408,"byte_end":516414,"line_start":54,"line_end":54,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::BitmapHeader::height","value":"u32","parent":{"krate":0,"index":4761},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516371,"byte_end":516399,"line_start":53,"line_end":53,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":4764},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516462,"byte_end":516467,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::BitmapHeader::width","value":"u32","parent":{"krate":0,"index":4761},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516426,"byte_end":516453,"line_start":56,"line_end":56,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":4770},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516576,"byte_end":516589,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"GraymapHeader","qualname":"::pnm::header::GraymapHeader","value":"GraymapHeader { encoding, height, width, maxwhite }","parent":null,"children":[{"krate":0,"index":4771},{"krate":0,"index":4772},{"krate":0,"index":4773},{"krate":0,"index":4774}],"decl_id":null,"docs":" Header produced by a `pgm` file (\"Portable Gray Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pgm` file (\"Portable Gray Map\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516477,"byte_end":516534,"line_start":60,"line_end":60,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":4771},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516637,"byte_end":516645,"line_start":64,"line_end":64,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::GraymapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":4770},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516596,"byte_end":516628,"line_start":63,"line_end":63,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":4772},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516705,"byte_end":516711,"line_start":67,"line_end":67,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::GraymapHeader::height","value":"u32","parent":{"krate":0,"index":4770},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516668,"byte_end":516696,"line_start":66,"line_end":66,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":4773},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516759,"byte_end":516764,"line_start":70,"line_end":70,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::GraymapHeader::width","value":"u32","parent":{"krate":0,"index":4770},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516723,"byte_end":516750,"line_start":69,"line_end":69,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":4774},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516826,"byte_end":516834,"line_start":73,"line_end":73,"column_start":9,"column_end":17},"name":"maxwhite","qualname":"::pnm::header::GraymapHeader::maxwhite","value":"u32","parent":{"krate":0,"index":4770},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516776,"byte_end":516817,"line_start":72,"line_end":72,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4780},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516944,"byte_end":516956,"line_start":78,"line_end":78,"column_start":12,"column_end":24},"name":"PixmapHeader","qualname":"::pnm::header::PixmapHeader","value":"PixmapHeader { encoding, height, width, maxval }","parent":null,"children":[{"krate":0,"index":4781},{"krate":0,"index":4782},{"krate":0,"index":4783},{"krate":0,"index":4784}],"decl_id":null,"docs":" Header produced by a `ppm` file (\"Portable Pixel Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `ppm` file (\"Portable Pixel Map\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516844,"byte_end":516902,"line_start":76,"line_end":76,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4781},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517004,"byte_end":517012,"line_start":80,"line_end":80,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::PixmapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":4780},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":516963,"byte_end":516995,"line_start":79,"line_end":79,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":4782},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517072,"byte_end":517078,"line_start":83,"line_end":83,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::PixmapHeader::height","value":"u32","parent":{"krate":0,"index":4780},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517035,"byte_end":517063,"line_start":82,"line_end":82,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":4783},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517126,"byte_end":517131,"line_start":86,"line_end":86,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::PixmapHeader::width","value":"u32","parent":{"krate":0,"index":4780},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517090,"byte_end":517117,"line_start":85,"line_end":85,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":4784},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517193,"byte_end":517199,"line_start":89,"line_end":89,"column_start":9,"column_end":15},"name":"maxval","qualname":"::pnm::header::PixmapHeader::maxval","value":"u32","parent":{"krate":0,"index":4780},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517143,"byte_end":517184,"line_start":88,"line_end":88,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4790},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517307,"byte_end":517322,"line_start":94,"line_end":94,"column_start":12,"column_end":27},"name":"ArbitraryHeader","qualname":"::pnm::header::ArbitraryHeader","value":"ArbitraryHeader { height, width, depth, maxval, tupltype }","parent":null,"children":[{"krate":0,"index":4791},{"krate":0,"index":4792},{"krate":0,"index":4793},{"krate":0,"index":4794},{"krate":0,"index":4795}],"decl_id":null,"docs":" Header produced by a `pam` file (\"Portable Arbitrary Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pam` file (\"Portable Arbitrary Map\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517209,"byte_end":517271,"line_start":92,"line_end":92,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":4791},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517366,"byte_end":517372,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::ArbitraryHeader::height","value":"u32","parent":{"krate":0,"index":4790},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517329,"byte_end":517357,"line_start":95,"line_end":95,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":4792},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517420,"byte_end":517425,"line_start":99,"line_end":99,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::ArbitraryHeader::width","value":"u32","parent":{"krate":0,"index":4790},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517384,"byte_end":517411,"line_start":98,"line_end":98,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":4793},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517474,"byte_end":517479,"line_start":102,"line_end":102,"column_start":9,"column_end":14},"name":"depth","qualname":"::pnm::header::ArbitraryHeader::depth","value":"u32","parent":{"krate":0,"index":4790},"children":[],"decl_id":null,"docs":" Number of color channels\n","sig":null,"attributes":[{"value":"/ Number of color channels","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517437,"byte_end":517465,"line_start":101,"line_end":101,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":4794},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517541,"byte_end":517547,"line_start":105,"line_end":105,"column_start":9,"column_end":15},"name":"maxval","qualname":"::pnm::header::ArbitraryHeader::maxval","value":"u32","parent":{"krate":0,"index":4790},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517491,"byte_end":517532,"line_start":104,"line_end":104,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":4795},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517608,"byte_end":517616,"line_start":108,"line_end":108,"column_start":9,"column_end":17},"name":"tupltype","qualname":"::pnm::header::ArbitraryHeader::tupltype","value":"std::option::Option<pnm::header::ArbitraryTuplType>","parent":{"krate":0,"index":4790},"children":[],"decl_id":null,"docs":" Color interpretation of image pixels\n","sig":null,"attributes":[{"value":"/ Color interpretation of image pixels","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517559,"byte_end":517599,"line_start":107,"line_end":107,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4801},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517819,"byte_end":517832,"line_start":115,"line_end":115,"column_start":5,"column_end":18},"name":"BlackAndWhite","qualname":"::pnm::header::ArbitraryTuplType::BlackAndWhite","value":"ArbitraryTuplType::BlackAndWhite","parent":{"krate":0,"index":4800},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1)\n","sig":null,"attributes":[{"value":"/ Pixels are either black (0) or white (1)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517770,"byte_end":517814,"line_start":114,"line_end":114,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4803},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517915,"byte_end":517933,"line_start":118,"line_end":118,"column_start":5,"column_end":23},"name":"BlackAndWhiteAlpha","qualname":"::pnm::header::ArbitraryTuplType::BlackAndWhiteAlpha","value":"ArbitraryTuplType::BlackAndWhiteAlpha","parent":{"krate":0,"index":4800},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1) and a second alpha channel\n","sig":null,"attributes":[{"value":"/ Pixels are either black (0) or white (1) and a second alpha channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517839,"byte_end":517910,"line_start":117,"line_end":117,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4805},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517985,"byte_end":517994,"line_start":121,"line_end":121,"column_start":5,"column_end":14},"name":"Grayscale","qualname":"::pnm::header::ArbitraryTuplType::Grayscale","value":"ArbitraryTuplType::Grayscale","parent":{"krate":0,"index":4800},"children":[],"decl_id":null,"docs":" Pixels represent the amount of white\n","sig":null,"attributes":[{"value":"/ Pixels represent the amount of white","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517940,"byte_end":517980,"line_start":120,"line_end":120,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4807},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":518052,"byte_end":518066,"line_start":124,"line_end":124,"column_start":5,"column_end":19},"name":"GrayscaleAlpha","qualname":"::pnm::header::ArbitraryTuplType::GrayscaleAlpha","value":"ArbitraryTuplType::GrayscaleAlpha","parent":{"krate":0,"index":4800},"children":[],"decl_id":null,"docs":" Grayscale with an additional alpha channel\n","sig":null,"attributes":[{"value":"/ Grayscale with an additional alpha channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":518001,"byte_end":518047,"line_start":123,"line_end":123,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4809},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":518114,"byte_end":518117,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"RGB","qualname":"::pnm::header::ArbitraryTuplType::RGB","value":"ArbitraryTuplType::RGB","parent":{"krate":0,"index":4800},"children":[],"decl_id":null,"docs":" Three channels: Red, Green, Blue\n","sig":null,"attributes":[{"value":"/ Three channels: Red, Green, Blue","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":518073,"byte_end":518109,"line_start":126,"line_end":126,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4811},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":518171,"byte_end":518179,"line_start":130,"line_end":130,"column_start":5,"column_end":13},"name":"RGBAlpha","qualname":"::pnm::header::ArbitraryTuplType::RGBAlpha","value":"ArbitraryTuplType::RGBAlpha","parent":{"krate":0,"index":4800},"children":[],"decl_id":null,"docs":" Four channels: Red, Green, Blue, Alpha\n","sig":null,"attributes":[{"value":"/ Four channels: Red, Green, Blue, Alpha","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":518124,"byte_end":518166,"line_start":129,"line_end":129,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4813},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":518236,"byte_end":518242,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Custom","qualname":"::pnm::header::ArbitraryTuplType::Custom","value":"ArbitraryTuplType::Custom(String)","parent":{"krate":0,"index":4800},"children":[],"decl_id":null,"docs":" An image format which is not standardized\n","sig":null,"attributes":[{"value":"/ An image format which is not standardized","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":518186,"byte_end":518231,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":4800},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517746,"byte_end":517763,"line_start":113,"line_end":113,"column_start":10,"column_end":27},"name":"ArbitraryTuplType","qualname":"::pnm::header::ArbitraryTuplType","value":"ArbitraryTuplType::{BlackAndWhite, BlackAndWhiteAlpha, Grayscale, GrayscaleAlpha, RGB, RGBAlpha, Custom}","parent":null,"children":[{"krate":0,"index":4801},{"krate":0,"index":4803},{"krate":0,"index":4805},{"krate":0,"index":4807},{"krate":0,"index":4809},{"krate":0,"index":4811},{"krate":0,"index":4813}],"decl_id":null,"docs":" Standardized tuple type specifiers in the header of a `pam`.\n","sig":null,"attributes":[{"value":"/ Standardized tuple type specifiers in the header of a `pam`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":517648,"byte_end":517712,"line_start":111,"line_end":111,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2192},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":518892,"byte_end":518906,"line_start":152,"line_end":152,"column_start":12,"column_end":26},"name":"magic_constant","qualname":"<PNMSubtype>::magic_constant","value":"fn (self) -> &'static [u8; 2]","parent":null,"children":[],"decl_id":null,"docs":" Get the two magic constant bytes corresponding to this format subtype.\n","sig":null,"attributes":[{"value":"/ Get the two magic constant bytes corresponding to this format subtype.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":518806,"byte_end":518880,"line_start":151,"line_end":151,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2194},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":519485,"byte_end":519500,"line_start":165,"line_end":165,"column_start":12,"column_end":27},"name":"sample_encoding","qualname":"<PNMSubtype>::sample_encoding","value":"fn (self) -> SampleEncoding","parent":null,"children":[],"decl_id":null,"docs":" Whether samples are stored as binary or as decimal ascii\n","sig":null,"attributes":[{"value":"/ Whether samples are stored as binary or as decimal ascii","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":519413,"byte_end":519473,"line_start":164,"line_end":164,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2196},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":519863,"byte_end":519870,"line_start":177,"line_end":177,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PNMHeader>::subtype","value":"fn (&self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the format subtype from which the header was created.\n","sig":null,"attributes":[{"value":"/ Retrieve the format subtype from which the header was created.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":519785,"byte_end":519851,"line_start":176,"line_end":176,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2197},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":520385,"byte_end":520390,"line_start":187,"line_end":187,"column_start":12,"column_end":17},"name":"width","qualname":"<PNMHeader>::width","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of the image this header is for.\n","sig":null,"attributes":[{"value":"/ The width of the image this header is for.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":520327,"byte_end":520373,"line_start":186,"line_end":186,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2198},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":520808,"byte_end":520814,"line_start":197,"line_end":197,"column_start":12,"column_end":18},"name":"height","qualname":"<PNMHeader>::height","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of the image this header is for.\n","sig":null,"attributes":[{"value":"/ The height of the image this header is for.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":520749,"byte_end":520796,"line_start":196,"line_end":196,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2199},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":521272,"byte_end":521286,"line_start":207,"line_end":207,"column_start":12,"column_end":26},"name":"maximal_sample","qualname":"<PNMHeader>::maximal_sample","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The biggest value a sample can have. In other words, the colour resolution.\n","sig":null,"attributes":[{"value":"/ The biggest value a sample can have. In other words, the colour resolution.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":521181,"byte_end":521260,"line_start":206,"line_end":206,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2200},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":521704,"byte_end":521713,"line_start":217,"line_end":217,"column_start":12,"column_end":21},"name":"as_bitmap","qualname":"<PNMHeader>::as_bitmap","value":"fn (&self) -> Option<&BitmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying bitmap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying bitmap header if any","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":521644,"byte_end":521692,"line_start":216,"line_end":216,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2201},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":521944,"byte_end":521954,"line_start":225,"line_end":225,"column_start":12,"column_end":22},"name":"as_graymap","qualname":"<PNMHeader>::as_graymap","value":"fn (&self) -> Option<&GraymapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying graymap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying graymap header if any","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":521883,"byte_end":521932,"line_start":224,"line_end":224,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2202},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":522188,"byte_end":522197,"line_start":233,"line_end":233,"column_start":12,"column_end":21},"name":"as_pixmap","qualname":"<PNMHeader>::as_pixmap","value":"fn (&self) -> Option<&PixmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying pixmap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying pixmap header if any","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":522128,"byte_end":522176,"line_start":232,"line_end":232,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2203},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":522430,"byte_end":522442,"line_start":241,"line_end":241,"column_start":12,"column_end":24},"name":"as_arbitrary","qualname":"<PNMHeader>::as_arbitrary","value":"fn (&self) -> Option<&ArbitraryHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying arbitrary header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying arbitrary header if any","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":522367,"byte_end":522418,"line_start":240,"line_end":240,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2204},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":522682,"byte_end":522687,"line_start":249,"line_end":249,"column_start":12,"column_end":17},"name":"write","qualname":"<PNMHeader>::write","value":"fn (&self, writer: &mut dyn io::Write) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write the header back into a binary stream\n","sig":null,"attributes":[{"value":"/ Write the header back into a binary stream","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":522624,"byte_end":522670,"line_start":248,"line_end":248,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":2220},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tga","qualname":"::tga","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/mod.rs","parent":null,"children":[{"krate":0,"index":2221},{"krate":0,"index":2222}],"decl_id":null,"docs":" Decoding of TGA Images","sig":null,"attributes":[{"value":"cfg(feature = \"tga\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7674,"byte_end":7697,"line_start":208,"line_end":208,"column_start":1,"column_end":24}},{"value":"! Decoding of TGA Images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/mod.rs","byte_start":525853,"byte_end":525879,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/mod.rs","byte_start":525880,"byte_end":525883,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/mod.rs","byte_start":525884,"byte_end":525903,"line_start":3,"line_end":3,"column_start":1,"column_end":20}},{"value":"! <http://googlesites.inequation.org/tgautilities>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/mod.rs","byte_start":525904,"byte_end":525956,"line_start":4,"line_end":4,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":2282},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":530629,"byte_end":530639,"line_start":158,"line_end":158,"column_start":12,"column_end":22},"name":"TgaDecoder","qualname":"::tga::decoder::TgaDecoder","value":"TgaDecoder {  }","parent":null,"children":[{"krate":0,"index":2284},{"krate":0,"index":2285},{"krate":0,"index":2286},{"krate":0,"index":2287},{"krate":0,"index":2288},{"krate":0,"index":2289},{"krate":0,"index":2290},{"krate":0,"index":2291},{"krate":0,"index":2292},{"krate":0,"index":2293},{"krate":0,"index":2294}],"decl_id":null,"docs":" The representation of a TGA decoder\n","sig":null,"attributes":[{"value":"/ The representation of a TGA decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":530578,"byte_end":530617,"line_start":157,"line_end":157,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2297},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":531065,"byte_end":531068,"line_start":179,"line_end":179,"column_start":12,"column_end":15},"name":"new","qualname":"<TgaDecoder<R>>::new","value":"fn (r: R) -> ImageResult<TgaDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream `r`\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream `r`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":530996,"byte_end":531053,"line_start":178,"line_end":178,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":2321},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":543526,"byte_end":543535,"line_start":531,"line_end":531,"column_start":12,"column_end":21},"name":"TGAReader","qualname":"::tga::decoder::TGAReader","value":"TGAReader {  }","parent":null,"children":[{"krate":0,"index":2323},{"krate":0,"index":2324}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2329},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tiff","qualname":"::tiff","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","parent":null,"children":[{"krate":0,"index":2330},{"krate":0,"index":2331},{"krate":0,"index":2332},{"krate":0,"index":2338},{"krate":0,"index":2339},{"krate":0,"index":2340},{"krate":0,"index":2343},{"krate":0,"index":2346},{"krate":0,"index":2357},{"krate":0,"index":2361},{"krate":0,"index":2362},{"krate":0,"index":2367},{"krate":0,"index":2370},{"krate":0,"index":2371},{"krate":0,"index":2374},{"krate":0,"index":2379},{"krate":0,"index":2383},{"krate":0,"index":2391},{"krate":0,"index":2394},{"krate":0,"index":2396},{"krate":0,"index":2400}],"decl_id":null,"docs":" Decoding and Encoding of TIFF Images","sig":null,"attributes":[{"value":"cfg(feature = \"tiff\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7711,"byte_end":7735,"line_start":210,"line_end":210,"column_start":1,"column_end":25}},{"value":"! Decoding and Encoding of TIFF Images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":543821,"byte_end":543861,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":543862,"byte_end":543865,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! TIFF (Tagged Image File Format) is a versatile image format that supports","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":543866,"byte_end":543943,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"! lossless and lossy compression.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":543944,"byte_end":543979,"line_start":4,"line_end":4,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":543980,"byte_end":543983,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":543984,"byte_end":544003,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"! * <http://partners.adobe.com/public/developer/tiff/index.html> - The TIFF specification","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":544004,"byte_end":544095,"line_start":7,"line_end":7,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":2362},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":544657,"byte_end":544668,"line_start":27,"line_end":27,"column_start":12,"column_end":23},"name":"TiffDecoder","qualname":"::tiff::TiffDecoder","value":"TiffDecoder {  }","parent":null,"children":[{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":2366}],"decl_id":null,"docs":" Decoder for TIFF images.\n","sig":null,"attributes":[{"value":"/ Decoder for TIFF images.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":544617,"byte_end":544645,"line_start":26,"line_end":26,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2369},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":544890,"byte_end":544893,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<TiffDecoder<R>>::new","value":"fn (r: R) -> Result<TiffDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new TiffDecoder.\n","sig":null,"attributes":[{"value":"/ Create a new TiffDecoder.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":544849,"byte_end":544878,"line_start":38,"line_end":38,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2374},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":548107,"byte_end":548117,"line_start":116,"line_end":116,"column_start":12,"column_end":22},"name":"TiffReader","qualname":"::tiff::TiffReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":548050,"byte_end":548095,"line_start":115,"line_end":115,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2391},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":549760,"byte_end":549771,"line_start":174,"line_end":174,"column_start":12,"column_end":23},"name":"TiffEncoder","qualname":"::tiff::TiffEncoder","value":"TiffEncoder {  }","parent":null,"children":[{"krate":0,"index":2393}],"decl_id":null,"docs":" Encoder for tiff images\n","sig":null,"attributes":[{"value":"/ Encoder for tiff images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":549721,"byte_end":549748,"line_start":173,"line_end":173,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2398},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":550497,"byte_end":550500,"line_start":194,"line_end":194,"column_start":12,"column_end":15},"name":"new","qualname":"<TiffEncoder<W>>::new","value":"fn (w: W) -> TiffEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w`\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to `w`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":550431,"byte_end":550485,"line_start":193,"line_end":193,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2399},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":550732,"byte_end":550738,"line_start":201,"line_end":201,"column_start":12,"column_end":18},"name":"encode","qualname":"<TiffEncoder<W>>::encode","value":"fn (self, data: &[u8], width: u32, height: u32, color: ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.","sig":null,"attributes":[{"value":"/ Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":550564,"byte_end":550655,"line_start":198,"line_end":198,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":550660,"byte_end":550663,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ 16-bit types assume the buffer is native endian.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":550668,"byte_end":550720,"line_start":200,"line_end":200,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":2403},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"webp","qualname":"::webp","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/mod.rs","parent":null,"children":[{"krate":0,"index":2404},{"krate":0,"index":2405},{"krate":0,"index":2476},{"krate":0,"index":2482}],"decl_id":null,"docs":" Decoding of WebP Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"webp\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7750,"byte_end":7774,"line_start":212,"line_end":212,"column_start":1,"column_end":25}},{"value":"! Decoding of WebP Images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/mod.rs","byte_start":552327,"byte_end":552354,"line_start":1,"line_end":1,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":2443},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":554243,"byte_end":554254,"line_start":53,"line_end":53,"column_start":12,"column_end":23},"name":"WebPDecoder","qualname":"::webp::decoder::WebPDecoder","value":"WebPDecoder {  }","parent":null,"children":[{"krate":0,"index":2445},{"krate":0,"index":2446},{"krate":0,"index":2447}],"decl_id":null,"docs":" WebP Image format decoder. Currently only supportes the luma channel (meaning that decoded\n images will be grayscale).\n","sig":null,"attributes":[{"value":"/ WebP Image format decoder. Currently only supportes the luma channel (meaning that decoded","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":554106,"byte_end":554200,"line_start":51,"line_end":51,"column_start":1,"column_end":95}},{"value":"/ images will be grayscale).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":554201,"byte_end":554231,"line_start":52,"line_end":52,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2450},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":554466,"byte_end":554469,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"new","qualname":"<WebPDecoder<R>>::new","value":"fn (r: R) -> ImageResult<WebPDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new WebPDecoder from the Reader ```r```.\n This function takes ownership of the Reader.\n","sig":null,"attributes":[{"value":"/ Create a new WebPDecoder from the Reader ```r```.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":554348,"byte_end":554401,"line_start":60,"line_end":60,"column_start":5,"column_end":58}},{"value":"/ This function takes ownership of the Reader.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":554406,"byte_end":554454,"line_start":61,"line_end":61,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":2459},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":557146,"byte_end":557156,"line_start":149,"line_end":149,"column_start":12,"column_end":22},"name":"WebpReader","qualname":"::webp::decoder::WebpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":557089,"byte_end":557134,"line_start":148,"line_end":148,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2482},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vp8","qualname":"::webp::vp8","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","parent":null,"children":[{"krate":0,"index":2483},{"krate":0,"index":2486},{"krate":0,"index":2487},{"krate":0,"index":2491},{"krate":0,"index":2492},{"krate":0,"index":2493},{"krate":0,"index":2499},{"krate":0,"index":2500},{"krate":0,"index":2501},{"krate":0,"index":2502},{"krate":0,"index":2503},{"krate":0,"index":2504},{"krate":0,"index":2505},{"krate":0,"index":2506},{"krate":0,"index":2507},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2510},{"krate":0,"index":2511},{"krate":0,"index":2512},{"krate":0,"index":2513},{"krate":0,"index":2514},{"krate":0,"index":2515},{"krate":0,"index":2516},{"krate":0,"index":2517},{"krate":0,"index":4851},{"krate":0,"index":4876},{"krate":0,"index":4875},{"krate":0,"index":4873},{"krate":0,"index":4870},{"krate":0,"index":4871},{"krate":0,"index":4867},{"krate":0,"index":4868},{"krate":0,"index":4878},{"krate":0,"index":4900},{"krate":0,"index":4899},{"krate":0,"index":4897},{"krate":0,"index":4894},{"krate":0,"index":4895},{"krate":0,"index":4891},{"krate":0,"index":4892},{"krate":0,"index":4902},{"krate":0,"index":4942},{"krate":0,"index":4941},{"krate":0,"index":4939},{"krate":0,"index":4936},{"krate":0,"index":4937},{"krate":0,"index":4933},{"krate":0,"index":4934},{"krate":0,"index":2518},{"krate":0,"index":2519},{"krate":0,"index":2521},{"krate":0,"index":2523},{"krate":0,"index":2525},{"krate":0,"index":2527},{"krate":0,"index":2531},{"krate":0,"index":2533},{"krate":0,"index":2535},{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2542},{"krate":0,"index":2543},{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":2546},{"krate":0,"index":2547},{"krate":0,"index":2548},{"krate":0,"index":2549},{"krate":0,"index":2550},{"krate":0,"index":2551},{"krate":0,"index":2552},{"krate":0,"index":2553},{"krate":0,"index":2554},{"krate":0,"index":2556},{"krate":0,"index":2559},{"krate":0,"index":2561},{"krate":0,"index":4944},{"krate":0,"index":4946},{"krate":0,"index":2563},{"krate":0,"index":4948},{"krate":0,"index":4971},{"krate":0,"index":4968},{"krate":0,"index":4967},{"krate":0,"index":2565},{"krate":0,"index":2567},{"krate":0,"index":2569},{"krate":0,"index":2570},{"krate":0,"index":2576},{"krate":0,"index":4973},{"krate":0,"index":4986},{"krate":0,"index":4982},{"krate":0,"index":4981},{"krate":0,"index":4988},{"krate":0,"index":5003},{"krate":0,"index":5001},{"krate":0,"index":4999},{"krate":0,"index":5005},{"krate":0,"index":5018},{"krate":0,"index":5017},{"krate":0,"index":5015},{"krate":0,"index":2584},{"krate":0,"index":2607},{"krate":0,"index":2634},{"krate":0,"index":2637},{"krate":0,"index":2639},{"krate":0,"index":2641},{"krate":0,"index":2643},{"krate":0,"index":2645},{"krate":0,"index":2647},{"krate":0,"index":2649},{"krate":0,"index":2652},{"krate":0,"index":2653},{"krate":0,"index":2654},{"krate":0,"index":2656},{"krate":0,"index":2658},{"krate":0,"index":2659},{"krate":0,"index":2660},{"krate":0,"index":2661},{"krate":0,"index":2662},{"krate":0,"index":2663},{"krate":0,"index":2664},{"krate":0,"index":2665},{"krate":0,"index":2666},{"krate":0,"index":2667},{"krate":0,"index":2668},{"krate":0,"index":2669},{"krate":0,"index":2670},{"krate":0,"index":2671},{"krate":0,"index":2672},{"krate":0,"index":2673},{"krate":0,"index":2674}],"decl_id":null,"docs":" An implementation of the VP8 Video Codec","sig":null,"attributes":[{"value":"! An implementation of the VP8 Video Codec","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":560751,"byte_end":560795,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":560796,"byte_end":560799,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This module contains a partial implementation of the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":560800,"byte_end":560856,"line_start":3,"line_end":3,"column_start":1,"column_end":57}},{"value":"! VP8 video format as defined in RFC-6386.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":560857,"byte_end":560901,"line_start":4,"line_end":4,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":560902,"byte_end":560905,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! It decodes Keyframes only sans Loop Filtering.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":560906,"byte_end":560956,"line_start":6,"line_end":6,"column_start":1,"column_end":51}},{"value":"! VP8 is the underpinning of the WebP image format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":560957,"byte_end":561009,"line_start":7,"line_end":7,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":561010,"byte_end":561013,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":561014,"byte_end":561033,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"! * [rfc-6386](http://tools.ietf.org/html/rfc6386) - The VP8 Data Format and Decoding Guide","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":561034,"byte_end":561127,"line_start":10,"line_end":10,"column_start":1,"column_end":94}},{"value":"! * [VP8.pdf](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/37073.pdf) - An overview of","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":561128,"byte_end":561250,"line_start":11,"line_end":11,"column_start":1,"column_end":123}},{"value":"! of the VP8 format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":561251,"byte_end":561272,"line_start":12,"line_end":12,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":561273,"byte_end":561276,"line_start":13,"line_end":13,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4988},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":591482,"byte_end":591487,"line_start":839,"line_end":839,"column_start":12,"column_end":17},"name":"Frame","qualname":"::webp::vp8::Frame","value":"Frame { width, height, ybuf, keyframe, for_display, pixel_type }","parent":null,"children":[{"krate":0,"index":4989},{"krate":0,"index":4990},{"krate":0,"index":4991},{"krate":0,"index":4992},{"krate":0,"index":4993},{"krate":0,"index":4994},{"krate":0,"index":4995},{"krate":0,"index":4996},{"krate":0,"index":4997},{"krate":0,"index":4998}],"decl_id":null,"docs":" A Representation of the last decoded video frame\n","sig":null,"attributes":[{"value":"/ A Representation of the last decoded video frame","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":591385,"byte_end":591437,"line_start":837,"line_end":837,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":4989},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":591534,"byte_end":591539,"line_start":841,"line_end":841,"column_start":9,"column_end":14},"name":"width","qualname":"::webp::vp8::Frame::width","value":"u16","parent":{"krate":0,"index":4988},"children":[],"decl_id":null,"docs":" The width of the luma plane\n","sig":null,"attributes":[{"value":"/ The width of the luma plane","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":591494,"byte_end":591525,"line_start":840,"line_end":840,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":4990},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":591592,"byte_end":591598,"line_start":844,"line_end":844,"column_start":9,"column_end":15},"name":"height","qualname":"::webp::vp8::Frame::height","value":"u16","parent":{"krate":0,"index":4988},"children":[],"decl_id":null,"docs":" The height of the luma plane\n","sig":null,"attributes":[{"value":"/ The height of the luma plane","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":591551,"byte_end":591583,"line_start":843,"line_end":843,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":4991},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":591650,"byte_end":591654,"line_start":847,"line_end":847,"column_start":9,"column_end":13},"name":"ybuf","qualname":"::webp::vp8::Frame::ybuf","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":4988},"children":[],"decl_id":null,"docs":" The luma plane of the frame\n","sig":null,"attributes":[{"value":"/ The luma plane of the frame","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":591610,"byte_end":591641,"line_start":846,"line_end":846,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":4992},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":591725,"byte_end":591733,"line_start":850,"line_end":850,"column_start":9,"column_end":17},"name":"keyframe","qualname":"::webp::vp8::Frame::keyframe","value":"bool","parent":{"krate":0,"index":4988},"children":[],"decl_id":null,"docs":" Indicates whether this frame is a keyframe\n","sig":null,"attributes":[{"value":"/ Indicates whether this frame is a keyframe","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":591670,"byte_end":591716,"line_start":849,"line_end":849,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":4994},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":591829,"byte_end":591840,"line_start":855,"line_end":855,"column_start":9,"column_end":20},"name":"for_display","qualname":"::webp::vp8::Frame::for_display","value":"bool","parent":{"krate":0,"index":4988},"children":[],"decl_id":null,"docs":" Indicates whether this frame is intended for display\n","sig":null,"attributes":[{"value":"/ Indicates whether this frame is intended for display","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":591764,"byte_end":591820,"line_start":854,"line_end":854,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":4995},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":591971,"byte_end":591981,"line_start":860,"line_end":860,"column_start":9,"column_end":19},"name":"pixel_type","qualname":"::webp::vp8::Frame::pixel_type","value":"u8","parent":{"krate":0,"index":4988},"children":[],"decl_id":null,"docs":" The pixel type of the frame as defined by Section 9.2\n of the VP8 Specification\n","sig":null,"attributes":[{"value":"/ The pixel type of the frame as defined by Section 9.2","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":591872,"byte_end":591929,"line_start":858,"line_end":858,"column_start":5,"column_end":62}},{"value":"/ of the VP8 Specification","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":591934,"byte_end":591962,"line_start":859,"line_end":859,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":2584},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":592357,"byte_end":592367,"line_start":888,"line_end":888,"column_start":12,"column_end":22},"name":"Vp8Decoder","qualname":"::webp::vp8::Vp8Decoder","value":"Vp8Decoder {  }","parent":null,"children":[{"krate":0,"index":2586},{"krate":0,"index":2587},{"krate":0,"index":2588},{"krate":0,"index":2589},{"krate":0,"index":2590},{"krate":0,"index":2591},{"krate":0,"index":2592},{"krate":0,"index":2593},{"krate":0,"index":2595},{"krate":0,"index":2597},{"krate":0,"index":2598},{"krate":0,"index":2600},{"krate":0,"index":2601},{"krate":0,"index":2602},{"krate":0,"index":2603},{"krate":0,"index":2604},{"krate":0,"index":2605},{"krate":0,"index":2606}],"decl_id":null,"docs":" VP8 Decoder","sig":null,"attributes":[{"value":"/ VP8 Decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":592299,"byte_end":592314,"line_start":885,"line_end":885,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":592315,"byte_end":592318,"line_start":886,"line_end":886,"column_start":1,"column_end":4}},{"value":"/ Only decodes keyframes","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":592319,"byte_end":592345,"line_start":887,"line_end":887,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2609},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":593031,"byte_end":593034,"line_start":923,"line_end":923,"column_start":12,"column_end":15},"name":"new","qualname":"<Vp8Decoder<R>>::new","value":"fn (r: R) -> Vp8Decoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder.\n The reader must present a raw vp8 bitstream to the decoder\n","sig":null,"attributes":[{"value":"/ Create a new decoder.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":592927,"byte_end":592952,"line_start":921,"line_end":921,"column_start":5,"column_end":30}},{"value":"/ The reader must present a raw vp8 bitstream to the decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":592957,"byte_end":593019,"line_start":922,"line_end":922,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2632},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":613192,"byte_end":613204,"line_start":1543,"line_end":1543,"column_start":12,"column_end":24},"name":"decode_frame","qualname":"<Vp8Decoder<R>>::decode_frame","value":"fn (&mut self) -> ImageResult<&Frame>","parent":null,"children":[],"decl_id":null,"docs":" Decodes the current frame and returns a reference to it\n","sig":null,"attributes":[{"value":"/ Decodes the current frame and returns a reference to it","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":613121,"byte_end":613180,"line_start":1542,"line_end":1542,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":2675},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"farbfeld","qualname":"::farbfeld","value":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","parent":null,"children":[{"krate":0,"index":2676},{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":2686},{"krate":0,"index":2690},{"krate":0,"index":2691},{"krate":0,"index":2698},{"krate":0,"index":2705},{"krate":0,"index":2712},{"krate":0,"index":2721},{"krate":0,"index":2724},{"krate":0,"index":2729},{"krate":0,"index":2732},{"krate":0,"index":2735},{"krate":0,"index":2738},{"krate":0,"index":2741},{"krate":0,"index":2749},{"krate":0,"index":2757},{"krate":0,"index":2760},{"krate":0,"index":2767}],"decl_id":null,"docs":" Decoding of farbfeld images","sig":null,"attributes":[{"value":"cfg(feature = \"farbfeld\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7789,"byte_end":7817,"line_start":214,"line_end":214,"column_start":1,"column_end":29}},{"value":"! Decoding of farbfeld images","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":637981,"byte_end":638012,"line_start":1,"line_end":1,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638013,"byte_end":638016,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! farbfeld is a lossless image format which is easy to parse, pipe and compress.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638017,"byte_end":638099,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638100,"byte_end":638103,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! It has the following format:","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638104,"byte_end":638136,"line_start":5,"line_end":5,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638137,"byte_end":638140,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! | Bytes  | Description                                             |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638141,"byte_end":638213,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"! |--------|---------------------------------------------------------|","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638214,"byte_end":638286,"line_start":8,"line_end":8,"column_start":1,"column_end":73}},{"value":"! | 8      | \"farbfeld\" magic value                                  |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638287,"byte_end":638359,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"! | 4      | 32-Bit BE unsigned integer (width)                      |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638360,"byte_end":638432,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"! | 4      | 32-Bit BE unsigned integer (height)                     |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638433,"byte_end":638505,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"! | [2222] | 4⋅16-Bit BE unsigned integers [RGBA] / pixel, row-major |","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638506,"byte_end":638580,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638581,"byte_end":638584,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! The RGB-data should be sRGB for best interoperability and not alpha-premultiplied.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638585,"byte_end":638671,"line_start":14,"line_end":14,"column_start":1,"column_end":87}},{"value":"!","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638672,"byte_end":638675,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638676,"byte_end":638695,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"! * <https://tools.suckless.org/farbfeld/> - the farbfeld specification","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":638696,"byte_end":638769,"line_start":17,"line_end":17,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2705},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":639209,"byte_end":639223,"line_start":30,"line_end":30,"column_start":12,"column_end":26},"name":"FarbfeldReader","qualname":"::farbfeld::FarbfeldReader","value":"FarbfeldReader {  }","parent":null,"children":[{"krate":0,"index":2707},{"krate":0,"index":2708},{"krate":0,"index":2709},{"krate":0,"index":2710},{"krate":0,"index":2711}],"decl_id":null,"docs":" farbfeld Reader\n","sig":null,"attributes":[{"value":"/ farbfeld Reader","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":639178,"byte_end":639197,"line_start":29,"line_end":29,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2735},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":643931,"byte_end":643946,"line_start":163,"line_end":163,"column_start":12,"column_end":27},"name":"FarbfeldDecoder","qualname":"::farbfeld::FarbfeldDecoder","value":"FarbfeldDecoder {  }","parent":null,"children":[{"krate":0,"index":2737}],"decl_id":null,"docs":" farbfeld decoder\n","sig":null,"attributes":[{"value":"/ farbfeld decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":643899,"byte_end":643919,"line_start":162,"line_end":162,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2740},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":644105,"byte_end":644108,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"new","qualname":"<FarbfeldDecoder<R>>::new","value":"fn (r: R) -> ImageResult<FarbfeldDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":644031,"byte_end":644093,"line_start":168,"line_end":168,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2757},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":645451,"byte_end":645466,"line_start":216,"line_end":216,"column_start":12,"column_end":27},"name":"FarbfeldEncoder","qualname":"::farbfeld::FarbfeldEncoder","value":"FarbfeldEncoder {  }","parent":null,"children":[{"krate":0,"index":2759}],"decl_id":null,"docs":" farbfeld encoder\n","sig":null,"attributes":[{"value":"/ farbfeld encoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":645419,"byte_end":645439,"line_start":215,"line_end":215,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2762},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":645613,"byte_end":645616,"line_start":222,"line_end":222,"column_start":12,"column_end":15},"name":"new","qualname":"<FarbfeldEncoder<W>>::new","value":"fn (w: W) -> FarbfeldEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":645543,"byte_end":645601,"line_start":221,"line_end":221,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2763},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":645824,"byte_end":645830,"line_start":228,"line_end":228,"column_start":12,"column_end":18},"name":"encode","qualname":"<FarbfeldEncoder<W>>::encode","value":"fn (self, data: &[u8], width: u32, height: u32) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```data``` (native endian)\n that has dimensions ```width``` and ```height```\n","sig":null,"attributes":[{"value":"/ Encodes the image ```data``` (native endian)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":645707,"byte_end":645755,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":645760,"byte_end":645812,"line_start":227,"line_end":227,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":2776},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":650420,"byte_end":650426,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":2778}],"decl_id":null,"docs":" An implementation dependent iterator, reading the frames as requested\n","sig":null,"attributes":[{"value":"/ An implementation dependent iterator, reading the frames as requested","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":650335,"byte_end":650408,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2781},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":650606,"byte_end":650609,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"fn (iterator: Box<dyn Iterator<Item = ImageResult<Frame>> + 'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Frames` from an implementation specific iterator.\n","sig":null,"attributes":[{"value":"/ Creates a new `Frames` from an implementation specific iterator.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":650526,"byte_end":650594,"line_start":15,"line_end":15,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2782},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":651001,"byte_end":651015,"line_start":25,"line_end":25,"column_start":12,"column_end":26},"name":"collect_frames","qualname":"<Frames>::collect_frames","value":"fn (self) -> ImageResult<Vec<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Steps through the iterator from the current frame until the end and pushes each frame into\n a `Vec`.\n If en error is encountered that error is returned instead.","sig":null,"attributes":[{"value":"/ Steps through the iterator from the current frame until the end and pushes each frame into","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":650720,"byte_end":650814,"line_start":20,"line_end":20,"column_start":5,"column_end":99}},{"value":"/ a `Vec`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":650819,"byte_end":650831,"line_start":21,"line_end":21,"column_start":5,"column_end":17}},{"value":"/ If en error is encountered that error is returned instead.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":650836,"byte_end":650898,"line_start":22,"line_end":22,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":650903,"byte_end":650906,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":650911,"byte_end":650989,"line_start":24,"line_end":24,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":5020},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":651304,"byte_end":651309,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":5021},{"krate":0,"index":5022},{"krate":0,"index":5023},{"krate":0,"index":5024}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[{"value":"/ A single animation frame","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":651247,"byte_end":651275,"line_start":37,"line_end":37,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":5027},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":651591,"byte_end":651596,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Delay","qualname":"::animation::Delay","value":"Delay {  }","parent":null,"children":[{"krate":0,"index":5028}],"decl_id":null,"docs":" The delay of a frame relative to the previous one.\n","sig":null,"attributes":[{"value":"/ The delay of a frame relative to the previous one.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":651468,"byte_end":651522,"line_start":49,"line_end":49,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2788},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":651698,"byte_end":651701,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"fn (buffer: RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame without any delay.\n","sig":null,"attributes":[{"value":"/ Contructs a new frame without any delay.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":651642,"byte_end":651686,"line_start":56,"line_end":56,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2789},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":651929,"byte_end":651939,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"fn (buffer: RgbaImage, left: u32, top: u32, delay: Delay) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[{"value":"/ Contructs a new frame","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":651892,"byte_end":651917,"line_start":66,"line_end":66,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2790},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652151,"byte_end":652156,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"fn (&self) -> Delay","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[{"value":"/ Delay of this frame","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652116,"byte_end":652139,"line_start":76,"line_end":76,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2791},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652245,"byte_end":652251,"line_start":82,"line_end":82,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"fn (&self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652205,"byte_end":652233,"line_start":81,"line_end":81,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2792},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652347,"byte_end":652358,"line_start":87,"line_end":87,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"fn (self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652307,"byte_end":652335,"line_start":86,"line_end":86,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2793},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652447,"byte_end":652451,"line_start":92,"line_end":92,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[{"value":"/ Returns the x offset","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652411,"byte_end":652435,"line_start":91,"line_end":91,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2794},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652533,"byte_end":652536,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[{"value":"/ Returns the y offset","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652497,"byte_end":652521,"line_start":96,"line_end":96,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2796},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652801,"byte_end":652820,"line_start":111,"line_end":111,"column_start":12,"column_end":31},"name":"from_numer_denom_ms","qualname":"<Delay>::from_numer_denom_ms","value":"fn (numerator: u32, denominator: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a delay from a ratio of milliseconds.","sig":null,"attributes":[{"value":"/ Create a delay from a ratio of milliseconds.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652596,"byte_end":652644,"line_start":103,"line_end":103,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652649,"byte_end":652652,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652657,"byte_end":652671,"line_start":105,"line_end":105,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652676,"byte_end":652679,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652684,"byte_end":652691,"line_start":107,"line_end":107,"column_start":5,"column_end":12}},{"value":"/ use image::Delay;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652696,"byte_end":652717,"line_start":108,"line_end":108,"column_start":5,"column_end":26}},{"value":"/ let delay_10ms = Delay::from_numer_denom_ms(10, 1);","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652722,"byte_end":652777,"line_start":109,"line_end":109,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652782,"byte_end":652789,"line_start":110,"line_end":110,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2797},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":653463,"byte_end":653487,"line_start":129,"line_end":129,"column_start":12,"column_end":36},"name":"from_saturating_duration","qualname":"<Delay>::from_saturating_duration","value":"fn (duration: Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert from a duration, clamped between 0 and an implemented defined maximum.","sig":null,"attributes":[{"value":"/ Convert from a duration, clamped between 0 and an implemented defined maximum.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652940,"byte_end":653022,"line_start":115,"line_end":115,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":653027,"byte_end":653030,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ The maximum is *at least* `i32::MAX` milliseconds. It should be noted that the accuracy of","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":653035,"byte_end":653129,"line_start":117,"line_end":117,"column_start":5,"column_end":99}},{"value":"/ the result may be relative and very large delays have a coarse resolution.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":653134,"byte_end":653212,"line_start":118,"line_end":118,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":653217,"byte_end":653220,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":653225,"byte_end":653239,"line_start":120,"line_end":120,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":653244,"byte_end":653247,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":653252,"byte_end":653259,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":653264,"byte_end":653292,"line_start":123,"line_end":123,"column_start":5,"column_end":33}},{"value":"/ use image::Delay;","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":653297,"byte_end":653318,"line_start":124,"line_end":124,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":653323,"byte_end":653326,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ let duration = Duration::from_millis(20);","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":653331,"byte_end":653376,"line_start":126,"line_end":126,"column_start":5,"column_end":50}},{"value":"/ let delay = Delay::from_saturating_duration(duration);","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":653381,"byte_end":653439,"line_start":127,"line_end":127,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":653444,"byte_end":653451,"line_start":128,"line_end":128,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2799},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":654663,"byte_end":654677,"line_start":158,"line_end":158,"column_start":12,"column_end":26},"name":"numer_denom_ms","qualname":"<Delay>::numer_denom_ms","value":"fn (self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The numerator and denominator of the delay in milliseconds.","sig":null,"attributes":[{"value":"/ The numerator and denominator of the delay in milliseconds.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":654437,"byte_end":654500,"line_start":154,"line_end":154,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":654505,"byte_end":654508,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be an exact conversion if the `Delay` was previously created with the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":654513,"byte_end":654608,"line_start":156,"line_end":156,"column_start":5,"column_end":100}},{"value":"/ `from_numer_denom_ms` constructor.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":654613,"byte_end":654651,"line_start":157,"line_end":157,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2847},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":661933,"byte_end":661939,"line_start":18,"line_end":18,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer_::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":2850}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over pixel refs.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":661893,"byte_end":661921,"line_start":17,"line_end":17,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":2866},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":662708,"byte_end":662717,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer_::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":2869}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over mutable pixel refs.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":662660,"byte_end":662696,"line_start":56,"line_end":56,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":2885},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":663541,"byte_end":663545,"line_start":98,"line_end":98,"column_start":12,"column_end":16},"name":"Rows","qualname":"::buffer_::Rows","value":"Rows {  }","parent":null,"children":[{"krate":0,"index":2888}],"decl_id":null,"docs":" Iterate over rows of an image\n","sig":null,"attributes":[{"value":"/ Iterate over rows of an image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":663496,"byte_end":663529,"line_start":97,"line_end":97,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2904},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":664474,"byte_end":664481,"line_start":141,"line_end":141,"column_start":12,"column_end":19},"name":"RowsMut","qualname":"::buffer_::RowsMut","value":"RowsMut {  }","parent":null,"children":[{"krate":0,"index":2907}],"decl_id":null,"docs":" Iterate over mutable rows of an image\n","sig":null,"attributes":[{"value":"/ Iterate over mutable rows of an image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":664421,"byte_end":664462,"line_start":140,"line_end":140,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":2923},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":665441,"byte_end":665456,"line_start":184,"line_end":184,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer_::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":2926},{"krate":0,"index":2927},{"krate":0,"index":2928},{"krate":0,"index":2929}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":665392,"byte_end":665429,"line_start":183,"line_end":183,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2940},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":666204,"byte_end":666217,"line_start":222,"line_end":222,"column_start":12,"column_end":25},"name":"EnumerateRows","qualname":"::buffer_::EnumerateRows","value":"EnumerateRows {  }","parent":null,"children":[{"krate":0,"index":2943},{"krate":0,"index":2944},{"krate":0,"index":2945}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":666157,"byte_end":666192,"line_start":221,"line_end":221,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":2956},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":667080,"byte_end":667098,"line_start":265,"line_end":265,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer_::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":2959},{"krate":0,"index":2960},{"krate":0,"index":2961},{"krate":0,"index":2962}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":667031,"byte_end":667068,"line_start":264,"line_end":264,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2973},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":667863,"byte_end":667879,"line_start":303,"line_end":303,"column_start":12,"column_end":28},"name":"EnumerateRowsMut","qualname":"::buffer_::EnumerateRowsMut","value":"EnumerateRowsMut {  }","parent":null,"children":[{"krate":0,"index":2976},{"krate":0,"index":2977},{"krate":0,"index":2978}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":667816,"byte_end":667851,"line_start":302,"line_end":302,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":5047},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670332,"byte_end":670343,"line_start":395,"line_end":395,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer_::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":5050},{"krate":0,"index":5051},{"krate":0,"index":5052},{"krate":0,"index":5053}],"decl_id":null,"docs":" Generic image buffer","sig":null,"attributes":[{"value":"/ Generic image buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":668711,"byte_end":668735,"line_start":345,"line_end":345,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":668736,"byte_end":668739,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ This is an image parameterised by its Pixel types, represented by a width and height and a","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":668740,"byte_end":668834,"line_start":347,"line_end":347,"column_start":1,"column_end":95}},{"value":"/ container of channel data. It provides direct access to its pixels and implements the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":668835,"byte_end":668924,"line_start":348,"line_end":348,"column_start":1,"column_end":90}},{"value":"/ [`GenericImageView`] and [`GenericImage`] traits. In many ways, this is the standard buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":668925,"byte_end":669020,"line_start":349,"line_end":349,"column_start":1,"column_end":96}},{"value":"/ implementing those traits. Using this concrete type instead of a generic type parameter has","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669021,"byte_end":669116,"line_start":350,"line_end":350,"column_start":1,"column_end":96}},{"value":"/ been shown to improve performance.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669117,"byte_end":669155,"line_start":351,"line_end":351,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669156,"byte_end":669159,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ The crate defines a few type aliases with regularly used pixel types for your convenience, such","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669160,"byte_end":669259,"line_start":353,"line_end":353,"column_start":1,"column_end":100}},{"value":"/ as `RgbImage`, `GrayImage` etc.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669260,"byte_end":669295,"line_start":354,"line_end":354,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669296,"byte_end":669299,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669300,"byte_end":669345,"line_start":356,"line_end":356,"column_start":1,"column_end":46}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669346,"byte_end":669399,"line_start":357,"line_end":357,"column_start":1,"column_end":54}},{"value":"/ [`RgbImage`]: type.RgbImage.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669400,"byte_end":669436,"line_start":358,"line_end":358,"column_start":1,"column_end":37}},{"value":"/ [`GrayImage`]: type.GrayImage.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669437,"byte_end":669475,"line_start":359,"line_end":359,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669476,"byte_end":669479,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669480,"byte_end":669495,"line_start":361,"line_end":361,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669496,"byte_end":669499,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"/ Create a simple canvas and paint a small cross.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669500,"byte_end":669551,"line_start":363,"line_end":363,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669552,"byte_end":669555,"line_start":364,"line_end":364,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669556,"byte_end":669563,"line_start":365,"line_end":365,"column_start":1,"column_end":8}},{"value":"/ use image::{RgbImage, Rgb};","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669564,"byte_end":669595,"line_start":366,"line_end":366,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669596,"byte_end":669599,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbImage::new(32, 32);","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669600,"byte_end":669640,"line_start":368,"line_end":368,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669641,"byte_end":669644,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"/ for x in 15..=17 {","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669645,"byte_end":669667,"line_start":370,"line_end":370,"column_start":1,"column_end":23}},{"value":"/     for y in 8..24 {","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669668,"byte_end":669692,"line_start":371,"line_end":371,"column_start":1,"column_end":25}},{"value":"/         img.put_pixel(x, y, Rgb([255, 0, 0]));","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669693,"byte_end":669743,"line_start":372,"line_end":372,"column_start":1,"column_end":51}},{"value":"/         img.put_pixel(y, x, Rgb([255, 0, 0]));","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669744,"byte_end":669794,"line_start":373,"line_end":373,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669795,"byte_end":669804,"line_start":374,"line_end":374,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669805,"byte_end":669810,"line_start":375,"line_end":375,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669811,"byte_end":669818,"line_start":376,"line_end":376,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669819,"byte_end":669822,"line_start":377,"line_end":377,"column_start":1,"column_end":4}},{"value":"/ Overlays an image on top of a larger background raster.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669823,"byte_end":669882,"line_start":378,"line_end":378,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669883,"byte_end":669886,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669887,"byte_end":669900,"line_start":380,"line_end":380,"column_start":1,"column_end":14}},{"value":"/ use image::{GenericImage, GenericImageView, ImageBuffer, open};","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669901,"byte_end":669968,"line_start":381,"line_end":381,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669969,"byte_end":669972,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ let on_top = open(\"path/to/some.png\").unwrap().into_rgb();","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":669973,"byte_end":670035,"line_start":383,"line_end":383,"column_start":1,"column_end":63}},{"value":"/ let mut img = ImageBuffer::from_fn(512, 512, |x, y| {","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670036,"byte_end":670093,"line_start":384,"line_end":384,"column_start":1,"column_end":58}},{"value":"/     if (x + y) % 2 == 0 {","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670094,"byte_end":670123,"line_start":385,"line_end":385,"column_start":1,"column_end":30}},{"value":"/         image::Rgb([0, 0, 0])","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670124,"byte_end":670157,"line_start":386,"line_end":386,"column_start":1,"column_end":34}},{"value":"/     } else {","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670158,"byte_end":670174,"line_start":387,"line_end":387,"column_start":1,"column_end":17}},{"value":"/         image::Rgb([255, 255, 255])","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670175,"byte_end":670214,"line_start":388,"line_end":388,"column_start":1,"column_end":40}},{"value":"/     }","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670215,"byte_end":670224,"line_start":389,"line_end":389,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670225,"byte_end":670232,"line_start":390,"line_end":390,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670233,"byte_end":670236,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ image::imageops::overlay(&mut img, &on_top, 128, 128);","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670237,"byte_end":670295,"line_start":392,"line_end":392,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670296,"byte_end":670303,"line_start":393,"line_end":393,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2992},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":671101,"byte_end":671109,"line_start":417,"line_end":417,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"fn (width: u32, height: u32, buf: Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Contructs a buffer from a generic container\n (for example a `Vec` or a slice)","sig":null,"attributes":[{"value":"/ Contructs a buffer from a generic container","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670816,"byte_end":670863,"line_start":412,"line_end":412,"column_start":5,"column_end":52}},{"value":"/ (for example a `Vec` or a slice)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670868,"byte_end":670904,"line_start":413,"line_end":413,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670909,"byte_end":670912,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the container is not big enough (including when the image dimensions","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670917,"byte_end":671007,"line_start":415,"line_end":415,"column_start":5,"column_end":95}},{"value":"/ necessitate an allocation of more bytes than supported by the container).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":671012,"byte_end":671089,"line_start":416,"line_end":416,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":2993},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":671515,"byte_end":671523,"line_start":431,"line_end":431,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"fn (self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":671466,"byte_end":671503,"line_start":430,"line_end":430,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2994},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":671625,"byte_end":671635,"line_start":436,"line_end":436,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"fn (&self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":671574,"byte_end":671613,"line_start":435,"line_end":435,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2995},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":671744,"byte_end":671749,"line_start":441,"line_end":441,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":671704,"byte_end":671732,"line_start":440,"line_end":440,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2996},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":671837,"byte_end":671843,"line_start":446,"line_end":446,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":671796,"byte_end":671825,"line_start":445,"line_end":445,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2997},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":671957,"byte_end":671963,"line_start":451,"line_end":451,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"fn (&self) -> Pixels<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the pixels of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":671891,"byte_end":671945,"line_start":450,"line_end":450,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2998},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":672164,"byte_end":672168,"line_start":458,"line_end":458,"column_start":12,"column_end":16},"name":"rows","qualname":"<ImageBuffer<P, Container>>::rows","value":"fn (&self) -> Rows<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the rows of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the rows of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":672100,"byte_end":672152,"line_start":457,"line_end":457,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2999},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":672511,"byte_end":672527,"line_start":469,"line_end":469,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"fn (&self) -> EnumeratePixels<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":672357,"byte_end":672401,"line_start":466,"line_end":466,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":672406,"byte_end":672459,"line_start":467,"line_end":467,"column_start":5,"column_end":58}},{"value":"/ along with a reference to them.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":672464,"byte_end":672499,"line_start":468,"line_end":468,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3000},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":672859,"byte_end":672873,"line_start":481,"line_end":481,"column_start":12,"column_end":26},"name":"enumerate_rows","qualname":"<ImageBuffer<P, Container>>::enumerate_rows","value":"fn (&self) -> EnumerateRows<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":672708,"byte_end":672750,"line_start":478,"line_end":478,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":672755,"byte_end":672807,"line_start":479,"line_end":479,"column_start":5,"column_end":57}},{"value":"/ along with a reference to them.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":672812,"byte_end":672847,"line_start":480,"line_end":480,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3001},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":673194,"byte_end":673203,"line_start":494,"line_end":494,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"fn (&self, x: u32, y: u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the pixel at location `(x, y)`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":673028,"byte_end":673082,"line_start":489,"line_end":489,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":673087,"byte_end":673090,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":673095,"byte_end":673107,"line_start":491,"line_end":491,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":673112,"byte_end":673115,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":673120,"byte_end":673182,"line_start":493,"line_end":493,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3009},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":674929,"byte_end":674942,"line_start":535,"line_end":535,"column_start":12,"column_end":25},"name":"sample_layout","qualname":"<ImageBuffer<P, Container>>::sample_layout","value":"fn (&self) -> SampleLayout","parent":null,"children":[],"decl_id":null,"docs":" Get the format of the buffer when viewed as a matrix of samples.\n","sig":null,"attributes":[{"value":"/ Get the format of the buffer when viewed as a matrix of samples.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":674849,"byte_end":674917,"line_start":534,"line_end":534,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3010},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":675556,"byte_end":675573,"line_start":546,"line_end":546,"column_start":12,"column_end":29},"name":"into_flat_samples","qualname":"<ImageBuffer<P, Container>>::into_flat_samples","value":"fn (self) -> FlatSamples<Container>","parent":null,"children":[],"decl_id":null,"docs":" Return the raw sample buffer with its stride an dimension information.","sig":null,"attributes":[{"value":"/ Return the raw sample buffer with its stride an dimension information.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":675145,"byte_end":675219,"line_start":540,"line_end":540,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":675224,"byte_end":675227,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ The returned buffer is guaranteed to be well formed in all cases. It is layed out by","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":675232,"byte_end":675320,"line_start":542,"line_end":542,"column_start":5,"column_end":93}},{"value":"/ colors, width then height, meaning `channel_stride <= width_stride <= height_stride`. All","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":675325,"byte_end":675418,"line_start":543,"line_end":543,"column_start":5,"column_end":98}},{"value":"/ strides are in numbers of elements but those are mostly `u8` in which case the strides are","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":675423,"byte_end":675517,"line_start":544,"line_end":544,"column_start":5,"column_end":99}},{"value":"/ also byte strides.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":675522,"byte_end":675544,"line_start":545,"line_end":545,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3011},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":676019,"byte_end":676034,"line_start":561,"line_end":561,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<ImageBuffer<P, Container>>::as_flat_samples","value":"fn (&self) -> FlatSamples<&[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":675914,"byte_end":675957,"line_start":558,"line_end":558,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":675962,"byte_end":675965,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ See `flattened` for more details.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":675970,"byte_end":676007,"line_start":560,"line_end":560,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3015},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":676553,"byte_end":676563,"line_start":580,"line_end":580,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"fn (&mut self) -> PixelsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable pixels of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":676479,"byte_end":676541,"line_start":579,"line_end":579,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3016},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":676786,"byte_end":676794,"line_start":587,"line_end":587,"column_start":12,"column_end":20},"name":"rows_mut","qualname":"<ImageBuffer<P, Container>>::rows_mut","value":"fn (&mut self) -> RowsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable rows of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable rows of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":676714,"byte_end":676774,"line_start":586,"line_end":586,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":3017},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":677159,"byte_end":677179,"line_start":598,"line_end":598,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"fn (&mut self) -> EnumeratePixelsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":676997,"byte_end":677041,"line_start":595,"line_end":595,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":677046,"byte_end":677099,"line_start":596,"line_end":596,"column_start":5,"column_end":58}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":677104,"byte_end":677147,"line_start":597,"line_end":597,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3018},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":677553,"byte_end":677571,"line_start":611,"line_end":611,"column_start":12,"column_end":30},"name":"enumerate_rows_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_rows_mut","value":"fn (&mut self) -> EnumerateRowsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":677394,"byte_end":677436,"line_start":608,"line_end":608,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":677441,"byte_end":677493,"line_start":609,"line_end":609,"column_start":5,"column_end":57}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":677498,"byte_end":677541,"line_start":610,"line_end":610,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3019},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":677934,"byte_end":677947,"line_start":625,"line_end":625,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"fn (&mut self, x: u32, y: u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":677760,"byte_end":677822,"line_start":620,"line_end":620,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":677827,"byte_end":677830,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":677835,"byte_end":677847,"line_start":622,"line_end":622,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":677852,"byte_end":677855,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":677860,"byte_end":677922,"line_start":624,"line_end":624,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3020},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":678396,"byte_end":678405,"line_start":637,"line_end":637,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: P) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Puts a pixel at location `(x, y)`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":678247,"byte_end":678284,"line_start":632,"line_end":632,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":678289,"byte_end":678292,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":678297,"byte_end":678309,"line_start":634,"line_end":634,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":678314,"byte_end":678317,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":678322,"byte_end":678384,"line_start":636,"line_end":636,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3024},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":678850,"byte_end":678854,"line_start":652,"line_end":652,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"fn <Q> (&self, path: Q) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":678659,"byte_end":678712,"line_start":648,"line_end":648,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":678717,"byte_end":678720,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":678725,"byte_end":678781,"line_start":650,"line_end":650,"column_start":5,"column_end":61}},{"value":"/ Currently only jpeg and png files are supported.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":678786,"byte_end":678838,"line_start":651,"line_end":651,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3029},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":679529,"byte_end":679545,"line_start":678,"line_end":678,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<ImageBuffer<P, Container>>::save_with_format","value":"fn <Q> (&self, path: Q, format: ImageFormat) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":679322,"byte_end":679377,"line_start":673,"line_end":673,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":679382,"byte_end":679407,"line_start":674,"line_end":674,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":679412,"byte_end":679415,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":679420,"byte_end":679492,"line_start":676,"line_end":676,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":679497,"byte_end":679517,"line_start":677,"line_end":677,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":3077},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":686100,"byte_end":686103,"line_start":891,"line_end":891,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::new","value":"fn (width: u32, height: u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.","sig":null,"attributes":[{"value":"/ Creates a new image buffer based on a `Vec<P::Subpixel>`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":685910,"byte_end":685971,"line_start":886,"line_end":886,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":685976,"byte_end":685979,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":685984,"byte_end":685996,"line_start":888,"line_end":888,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":686001,"byte_end":686004,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":686009,"byte_end":686088,"line_start":890,"line_end":890,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3078},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":686641,"byte_end":686651,"line_start":907,"line_end":907,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_pixel","value":"fn (width: u32, height: u32, pixel: P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by copying a pixel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":686461,"byte_end":686512,"line_start":902,"line_end":902,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":686517,"byte_end":686520,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":686525,"byte_end":686537,"line_start":904,"line_end":904,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":686542,"byte_end":686545,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":686550,"byte_end":686629,"line_start":906,"line_end":906,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3079},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":687166,"byte_end":687173,"line_start":922,"line_end":922,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_fn","value":"fn <F> (width: u32, height: u32, mut f: F) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by repeated application of the supplied function.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":686872,"byte_end":686954,"line_start":915,"line_end":915,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":686959,"byte_end":686962,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ The arguments to the function are the pixel's x and y coordinates.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":686967,"byte_end":687037,"line_start":917,"line_end":917,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":687042,"byte_end":687045,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":687050,"byte_end":687062,"line_start":919,"line_end":919,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":687067,"byte_end":687070,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":687075,"byte_end":687154,"line_start":921,"line_end":921,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3081},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":687584,"byte_end":687592,"line_start":935,"line_end":935,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_vec","value":"fn (width: u32, height: u32, buf: Vec<P::Subpixel>) -> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[{"value":"/ Creates an image buffer out of an existing buffer.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":687464,"byte_end":687518,"line_start":933,"line_end":933,"column_start":5,"column_end":59}},{"value":"/ Returns None if the buffer is not big enough.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":687523,"byte_end":687572,"line_start":934,"line_end":934,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3082},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":687879,"byte_end":687887,"line_start":945,"line_end":945,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::into_vec","value":"fn (self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[{"value":"/ Consumes the image buffer and returns the underlying data","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":687779,"byte_end":687840,"line_start":943,"line_end":943,"column_start":5,"column_end":66}},{"value":"/ as an owned buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":687845,"byte_end":687867,"line_start":944,"line_end":944,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":3083},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":688015,"byte_end":688028,"line_start":951,"line_end":951,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer_::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":3085}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for whole image buffers.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":687949,"byte_end":688004,"line_start":950,"line_end":950,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3085},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":688215,"byte_end":688222,"line_start":956,"line_end":956,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer_::ConvertBuffer::convert","value":"fn (&self) -> T","parent":{"krate":0,"index":3083},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T","sig":null,"attributes":[{"value":"/ Converts `self` to a buffer of type T","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":688038,"byte_end":688079,"line_start":952,"line_end":952,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":688084,"byte_end":688087,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ A generic implementation is provided to convert any image buffer to a image buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":688092,"byte_end":688178,"line_start":954,"line_end":954,"column_start":5,"column_end":91}},{"value":"/ based on a `Vec<T>`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":688183,"byte_end":688207,"line_start":955,"line_end":955,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3087},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":688490,"byte_end":688504,"line_start":964,"line_end":964,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"fn (self, palette: &[(u8, u8, u8)], transparent_idx: Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[{"value":"/ Expands a color palette by re-using the existing buffer.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":688300,"byte_end":688360,"line_start":961,"line_end":961,"column_start":5,"column_end":65}},{"value":"/ Assumes 8 bit per pixel. Uses an optionally transparent index to","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":688365,"byte_end":688433,"line_start":962,"line_end":962,"column_start":5,"column_end":73}},{"value":"/ adjust it's alpha value accordingly.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":688438,"byte_end":688478,"line_start":963,"line_end":963,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":3096},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":690248,"byte_end":690256,"line_start":1016,"line_end":1016,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer_::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb image buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":690209,"byte_end":690238,"line_start":1015,"line_end":1015,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":3097},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":690345,"byte_end":690354,"line_start":1018,"line_end":1018,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer_::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb + alpha channel image buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":690290,"byte_end":690335,"line_start":1017,"line_end":1017,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":3098},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":690434,"byte_end":690443,"line_start":1020,"line_end":1020,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer_::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale image buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":690389,"byte_end":690424,"line_start":1019,"line_end":1019,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":3099},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":690539,"byte_end":690553,"line_start":1022,"line_end":1022,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer_::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale + alpha channel image buffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":690478,"byte_end":690529,"line_start":1021,"line_end":1021,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5059},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698061,"byte_end":698063,"line_start":10,"line_end":10,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ColorType::L8","value":"ColorType::L8","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698028,"byte_end":698056,"line_start":9,"line_end":9,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5061},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698124,"byte_end":698127,"line_start":12,"line_end":12,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ColorType::La8","value":"ColorType::La8","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698069,"byte_end":698119,"line_start":11,"line_end":11,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5063},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698182,"byte_end":698186,"line_start":14,"line_end":14,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ColorType::Rgb8","value":"ColorType::Rgb8","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698133,"byte_end":698177,"line_start":13,"line_end":13,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5065},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698241,"byte_end":698246,"line_start":16,"line_end":16,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ColorType::Rgba8","value":"ColorType::Rgba8","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698192,"byte_end":698236,"line_start":15,"line_end":15,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5067},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698287,"byte_end":698290,"line_start":19,"line_end":19,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ColorType::L16","value":"ColorType::L16","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698253,"byte_end":698282,"line_start":18,"line_end":18,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5069},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698352,"byte_end":698356,"line_start":21,"line_end":21,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ColorType::La16","value":"ColorType::La16","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698296,"byte_end":698347,"line_start":20,"line_end":20,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5071},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698390,"byte_end":698395,"line_start":23,"line_end":23,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ColorType::Rgb16","value":"ColorType::Rgb16","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698362,"byte_end":698385,"line_start":22,"line_end":22,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5073},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698430,"byte_end":698436,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ColorType::Rgba16","value":"ColorType::Rgba16","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGBA\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGBA","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698401,"byte_end":698425,"line_start":24,"line_end":24,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5075},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698492,"byte_end":698496,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ColorType::Bgr8","value":"ColorType::Bgr8","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698443,"byte_end":698487,"line_start":27,"line_end":27,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5077},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698551,"byte_end":698556,"line_start":30,"line_end":30,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ColorType::Bgra8","value":"ColorType::Bgra8","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698502,"byte_end":698546,"line_start":29,"line_end":29,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5079},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698582,"byte_end":698597,"line_start":33,"line_end":33,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ColorType::__NonExhaustive","value":"ColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5058},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698012,"byte_end":698021,"line_start":8,"line_end":8,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"ColorType::{L8, La8, Rgb8, Rgba8, L16, La16, Rgb16, Rgba16, Bgr8, Bgra8, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":5059},{"krate":0,"index":5061},{"krate":0,"index":5063},{"krate":0,"index":5065},{"krate":0,"index":5067},{"krate":0,"index":5069},{"krate":0,"index":5071},{"krate":0,"index":5073},{"krate":0,"index":5075},{"krate":0,"index":5077},{"krate":0,"index":5079}],"decl_id":null,"docs":" An enumeration over supported color types and bit depths\n","sig":null,"attributes":[{"value":"/ An enumeration over supported color types and bit depths","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":697891,"byte_end":697951,"line_start":6,"line_end":6,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3118},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698745,"byte_end":698760,"line_start":38,"line_end":38,"column_start":12,"column_end":27},"name":"bytes_per_pixel","qualname":"<ColorType>::bytes_per_pixel","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes contained in a pixel of `ColorType` ```c```\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes contained in a pixel of `ColorType` ```c```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698658,"byte_end":698733,"line_start":37,"line_end":37,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":3119},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":699223,"byte_end":699232,"line_start":51,"line_end":51,"column_start":12,"column_end":21},"name":"has_alpha","qualname":"<ColorType>::has_alpha","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if there is an alpha channel.\n","sig":null,"attributes":[{"value":"/ Returns if there is an alpha channel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":699170,"byte_end":699211,"line_start":50,"line_end":50,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3121},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":699626,"byte_end":699640,"line_start":62,"line_end":62,"column_start":12,"column_end":26},"name":"bits_per_pixel","qualname":"<ColorType>::bits_per_pixel","value":"fn (self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be\n a multiple of 8).\n","sig":null,"attributes":[{"value":"/ Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":699492,"byte_end":699588,"line_start":60,"line_end":60,"column_start":5,"column_end":101}},{"value":"/ a multiple of 8).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":699593,"byte_end":699614,"line_start":61,"line_end":61,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3122},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":699803,"byte_end":699816,"line_start":67,"line_end":67,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ColorType>::channel_count","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of color channels that make up this pixel\n","sig":null,"attributes":[{"value":"/ Returns the number of color channels that make up this pixel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":699727,"byte_end":699791,"line_start":66,"line_end":66,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5098},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700445,"byte_end":700447,"line_start":83,"line_end":83,"column_start":5,"column_end":7},"name":"L1","qualname":"::color::ExtendedColorType::L1","value":"ExtendedColorType::L1","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5100},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700453,"byte_end":700456,"line_start":84,"line_end":84,"column_start":5,"column_end":8},"name":"La1","qualname":"::color::ExtendedColorType::La1","value":"ExtendedColorType::La1","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5102},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700462,"byte_end":700466,"line_start":85,"line_end":85,"column_start":5,"column_end":9},"name":"Rgb1","qualname":"::color::ExtendedColorType::Rgb1","value":"ExtendedColorType::Rgb1","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5104},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700472,"byte_end":700477,"line_start":86,"line_end":86,"column_start":5,"column_end":10},"name":"Rgba1","qualname":"::color::ExtendedColorType::Rgba1","value":"ExtendedColorType::Rgba1","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5106},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700483,"byte_end":700485,"line_start":87,"line_end":87,"column_start":5,"column_end":7},"name":"L2","qualname":"::color::ExtendedColorType::L2","value":"ExtendedColorType::L2","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5108},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700491,"byte_end":700494,"line_start":88,"line_end":88,"column_start":5,"column_end":8},"name":"La2","qualname":"::color::ExtendedColorType::La2","value":"ExtendedColorType::La2","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5110},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700500,"byte_end":700504,"line_start":89,"line_end":89,"column_start":5,"column_end":9},"name":"Rgb2","qualname":"::color::ExtendedColorType::Rgb2","value":"ExtendedColorType::Rgb2","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5112},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700510,"byte_end":700515,"line_start":90,"line_end":90,"column_start":5,"column_end":10},"name":"Rgba2","qualname":"::color::ExtendedColorType::Rgba2","value":"ExtendedColorType::Rgba2","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5114},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700521,"byte_end":700523,"line_start":91,"line_end":91,"column_start":5,"column_end":7},"name":"L4","qualname":"::color::ExtendedColorType::L4","value":"ExtendedColorType::L4","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5116},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700529,"byte_end":700532,"line_start":92,"line_end":92,"column_start":5,"column_end":8},"name":"La4","qualname":"::color::ExtendedColorType::La4","value":"ExtendedColorType::La4","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5118},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700538,"byte_end":700542,"line_start":93,"line_end":93,"column_start":5,"column_end":9},"name":"Rgb4","qualname":"::color::ExtendedColorType::Rgb4","value":"ExtendedColorType::Rgb4","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5120},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700548,"byte_end":700553,"line_start":94,"line_end":94,"column_start":5,"column_end":10},"name":"Rgba4","qualname":"::color::ExtendedColorType::Rgba4","value":"ExtendedColorType::Rgba4","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5122},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700559,"byte_end":700561,"line_start":95,"line_end":95,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ExtendedColorType::L8","value":"ExtendedColorType::L8","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5124},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700567,"byte_end":700570,"line_start":96,"line_end":96,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ExtendedColorType::La8","value":"ExtendedColorType::La8","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5126},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700576,"byte_end":700580,"line_start":97,"line_end":97,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ExtendedColorType::Rgb8","value":"ExtendedColorType::Rgb8","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5128},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700586,"byte_end":700591,"line_start":98,"line_end":98,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ExtendedColorType::Rgba8","value":"ExtendedColorType::Rgba8","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5130},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700597,"byte_end":700600,"line_start":99,"line_end":99,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ExtendedColorType::L16","value":"ExtendedColorType::L16","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5132},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700606,"byte_end":700610,"line_start":100,"line_end":100,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ExtendedColorType::La16","value":"ExtendedColorType::La16","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5134},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700616,"byte_end":700621,"line_start":101,"line_end":101,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ExtendedColorType::Rgb16","value":"ExtendedColorType::Rgb16","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5136},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700627,"byte_end":700633,"line_start":102,"line_end":102,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ExtendedColorType::Rgba16","value":"ExtendedColorType::Rgba16","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5138},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700639,"byte_end":700643,"line_start":103,"line_end":103,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ExtendedColorType::Bgr8","value":"ExtendedColorType::Bgr8","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5140},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700649,"byte_end":700654,"line_start":104,"line_end":104,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ExtendedColorType::Bgra8","value":"ExtendedColorType::Bgra8","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5142},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700883,"byte_end":700890,"line_start":109,"line_end":109,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::color::ExtendedColorType::Unknown","value":"ExtendedColorType::Unknown(u8)","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":" Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n which are associated with an external palette. In that case, the pixel value is an index\n into the palette.\n","sig":null,"attributes":[{"value":"/ Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700661,"byte_end":700755,"line_start":106,"line_end":106,"column_start":5,"column_end":99}},{"value":"/ which are associated with an external palette. In that case, the pixel value is an index","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700760,"byte_end":700852,"line_start":107,"line_end":107,"column_start":5,"column_end":97}},{"value":"/ into the palette.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700857,"byte_end":700878,"line_start":108,"line_end":108,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5145},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700920,"byte_end":700935,"line_start":112,"line_end":112,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ExtendedColorType::__NonExhaustive","value":"ExtendedColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":5097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5097},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700421,"byte_end":700438,"line_start":82,"line_end":82,"column_start":10,"column_end":27},"name":"ExtendedColorType","qualname":"::color::ExtendedColorType","value":"ExtendedColorType::{L1, La1, Rgb1, Rgba1, L2, La2, Rgb2, Rgba2, L4, La4, Rgb4, Rgba4, L8, La8, Rgb8, Rgba8, L16, La16, Rgb16, Rgba16, Bgr8, Bgra8, Unknown, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":5098},{"krate":0,"index":5100},{"krate":0,"index":5102},{"krate":0,"index":5104},{"krate":0,"index":5106},{"krate":0,"index":5108},{"krate":0,"index":5110},{"krate":0,"index":5112},{"krate":0,"index":5114},{"krate":0,"index":5116},{"krate":0,"index":5118},{"krate":0,"index":5120},{"krate":0,"index":5122},{"krate":0,"index":5124},{"krate":0,"index":5126},{"krate":0,"index":5128},{"krate":0,"index":5130},{"krate":0,"index":5132},{"krate":0,"index":5134},{"krate":0,"index":5136},{"krate":0,"index":5138},{"krate":0,"index":5140},{"krate":0,"index":5142},{"krate":0,"index":5145}],"decl_id":null,"docs":" An enumeration of color types encountered in image formats.","sig":null,"attributes":[{"value":"/ An enumeration of color types encountered in image formats.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":699914,"byte_end":699977,"line_start":73,"line_end":73,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":699978,"byte_end":699981,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ This is not exhaustive over all existing image formats but should be granular enough to allow","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":699982,"byte_end":700079,"line_start":75,"line_end":75,"column_start":1,"column_end":98}},{"value":"/ round tripping of decoding and encoding as much as possible. The variants will be extended as","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700080,"byte_end":700177,"line_start":76,"line_end":76,"column_start":1,"column_end":98}},{"value":"/ necessary to enable this.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700178,"byte_end":700207,"line_start":77,"line_end":77,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700208,"byte_end":700211,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ Another purpose is to advise users of a rough estimate of the accuracy and effort of the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700212,"byte_end":700304,"line_start":79,"line_end":79,"column_start":1,"column_end":93}},{"value":"/ decoding from and encoding to such an image format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700305,"byte_end":700360,"line_start":80,"line_end":80,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3124},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":701218,"byte_end":701231,"line_start":120,"line_end":120,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ExtendedColorType>::channel_count","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the number of channels for colors of this type.","sig":null,"attributes":[{"value":"/ Get the number of channels for colors of this type.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":701004,"byte_end":701059,"line_start":116,"line_end":116,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":701064,"byte_end":701067,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ Note that the `Unknown` variant returns a value of `1` since pixels can only be treated as","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":701072,"byte_end":701166,"line_start":118,"line_end":118,"column_start":5,"column_end":99}},{"value":"/ an opaque datum by the library.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":701171,"byte_end":701206,"line_start":119,"line_end":119,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":5463},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":707595,"byte_end":707598,"line_start":340,"line_end":340,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":703345,"byte_end":703355,"line_start":182,"line_end":182,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":703356,"byte_end":703378,"line_start":183,"line_end":183,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5492},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":707675,"byte_end":707678,"line_start":341,"line_end":341,"column_start":5,"column_end":8},"name":"Bgr","qualname":"::color::Bgr","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":703345,"byte_end":703355,"line_start":182,"line_end":182,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":703356,"byte_end":703378,"line_start":183,"line_end":183,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5521},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":707754,"byte_end":707758,"line_start":342,"line_end":342,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":703345,"byte_end":703355,"line_start":182,"line_end":182,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":703356,"byte_end":703378,"line_start":183,"line_end":183,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5550},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":707835,"byte_end":707839,"line_start":343,"line_end":343,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":703345,"byte_end":703355,"line_start":182,"line_end":182,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":703356,"byte_end":703378,"line_start":183,"line_end":183,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5579},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":707935,"byte_end":707939,"line_start":344,"line_end":344,"column_start":5,"column_end":9},"name":"Bgra","qualname":"::color::Bgra","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":703345,"byte_end":703355,"line_start":182,"line_end":182,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":703356,"byte_end":703378,"line_start":183,"line_end":183,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5608},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":708034,"byte_end":708039,"line_start":345,"line_end":345,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":703345,"byte_end":703355,"line_start":182,"line_end":182,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":703356,"byte_end":703378,"line_start":183,"line_end":183,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":3128},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":708206,"byte_end":708215,"line_start":349,"line_end":349,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":3130}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for the different pixel types.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":708134,"byte_end":708195,"line_start":348,"line_end":348,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3130},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":708305,"byte_end":708315,"line_start":351,"line_end":351,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"fn (&mut self, _: &Other) -> ()","parent":{"krate":0,"index":3128},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[{"value":"/ Changes `self` to represent `Other` in the color space of `Self`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":708229,"byte_end":708297,"line_start":350,"line_end":350,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5689},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736223,"byte_end":736233,"line_start":41,"line_end":41,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":5688},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736176,"byte_end":736218,"line_start":40,"line_end":40,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5692},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736309,"byte_end":736320,"line_start":44,"line_end":44,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":5688},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma with alpha","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736251,"byte_end":736304,"line_start":43,"line_end":43,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5695},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736389,"byte_end":736398,"line_start":47,"line_end":47,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":5688},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736343,"byte_end":736384,"line_start":46,"line_end":46,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5698},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736472,"byte_end":736482,"line_start":50,"line_end":50,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":5688},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb with alpha","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736415,"byte_end":736467,"line_start":49,"line_end":49,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5701},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736546,"byte_end":736555,"line_start":53,"line_end":53,"column_start":5,"column_end":14},"name":"ImageBgr8","qualname":"::dynimage::DynamicImage::ImageBgr8","value":"DynamicImage::ImageBgr8(BgrImage)","parent":{"krate":0,"index":5688},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736500,"byte_end":736541,"line_start":52,"line_end":52,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5704},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736629,"byte_end":736639,"line_start":56,"line_end":56,"column_start":5,"column_end":15},"name":"ImageBgra8","qualname":"::dynimage::DynamicImage::ImageBgra8","value":"DynamicImage::ImageBgra8(BgraImage)","parent":{"krate":0,"index":5688},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr with alpha","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736572,"byte_end":736624,"line_start":55,"line_end":55,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5707},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736705,"byte_end":736716,"line_start":59,"line_end":59,"column_start":5,"column_end":16},"name":"ImageLuma16","qualname":"::dynimage::DynamicImage::ImageLuma16","value":"DynamicImage::ImageLuma16(Gray16Image)","parent":{"krate":0,"index":5688},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736657,"byte_end":736700,"line_start":58,"line_end":58,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5710},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736795,"byte_end":736807,"line_start":62,"line_end":62,"column_start":5,"column_end":17},"name":"ImageLumaA16","qualname":"::dynimage::DynamicImage::ImageLumaA16","value":"DynamicImage::ImageLumaA16(GrayAlpha16Image)","parent":{"krate":0,"index":5688},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma with alpha","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736736,"byte_end":736790,"line_start":61,"line_end":61,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5713},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736879,"byte_end":736889,"line_start":65,"line_end":65,"column_start":5,"column_end":15},"name":"ImageRgb16","qualname":"::dynimage::DynamicImage::ImageRgb16","value":"DynamicImage::ImageRgb16(Rgb16Image)","parent":{"krate":0,"index":5688},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736832,"byte_end":736874,"line_start":64,"line_end":64,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5716},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736966,"byte_end":736977,"line_start":68,"line_end":68,"column_start":5,"column_end":16},"name":"ImageRgba16","qualname":"::dynimage::DynamicImage::ImageRgba16","value":"DynamicImage::ImageRgba16(Rgba16Image)","parent":{"krate":0,"index":5688},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb with alpha","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736908,"byte_end":736961,"line_start":67,"line_end":67,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":5688},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736157,"byte_end":736169,"line_start":39,"line_end":39,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"DynamicImage::{ImageLuma8, ImageLumaA8, ImageRgb8, ImageRgba8, ImageBgr8, ImageBgra8, ImageLuma16, ImageLumaA16, ImageRgb16, ImageRgba16}","parent":null,"children":[{"krate":0,"index":5689},{"krate":0,"index":5692},{"krate":0,"index":5695},{"krate":0,"index":5698},{"krate":0,"index":5701},{"krate":0,"index":5704},{"krate":0,"index":5707},{"krate":0,"index":5710},{"krate":0,"index":5713},{"krate":0,"index":5716}],"decl_id":null,"docs":" A Dynamic Image\n","sig":null,"attributes":[{"value":"/ A Dynamic Image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":736111,"byte_end":736130,"line_start":37,"line_end":37,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3352},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":741192,"byte_end":741201,"line_start":135,"line_end":135,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":741118,"byte_end":741180,"line_start":134,"line_end":134,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3353},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":741404,"byte_end":741415,"line_start":141,"line_end":141,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":741304,"byte_end":741358,"line_start":139,"line_end":139,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":741363,"byte_end":741392,"line_start":140,"line_end":140,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3354},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":741592,"byte_end":741600,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":741519,"byte_end":741580,"line_start":145,"line_end":145,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3355},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":741776,"byte_end":741785,"line_start":151,"line_end":151,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":741702,"byte_end":741764,"line_start":150,"line_end":150,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3356},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":741962,"byte_end":741971,"line_start":156,"line_end":156,"column_start":12,"column_end":21},"name":"new_bgra8","qualname":"<DynamicImage>::new_bgra8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGRA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGRA pixels.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":741888,"byte_end":741950,"line_start":155,"line_end":155,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3357},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":742147,"byte_end":742155,"line_start":161,"line_end":161,"column_start":12,"column_end":20},"name":"new_bgr8","qualname":"<DynamicImage>::new_bgr8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGR pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGR pixels.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":742074,"byte_end":742135,"line_start":160,"line_end":160,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3358},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":742331,"byte_end":742341,"line_start":166,"line_end":166,"column_start":12,"column_end":22},"name":"new_luma16","qualname":"<DynamicImage>::new_luma16","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":742257,"byte_end":742319,"line_start":165,"line_end":165,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3359},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":742545,"byte_end":742557,"line_start":172,"line_end":172,"column_start":12,"column_end":24},"name":"new_luma_a16","qualname":"<DynamicImage>::new_luma_a16","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":742445,"byte_end":742499,"line_start":170,"line_end":170,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":742504,"byte_end":742533,"line_start":171,"line_end":171,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3360},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":742735,"byte_end":742744,"line_start":177,"line_end":177,"column_start":12,"column_end":21},"name":"new_rgb16","qualname":"<DynamicImage>::new_rgb16","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":742662,"byte_end":742723,"line_start":176,"line_end":176,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3361},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":742921,"byte_end":742931,"line_start":182,"line_end":182,"column_start":12,"column_end":22},"name":"new_rgba16","qualname":"<DynamicImage>::new_rgba16","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":742847,"byte_end":742909,"line_start":181,"line_end":181,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3362},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":743097,"byte_end":743109,"line_start":187,"line_end":187,"column_start":12,"column_end":24},"name":"from_decoder","qualname":"<DynamicImage>::from_decoder","value":"fn <'a> (decoder: impl ImageDecoder<'a>) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decodes an encoded image into a dynamic image.\n","sig":null,"attributes":[{"value":"/ Decodes an encoded image into a dynamic image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":743035,"byte_end":743085,"line_start":186,"line_end":186,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3365},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":743287,"byte_end":743293,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"name":"to_rgb","qualname":"<DynamicImage>::to_rgb","value":"fn (&self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":743226,"byte_end":743275,"line_start":193,"line_end":193,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3366},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":743462,"byte_end":743469,"line_start":201,"line_end":201,"column_start":12,"column_end":19},"name":"to_rgba","qualname":"<DynamicImage>::to_rgba","value":"fn (&self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":743400,"byte_end":743450,"line_start":200,"line_end":200,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3367},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":743638,"byte_end":743644,"line_start":208,"line_end":208,"column_start":12,"column_end":18},"name":"to_bgr","qualname":"<DynamicImage>::to_bgr","value":"fn (&self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGR image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":743577,"byte_end":743626,"line_start":207,"line_end":207,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3368},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":743813,"byte_end":743820,"line_start":215,"line_end":215,"column_start":12,"column_end":19},"name":"to_bgra","qualname":"<DynamicImage>::to_bgra","value":"fn (&self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGRA image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":743751,"byte_end":743801,"line_start":214,"line_end":214,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3369},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":743989,"byte_end":743996,"line_start":222,"line_end":222,"column_start":12,"column_end":19},"name":"to_luma","qualname":"<DynamicImage>::to_luma","value":"fn (&self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":743928,"byte_end":743977,"line_start":221,"line_end":221,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3370},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":744166,"byte_end":744179,"line_start":229,"line_end":229,"column_start":12,"column_end":25},"name":"to_luma_alpha","qualname":"<DynamicImage>::to_luma_alpha","value":"fn (&self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":744104,"byte_end":744154,"line_start":228,"line_end":228,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3371},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":744471,"byte_end":744479,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"into_rgb","qualname":"<DynamicImage>::into_rgb","value":"fn (self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":744292,"byte_end":744338,"line_start":235,"line_end":235,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":744343,"byte_end":744346,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":744351,"byte_end":744421,"line_start":237,"line_end":237,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":744426,"byte_end":744459,"line_start":238,"line_end":238,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3372},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":744796,"byte_end":744805,"line_start":250,"line_end":250,"column_start":12,"column_end":21},"name":"into_rgba","qualname":"<DynamicImage>::into_rgba","value":"fn (self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":744616,"byte_end":744663,"line_start":246,"line_end":246,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":744668,"byte_end":744671,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":744676,"byte_end":744746,"line_start":248,"line_end":248,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":744751,"byte_end":744784,"line_start":249,"line_end":249,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3373},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745124,"byte_end":745132,"line_start":261,"line_end":261,"column_start":12,"column_end":20},"name":"into_bgr","qualname":"<DynamicImage>::into_bgr","value":"fn (self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGR image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGR image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":744945,"byte_end":744991,"line_start":257,"line_end":257,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":744996,"byte_end":744999,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745004,"byte_end":745074,"line_start":259,"line_end":259,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745079,"byte_end":745112,"line_start":260,"line_end":260,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3374},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745449,"byte_end":745458,"line_start":272,"line_end":272,"column_start":12,"column_end":21},"name":"into_bgra","qualname":"<DynamicImage>::into_bgra","value":"fn (self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGRA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGRA image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745269,"byte_end":745316,"line_start":268,"line_end":268,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745321,"byte_end":745324,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745329,"byte_end":745399,"line_start":270,"line_end":270,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745404,"byte_end":745437,"line_start":271,"line_end":271,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3375},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745778,"byte_end":745787,"line_start":283,"line_end":283,"column_start":12,"column_end":21},"name":"into_luma","qualname":"<DynamicImage>::into_luma","value":"fn (self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745598,"byte_end":745645,"line_start":279,"line_end":279,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745650,"byte_end":745653,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745658,"byte_end":745728,"line_start":281,"line_end":281,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745733,"byte_end":745766,"line_start":282,"line_end":282,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3376},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":746108,"byte_end":746123,"line_start":294,"line_end":294,"column_start":12,"column_end":27},"name":"into_luma_alpha","qualname":"<DynamicImage>::into_luma_alpha","value":"fn (self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745927,"byte_end":745975,"line_start":290,"line_end":290,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745980,"byte_end":745983,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":745988,"byte_end":746058,"line_start":292,"line_end":292,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":746063,"byte_end":746096,"line_start":293,"line_end":293,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3377},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":746505,"byte_end":746509,"line_start":305,"line_end":305,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":746275,"byte_end":746346,"line_start":301,"line_end":301,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":746351,"byte_end":746354,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ Note: this method does *not* modify the object,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":746359,"byte_end":746410,"line_start":303,"line_end":303,"column_start":5,"column_end":56}},{"value":"/ and its signature will be replaced with `crop_imm()`'s in the 0.24 release","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":746415,"byte_end":746493,"line_start":304,"line_end":304,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":3378},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":746766,"byte_end":746774,"line_start":310,"line_end":310,"column_start":12,"column_end":20},"name":"crop_imm","qualname":"<DynamicImage>::crop_imm","value":"fn (&self, x: u32, y: u32, width: u32, height: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":746683,"byte_end":746754,"line_start":309,"line_end":309,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3379},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":746999,"byte_end":747006,"line_start":315,"line_end":315,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"fn (&self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGB image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":746944,"byte_end":746987,"line_start":314,"line_end":314,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3380},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":747221,"byte_end":747232,"line_start":323,"line_end":323,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"fn (&mut self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGB image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":747158,"byte_end":747209,"line_start":322,"line_end":322,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3381},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":747451,"byte_end":747458,"line_start":331,"line_end":331,"column_start":12,"column_end":19},"name":"as_bgr8","qualname":"<DynamicImage>::as_bgr8","value":"fn (&self) -> Option<&BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGR image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":747396,"byte_end":747439,"line_start":330,"line_end":330,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3382},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":747673,"byte_end":747684,"line_start":339,"line_end":339,"column_start":12,"column_end":23},"name":"as_mut_bgr8","qualname":"<DynamicImage>::as_mut_bgr8","value":"fn (&mut self) -> Option<&mut BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit BGR image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":747610,"byte_end":747661,"line_start":338,"line_end":338,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3383},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":747904,"byte_end":747912,"line_start":347,"line_end":347,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"fn (&self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGBA image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":747848,"byte_end":747892,"line_start":346,"line_end":346,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3384},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":748130,"byte_end":748142,"line_start":355,"line_end":355,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"fn (&mut self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":748066,"byte_end":748118,"line_start":354,"line_end":354,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3385},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":748364,"byte_end":748372,"line_start":363,"line_end":363,"column_start":12,"column_end":20},"name":"as_bgra8","qualname":"<DynamicImage>::as_bgra8","value":"fn (&self) -> Option<&BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGRA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGRA image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":748308,"byte_end":748352,"line_start":362,"line_end":362,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3386},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":748590,"byte_end":748602,"line_start":371,"line_end":371,"column_start":12,"column_end":24},"name":"as_mut_bgra8","qualname":"<DynamicImage>::as_mut_bgra8","value":"fn (&mut self) -> Option<&mut BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":748526,"byte_end":748578,"line_start":370,"line_end":370,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3387},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":748829,"byte_end":748837,"line_start":379,"line_end":379,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"fn (&self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":748768,"byte_end":748817,"line_start":378,"line_end":378,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3388},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":749060,"byte_end":749072,"line_start":387,"line_end":387,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"fn (&mut self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":748991,"byte_end":749048,"line_start":386,"line_end":386,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3389},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":749321,"byte_end":749335,"line_start":395,"line_end":395,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"fn (&self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":749238,"byte_end":749309,"line_start":394,"line_end":394,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3390},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":749586,"byte_end":749604,"line_start":403,"line_end":403,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"fn (&mut self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":749495,"byte_end":749574,"line_start":402,"line_end":402,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3391},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":749832,"byte_end":749840,"line_start":411,"line_end":411,"column_start":12,"column_end":20},"name":"as_rgb16","qualname":"<DynamicImage>::as_rgb16","value":"fn (&self) -> Option<&Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGB image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":749776,"byte_end":749820,"line_start":410,"line_end":410,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3392},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":750059,"byte_end":750071,"line_start":419,"line_end":419,"column_start":12,"column_end":24},"name":"as_mut_rgb16","qualname":"<DynamicImage>::as_mut_rgb16","value":"fn (&mut self) -> Option<&mut Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGB image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":749995,"byte_end":750047,"line_start":418,"line_end":418,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3393},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":750295,"byte_end":750304,"line_start":427,"line_end":427,"column_start":12,"column_end":21},"name":"as_rgba16","qualname":"<DynamicImage>::as_rgba16","value":"fn (&self) -> Option<&Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGBA image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":750238,"byte_end":750283,"line_start":426,"line_end":426,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3394},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":750526,"byte_end":750539,"line_start":435,"line_end":435,"column_start":12,"column_end":25},"name":"as_mut_rgba16","qualname":"<DynamicImage>::as_mut_rgba16","value":"fn (&mut self) -> Option<&mut Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGBA image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":750461,"byte_end":750514,"line_start":434,"line_end":434,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3395},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":750770,"byte_end":750779,"line_start":443,"line_end":443,"column_start":12,"column_end":21},"name":"as_luma16","qualname":"<DynamicImage>::as_luma16","value":"fn (&self) -> Option<&Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":750708,"byte_end":750758,"line_start":442,"line_end":442,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3396},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":751006,"byte_end":751019,"line_start":451,"line_end":451,"column_start":12,"column_end":25},"name":"as_mut_luma16","qualname":"<DynamicImage>::as_mut_luma16","value":"fn (&mut self) -> Option<&mut Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":750936,"byte_end":750994,"line_start":450,"line_end":450,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3397},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":751272,"byte_end":751287,"line_start":459,"line_end":459,"column_start":12,"column_end":27},"name":"as_luma_alpha16","qualname":"<DynamicImage>::as_luma_alpha16","value":"fn (&self) -> Option<&GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":751188,"byte_end":751260,"line_start":458,"line_end":458,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3398},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":751542,"byte_end":751561,"line_start":467,"line_end":467,"column_start":12,"column_end":31},"name":"as_mut_luma_alpha16","qualname":"<DynamicImage>::as_mut_luma_alpha16","value":"fn (&mut self) -> Option<&mut GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":751450,"byte_end":751530,"line_start":466,"line_end":466,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3399},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":751820,"byte_end":751838,"line_start":475,"line_end":475,"column_start":12,"column_end":30},"name":"as_flat_samples_u8","qualname":"<DynamicImage>::as_flat_samples_u8","value":"fn (&self) -> Option<FlatSamples<&[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 8 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 8 bit per channel images.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":751736,"byte_end":751808,"line_start":474,"line_end":474,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3400},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":752472,"byte_end":752491,"line_start":488,"line_end":488,"column_start":12,"column_end":31},"name":"as_flat_samples_u16","qualname":"<DynamicImage>::as_flat_samples_u16","value":"fn (&self) -> Option<FlatSamples<&[u16]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 16 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 16 bit per channel images.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":752387,"byte_end":752460,"line_start":487,"line_end":487,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3401},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":752958,"byte_end":752966,"line_start":499,"line_end":499,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<DynamicImage>::to_bytes","value":"fn (&self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a byte vector.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":752898,"byte_end":752946,"line_start":498,"line_end":498,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3402},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":753074,"byte_end":753079,"line_start":504,"line_end":504,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"fn (&self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[{"value":"/ Return this image's color type.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":753027,"byte_end":753062,"line_start":503,"line_end":503,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3403},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":753883,"byte_end":753892,"line_start":520,"line_end":520,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n","sig":null,"attributes":[{"value":"/ Return a grayscale version of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":753826,"byte_end":753871,"line_start":519,"line_end":519,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3404},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":754998,"byte_end":755004,"line_start":537,"line_end":537,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[{"value":"/ Invert the colors of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":754912,"byte_end":754948,"line_start":535,"line_end":535,"column_start":5,"column_end":41}},{"value":"/ This method operates inplace.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":754953,"byte_end":754986,"line_start":536,"line_end":536,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3405},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":755368,"byte_end":755374,"line_start":545,"line_end":545,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"fn (&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":755091,"byte_end":755150,"line_start":541,"line_end":541,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":755155,"byte_end":755218,"line_start":542,"line_end":542,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":755223,"byte_end":755285,"line_start":543,"line_end":543,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":755290,"byte_end":755356,"line_start":544,"line_end":544,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":3406},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":755838,"byte_end":755850,"line_start":555,"line_end":555,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"fn (&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":755636,"byte_end":755695,"line_start":552,"line_end":552,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":755700,"byte_end":755756,"line_start":553,"line_end":553,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":755761,"byte_end":755826,"line_start":554,"line_end":554,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3407},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":756541,"byte_end":756550,"line_start":572,"line_end":572,"column_start":12,"column_end":21},"name":"thumbnail","qualname":"<DynamicImage>::thumbnail","value":"fn (&self, nwidth: u32, nheight: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to fit within a specific size.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.","sig":null,"attributes":[{"value":"/ Scale this image down to fit within a specific size.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":756066,"byte_end":756122,"line_start":564,"line_end":564,"column_start":5,"column_end":61}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":756127,"byte_end":756190,"line_start":565,"line_end":565,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":756195,"byte_end":756257,"line_start":566,"line_end":566,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":756262,"byte_end":756328,"line_start":567,"line_end":567,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":756333,"byte_end":756336,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":756341,"byte_end":756404,"line_start":569,"line_end":569,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":756409,"byte_end":756459,"line_start":570,"line_end":570,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":756464,"byte_end":756529,"line_start":571,"line_end":571,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3408},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":757158,"byte_end":757173,"line_start":584,"line_end":584,"column_start":12,"column_end":27},"name":"thumbnail_exact","qualname":"<DynamicImage>::thumbnail_exact","value":"fn (&self, nwidth: u32, nheight: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to a specific size.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions.\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[{"value":"/ Scale this image down to a specific size.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":756776,"byte_end":756821,"line_start":578,"line_end":578,"column_start":5,"column_end":50}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":756826,"byte_end":756882,"line_start":579,"line_end":579,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":756887,"byte_end":756953,"line_start":580,"line_end":580,"column_start":5,"column_end":71}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":756958,"byte_end":757021,"line_start":581,"line_end":581,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":757026,"byte_end":757076,"line_start":582,"line_end":582,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":757081,"byte_end":757146,"line_start":583,"line_end":583,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3409},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":757693,"byte_end":757707,"line_start":594,"line_end":594,"column_start":12,"column_end":26},"name":"resize_to_fill","qualname":"<DynamicImage>::resize_to_fill","value":"fn (&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the larger (relative to aspect ratio) of the bounds\n specified by ```nwidth``` and ```nheight```, then cropped to\n fit within the other bound.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":757315,"byte_end":757374,"line_start":588,"line_end":588,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":757379,"byte_end":757442,"line_start":589,"line_end":589,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":757447,"byte_end":757509,"line_start":590,"line_end":590,"column_start":5,"column_end":67}},{"value":"/ within the larger (relative to aspect ratio) of the bounds","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":757514,"byte_end":757576,"line_start":591,"line_end":591,"column_start":5,"column_end":67}},{"value":"/ specified by ```nwidth``` and ```nheight```, then cropped to","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":757581,"byte_end":757645,"line_start":592,"line_end":592,"column_start":5,"column_end":69}},{"value":"/ fit within the other bound.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":757650,"byte_end":757681,"line_start":593,"line_end":593,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":3410},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":758527,"byte_end":758531,"line_start":617,"line_end":617,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"fn (&self, sigma: f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":758415,"byte_end":758458,"line_start":615,"line_end":615,"column_start":5,"column_end":48}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":758463,"byte_end":758515,"line_start":616,"line_end":616,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3411},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":758909,"byte_end":758918,"line_start":626,"line_end":626,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"fn (&self, sigma: f32, threshold: i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is a control of how much to sharpen.","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":758643,"byte_end":758688,"line_start":621,"line_end":621,"column_start":5,"column_end":50}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":758693,"byte_end":758744,"line_start":622,"line_end":622,"column_start":5,"column_end":56}},{"value":"/ ```threshold``` is a control of how much to sharpen.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":758749,"byte_end":758805,"line_start":623,"line_end":623,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":758810,"byte_end":758813,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":758818,"byte_end":758897,"line_start":625,"line_end":625,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3412},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":759127,"byte_end":759136,"line_start":631,"line_end":631,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"fn (&self, kernel: &[f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[{"value":"/ Filters this image with the specified 3x3 kernel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":759062,"byte_end":759115,"line_start":630,"line_end":630,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3413},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":759546,"byte_end":759561,"line_start":642,"line_end":642,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"fn (&self, c: f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":759343,"byte_end":759381,"line_start":639,"line_end":639,"column_start":5,"column_end":43}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":759386,"byte_end":759445,"line_start":640,"line_end":640,"column_start":5,"column_end":64}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":759450,"byte_end":759534,"line_start":641,"line_end":641,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3414},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":759861,"byte_end":759869,"line_start":649,"line_end":649,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"fn (&self, value: i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the pixels of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":759669,"byte_end":759707,"line_start":646,"line_end":646,"column_start":5,"column_end":43}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":759712,"byte_end":759768,"line_start":647,"line_end":647,"column_start":5,"column_end":61}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":759773,"byte_end":759849,"line_start":648,"line_end":648,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3415},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":760217,"byte_end":760226,"line_start":657,"line_end":657,"column_start":12,"column_end":21},"name":"huerotate","qualname":"<DynamicImage>::huerotate","value":"fn (&self, value: i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":759985,"byte_end":760019,"line_start":653,"line_end":653,"column_start":5,"column_end":39}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":760024,"byte_end":760075,"line_start":654,"line_end":654,"column_start":5,"column_end":56}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":760080,"byte_end":760149,"line_start":655,"line_end":655,"column_start":5,"column_end":74}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":760154,"byte_end":760205,"line_start":656,"line_end":656,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3416},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":760385,"byte_end":760390,"line_start":662,"line_end":662,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[{"value":"/ Flip this image vertically","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":760343,"byte_end":760373,"line_start":661,"line_end":661,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3417},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":760536,"byte_end":760541,"line_start":667,"line_end":667,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[{"value":"/ Flip this image horizontally","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":760492,"byte_end":760524,"line_start":666,"line_end":666,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3418},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":760700,"byte_end":760708,"line_start":672,"line_end":672,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 90 degrees clockwise.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":760645,"byte_end":760688,"line_start":671,"line_end":671,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3419},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":760861,"byte_end":760870,"line_start":677,"line_end":677,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 180 degrees clockwise.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":760805,"byte_end":760849,"line_start":676,"line_end":676,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3420},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":761024,"byte_end":761033,"line_start":682,"line_end":682,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 270 degrees clockwise.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":760968,"byte_end":761012,"line_start":681,"line_end":681,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3421},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":761188,"byte_end":761196,"line_start":687,"line_end":687,"column_start":12,"column_end":20},"name":"write_to","qualname":"<DynamicImage>::write_to","value":"fn <W, F> (&self, w: &mut W, format: F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```\n","sig":null,"attributes":[{"value":"/ Encode this image and write it to ```w```","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":761131,"byte_end":761176,"line_start":686,"line_end":686,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3424},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":764702,"byte_end":764706,"line_start":781,"line_end":781,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"fn <Q> (&self, path: Q) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":764568,"byte_end":764621,"line_start":778,"line_end":778,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":764626,"byte_end":764629,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":764634,"byte_end":764690,"line_start":780,"line_end":780,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3426},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":765078,"byte_end":765094,"line_start":795,"line_end":795,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<DynamicImage>::save_with_format","value":"fn <Q> (&self, path: Q, format: ImageFormat) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":764871,"byte_end":764926,"line_start":790,"line_end":790,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":764931,"byte_end":764956,"line_start":791,"line_end":791,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":764961,"byte_end":764964,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":764969,"byte_end":765041,"line_start":793,"line_end":793,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":765046,"byte_end":765066,"line_start":794,"line_end":794,"column_start":5,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":3446},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":771956,"byte_end":771960,"line_start":973,"line_end":973,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"fn <P> (path: P) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.","sig":null,"attributes":[{"value":"/ Open the image located at the path specified.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":771654,"byte_end":771703,"line_start":966,"line_end":966,"column_start":1,"column_end":50}},{"value":"/ The image's format is determined from the path's file extension.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":771704,"byte_end":771772,"line_start":967,"line_end":967,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":771773,"byte_end":771776,"line_start":968,"line_end":968,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":771777,"byte_end":771873,"line_start":969,"line_end":969,"column_start":1,"column_end":97}},{"value":"/ content before its path.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":771874,"byte_end":771902,"line_start":970,"line_end":970,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":771903,"byte_end":771906,"line_start":971,"line_end":971,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":771907,"byte_end":771948,"line_start":972,"line_end":972,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":3448},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":772515,"byte_end":772531,"line_start":988,"line_end":988,"column_start":8,"column_end":24},"name":"image_dimensions","qualname":"::dynimage::image_dimensions","value":"fn <P> (path: P) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the dimensions of the image located at the specified path.\n This is faster than fully loading the image and then getting its dimensions.","sig":null,"attributes":[{"value":"/ Read the dimensions of the image located at the specified path.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":772150,"byte_end":772217,"line_start":981,"line_end":981,"column_start":1,"column_end":68}},{"value":"/ This is faster than fully loading the image and then getting its dimensions.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":772218,"byte_end":772298,"line_start":982,"line_end":982,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":772299,"byte_end":772302,"line_start":983,"line_end":983,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":772303,"byte_end":772399,"line_start":984,"line_end":984,"column_start":1,"column_end":97}},{"value":"/ content before its path or manually supplying the format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":772400,"byte_end":772461,"line_start":985,"line_end":985,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":772462,"byte_end":772465,"line_start":986,"line_end":986,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":772466,"byte_end":772507,"line_start":987,"line_end":987,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":3450},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":773106,"byte_end":773117,"line_start":1003,"line_end":1003,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"fn <P> (path: P, buf: &[u8], width: u32, height: u32, color: color::ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":772731,"byte_end":772793,"line_start":996,"line_end":996,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":772794,"byte_end":772797,"line_start":997,"line_end":997,"column_start":1,"column_end":4}},{"value":"/ The image format is derived from the file extension. The buffer is assumed to have","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":772798,"byte_end":772884,"line_start":998,"line_end":998,"column_start":1,"column_end":87}},{"value":"/ the correct format according to the specified color type.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":772885,"byte_end":772946,"line_start":999,"line_end":999,"column_start":1,"column_end":62}},{"value":"/ This will lead to corrupted files if the buffer contains malformed data. Currently only","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":772948,"byte_end":773039,"line_start":1001,"line_end":1001,"column_start":1,"column_end":92}},{"value":"/ jpeg, png, ico, pnm, bmp and tiff files are supported.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":773040,"byte_end":773098,"line_start":1002,"line_end":1002,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":3452},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":773771,"byte_end":773794,"line_start":1025,"line_end":1025,"column_start":8,"column_end":31},"name":"save_buffer_with_format","qualname":"::dynimage::save_buffer_with_format","value":"fn <P> (path: P, buf: &[u8], width: u32, height: u32, color: color::ColorType, format: ImageFormat) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified\n in the specified format.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":773423,"byte_end":773484,"line_start":1017,"line_end":1017,"column_start":1,"column_end":62}},{"value":"/ in the specified format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":773485,"byte_end":773513,"line_start":1018,"line_end":1018,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":773514,"byte_end":773517,"line_start":1019,"line_end":1019,"column_start":1,"column_end":4}},{"value":"/ The buffer is assumed to have the correct format according","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":773518,"byte_end":773580,"line_start":1020,"line_end":1020,"column_start":1,"column_end":63}},{"value":"/ to the specified color type.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":773581,"byte_end":773613,"line_start":1021,"line_end":1021,"column_start":1,"column_end":33}},{"value":"/ This will lead to corrupted files if the buffer contains","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":773614,"byte_end":773674,"line_start":1022,"line_end":1022,"column_start":1,"column_end":61}},{"value":"/ malformed data. Currently only jpeg, png, ico, bmp and","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":773675,"byte_end":773733,"line_start":1023,"line_end":1023,"column_start":1,"column_end":59}},{"value":"/ tiff files are supported.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":773734,"byte_end":773763,"line_start":1024,"line_end":1024,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":3454},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774357,"byte_end":774373,"line_start":1048,"line_end":1048,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"fn (buffer: &[u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774113,"byte_end":774153,"line_start":1040,"line_end":1040,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774154,"byte_end":774157,"line_start":1041,"line_end":1041,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774158,"byte_end":774209,"line_start":1042,"line_end":1042,"column_start":1,"column_end":52}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774210,"byte_end":774252,"line_start":1043,"line_end":1043,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774253,"byte_end":774256,"line_start":1044,"line_end":1044,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774257,"byte_end":774303,"line_start":1045,"line_end":1045,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774304,"byte_end":774307,"line_start":1046,"line_end":1046,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774308,"byte_end":774349,"line_start":1047,"line_end":1047,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":3455},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774855,"byte_end":774883,"line_start":1063,"line_end":1063,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"fn (buf: &[u8], format: ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774528,"byte_end":774568,"line_start":1053,"line_end":1053,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774569,"byte_end":774572,"line_start":1054,"line_end":1054,"column_start":1,"column_end":4}},{"value":"/ This is just a simple wrapper that constructs an `std::io::Cursor` around the buffer and then","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774573,"byte_end":774670,"line_start":1055,"line_end":1055,"column_start":1,"column_end":98}},{"value":"/ calls `load` with that reader.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774671,"byte_end":774705,"line_start":1056,"line_end":1056,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774706,"byte_end":774709,"line_start":1057,"line_end":1057,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774710,"byte_end":774756,"line_start":1058,"line_end":1058,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774757,"byte_end":774760,"line_start":1059,"line_end":1059,"column_start":1,"column_end":4}},{"value":"/ [`load`]: fn.load.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774761,"byte_end":774787,"line_start":1060,"line_end":1060,"column_start":1,"column_end":27}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774788,"byte_end":774829,"line_start":1061,"line_end":1061,"column_start":1,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":774830,"byte_end":774847,"line_start":1062,"line_end":1062,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5722},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779606,"byte_end":779609,"line_start":25,"line_end":25,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageFormat::Png","value":"ImageFormat::Png","parent":{"krate":0,"index":5721},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"/ An Image in PNG Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779575,"byte_end":779601,"line_start":24,"line_end":24,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5724},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779648,"byte_end":779652,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageFormat::Jpeg","value":"ImageFormat::Jpeg","parent":{"krate":0,"index":5721},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[{"value":"/ An Image in JPEG Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779616,"byte_end":779643,"line_start":27,"line_end":27,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5726},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779690,"byte_end":779693,"line_start":31,"line_end":31,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageFormat::Gif","value":"ImageFormat::Gif","parent":{"krate":0,"index":5721},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"/ An Image in GIF Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779659,"byte_end":779685,"line_start":30,"line_end":30,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5728},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779732,"byte_end":779736,"line_start":34,"line_end":34,"column_start":5,"column_end":9},"name":"WebP","qualname":"::image::ImageFormat::WebP","value":"ImageFormat::WebP","parent":{"krate":0,"index":5721},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[{"value":"/ An Image in WEBP Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779700,"byte_end":779727,"line_start":33,"line_end":33,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5730},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779782,"byte_end":779785,"line_start":37,"line_end":37,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageFormat::Pnm","value":"ImageFormat::Pnm","parent":{"krate":0,"index":5721},"children":[],"decl_id":null,"docs":" An Image in general PNM Format\n","sig":null,"attributes":[{"value":"/ An Image in general PNM Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779743,"byte_end":779777,"line_start":36,"line_end":36,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5732},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779824,"byte_end":779828,"line_start":40,"line_end":40,"column_start":5,"column_end":9},"name":"Tiff","qualname":"::image::ImageFormat::Tiff","value":"ImageFormat::Tiff","parent":{"krate":0,"index":5721},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[{"value":"/ An Image in TIFF Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779792,"byte_end":779819,"line_start":39,"line_end":39,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5734},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779866,"byte_end":779869,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"Tga","qualname":"::image::ImageFormat::Tga","value":"ImageFormat::Tga","parent":{"krate":0,"index":5721},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"/ An Image in TGA Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779835,"byte_end":779861,"line_start":42,"line_end":42,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5736},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779907,"byte_end":779910,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"Dds","qualname":"::image::ImageFormat::Dds","value":"ImageFormat::Dds","parent":{"krate":0,"index":5721},"children":[],"decl_id":null,"docs":" An Image in DDS Format\n","sig":null,"attributes":[{"value":"/ An Image in DDS Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779876,"byte_end":779902,"line_start":45,"line_end":45,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5738},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779948,"byte_end":779951,"line_start":49,"line_end":49,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageFormat::Bmp","value":"ImageFormat::Bmp","parent":{"krate":0,"index":5721},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"/ An Image in BMP Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779917,"byte_end":779943,"line_start":48,"line_end":48,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5740},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779989,"byte_end":779992,"line_start":52,"line_end":52,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageFormat::Ico","value":"ImageFormat::Ico","parent":{"krate":0,"index":5721},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"/ An Image in ICO Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779958,"byte_end":779984,"line_start":51,"line_end":51,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5742},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780039,"byte_end":780042,"line_start":55,"line_end":55,"column_start":5,"column_end":8},"name":"Hdr","qualname":"::image::ImageFormat::Hdr","value":"ImageFormat::Hdr","parent":{"krate":0,"index":5721},"children":[],"decl_id":null,"docs":" An Image in Radiance HDR Format\n","sig":null,"attributes":[{"value":"/ An Image in Radiance HDR Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779999,"byte_end":780034,"line_start":54,"line_end":54,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5744},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780085,"byte_end":780093,"line_start":58,"line_end":58,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageFormat::Farbfeld","value":"ImageFormat::Farbfeld","parent":{"krate":0,"index":5721},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"/ An Image in farbfeld Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780049,"byte_end":780080,"line_start":57,"line_end":57,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5746},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780119,"byte_end":780134,"line_start":61,"line_end":61,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageFormat::__NonExhaustive","value":"ImageFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":5721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5721},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779557,"byte_end":779568,"line_start":23,"line_end":23,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"ImageFormat::{Png, Jpeg, Gif, WebP, Pnm, Tiff, Tga, Dds, Bmp, Ico, Hdr, Farbfeld, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":5722},{"krate":0,"index":5724},{"krate":0,"index":5726},{"krate":0,"index":5728},{"krate":0,"index":5730},{"krate":0,"index":5732},{"krate":0,"index":5734},{"krate":0,"index":5736},{"krate":0,"index":5738},{"krate":0,"index":5740},{"krate":0,"index":5742},{"krate":0,"index":5744},{"krate":0,"index":5746}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779394,"byte_end":779440,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/ Not all formats support both encoding and decoding.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":779441,"byte_end":779496,"line_start":21,"line_end":21,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3482},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780276,"byte_end":780285,"line_start":66,"line_end":66,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ImageFormat>::from_path","value":"fn <P> (path: P) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by the path's file extension.\n","sig":null,"attributes":[{"value":"/ Return the image format specified by the path's file extension.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780197,"byte_end":780264,"line_start":65,"line_end":65,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5765},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780735,"byte_end":780738,"line_start":78,"line_end":78,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageOutputFormat::Png","value":"ImageOutputFormat::Png","parent":{"krate":0,"index":5764},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780676,"byte_end":780699,"line_start":76,"line_end":76,"column_start":5,"column_end":28}},{"value":"/ An Image in PNG Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780704,"byte_end":780730,"line_start":77,"line_end":77,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5767},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780829,"byte_end":780833,"line_start":82,"line_end":82,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageOutputFormat::Jpeg","value":"ImageOutputFormat::Jpeg(u8)","parent":{"krate":0,"index":5764},"children":[],"decl_id":null,"docs":" An Image in JPEG Format with specified quality\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780745,"byte_end":780769,"line_start":80,"line_end":80,"column_start":5,"column_end":29}},{"value":"/ An Image in JPEG Format with specified quality","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780774,"byte_end":780824,"line_start":81,"line_end":81,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5770},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780915,"byte_end":780918,"line_start":86,"line_end":86,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageOutputFormat::Pnm","value":"ImageOutputFormat::Pnm(PNMSubtype)","parent":{"krate":0,"index":5764},"children":[],"decl_id":null,"docs":" An Image in one of the PNM Formats\n","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780844,"byte_end":780867,"line_start":84,"line_end":84,"column_start":5,"column_end":28}},{"value":"/ An Image in one of the PNM Formats","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780872,"byte_end":780910,"line_start":85,"line_end":85,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5773},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780996,"byte_end":780999,"line_start":90,"line_end":90,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageOutputFormat::Gif","value":"ImageOutputFormat::Gif","parent":{"krate":0,"index":5764},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"gif\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780937,"byte_end":780960,"line_start":88,"line_end":88,"column_start":5,"column_end":28}},{"value":"/ An Image in GIF Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780965,"byte_end":780991,"line_start":89,"line_end":89,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5775},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":781065,"byte_end":781068,"line_start":94,"line_end":94,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageOutputFormat::Ico","value":"ImageOutputFormat::Ico","parent":{"krate":0,"index":5764},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":781006,"byte_end":781029,"line_start":92,"line_end":92,"column_start":5,"column_end":28}},{"value":"/ An Image in ICO Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":781034,"byte_end":781060,"line_start":93,"line_end":93,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5777},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":781134,"byte_end":781137,"line_start":98,"line_end":98,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageOutputFormat::Bmp","value":"ImageOutputFormat::Bmp","parent":{"krate":0,"index":5764},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":781075,"byte_end":781098,"line_start":96,"line_end":96,"column_start":5,"column_end":28}},{"value":"/ An Image in BMP Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":781103,"byte_end":781129,"line_start":97,"line_end":97,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5779},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":781213,"byte_end":781221,"line_start":102,"line_end":102,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageOutputFormat::Farbfeld","value":"ImageOutputFormat::Farbfeld","parent":{"krate":0,"index":5764},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"farbfeld\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":781144,"byte_end":781172,"line_start":100,"line_end":100,"column_start":5,"column_end":33}},{"value":"/ An Image in farbfeld Format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":781177,"byte_end":781208,"line_start":101,"line_end":101,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5781},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":781473,"byte_end":781484,"line_start":107,"line_end":107,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ImageOutputFormat::Unsupported","value":"ImageOutputFormat::Unsupported(String)","parent":{"krate":0,"index":5764},"children":[],"decl_id":null,"docs":" A value for signalling an error: An unsupported format was requested\n","sig":null,"attributes":[{"value":"/ A value for signalling an error: An unsupported format was requested","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":781228,"byte_end":781300,"line_start":104,"line_end":104,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5784},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":781518,"byte_end":781533,"line_start":110,"line_end":110,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageOutputFormat::__NonExhaustive","value":"ImageOutputFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":5764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5764},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780652,"byte_end":780669,"line_start":75,"line_end":75,"column_start":10,"column_end":27},"name":"ImageOutputFormat","qualname":"::image::ImageOutputFormat","value":"ImageOutputFormat::{Png, Jpeg, Pnm, Gif, Ico, Bmp, Farbfeld, Unsupported, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":5765},{"krate":0,"index":5767},{"krate":0,"index":5770},{"krate":0,"index":5773},{"krate":0,"index":5775},{"krate":0,"index":5777},{"krate":0,"index":5779},{"krate":0,"index":5781},{"krate":0,"index":5784}],"decl_id":null,"docs":" An enumeration of supported image formats for encoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats for encoding.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780544,"byte_end":780603,"line_start":73,"line_end":73,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5798},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790365,"byte_end":790373,"line_start":319,"line_end":319,"column_start":12,"column_end":20},"name":"Progress","qualname":"::image::Progress","value":"Progress {  }","parent":null,"children":[{"krate":0,"index":5799},{"krate":0,"index":5800}],"decl_id":null,"docs":" Represents the progress of an image operation.","sig":null,"attributes":[{"value":"/ Represents the progress of an image operation.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":789961,"byte_end":790011,"line_start":313,"line_end":313,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790012,"byte_end":790015,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ Note that this is not necessarily accurate and no change to the values passed to the progress","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790016,"byte_end":790113,"line_start":315,"line_end":315,"column_start":1,"column_end":98}},{"value":"/ function during decoding will be considered breaking. A decoder could in theory report the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790114,"byte_end":790208,"line_start":316,"line_end":316,"column_start":1,"column_end":95}},{"value":"/ progress `(0, 0)` if progress is unknown, without violating the interface contract of the type.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790209,"byte_end":790308,"line_start":317,"line_end":317,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":3509},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790481,"byte_end":790488,"line_start":326,"line_end":326,"column_start":12,"column_end":19},"name":"current","qualname":"<Progress>::current","value":"fn (self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of completed decoding.\n","sig":null,"attributes":[{"value":"/ A measure of completed decoding.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790433,"byte_end":790469,"line_start":325,"line_end":325,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":3510},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790661,"byte_end":790666,"line_start":333,"line_end":333,"column_start":12,"column_end":17},"name":"total","qualname":"<Progress>::total","value":"fn (self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of all necessary decoding work.","sig":null,"attributes":[{"value":"/ A measure of all necessary decoding work.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790536,"byte_end":790581,"line_start":330,"line_end":330,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790586,"byte_end":790589,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ This is in general greater or equal than `current`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790594,"byte_end":790649,"line_start":332,"line_end":332,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3511},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790776,"byte_end":790785,"line_start":338,"line_end":338,"column_start":12,"column_end":21},"name":"remaining","qualname":"<Progress>::remaining","value":"fn (self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a measure for remaining decoding work.\n","sig":null,"attributes":[{"value":"/ Calculate a measure for remaining decoding work.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790712,"byte_end":790764,"line_start":337,"line_end":337,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":3512},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790914,"byte_end":790926,"line_start":344,"line_end":344,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder<'a>: Sized","parent":null,"children":[{"krate":0,"index":3514},{"krate":0,"index":3515},{"krate":0,"index":3516},{"krate":0,"index":3517},{"krate":0,"index":3518},{"krate":0,"index":3519},{"krate":0,"index":3520},{"krate":0,"index":3521},{"krate":0,"index":3523}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[{"value":"/ The trait that all decoders implement","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790862,"byte_end":790903,"line_start":343,"line_end":343,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":3514},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791003,"byte_end":791009,"line_start":346,"line_end":346,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::ImageDecoder::Reader","value":"type Reader: Read + 'a;","parent":{"krate":0,"index":3512},"children":[],"decl_id":null,"docs":" The type of reader produced by `into_reader`.\n","sig":null,"attributes":[{"value":"/ The type of reader produced by `into_reader`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790944,"byte_end":790993,"line_start":345,"line_end":345,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3515},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791099,"byte_end":791109,"line_start":349,"line_end":349,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"fn (&self) -> (u32, u32)","parent":{"krate":0,"index":3512},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[{"value":"/ Returns a tuple containing the width and height of the image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791027,"byte_end":791091,"line_start":348,"line_end":348,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3516},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791214,"byte_end":791224,"line_start":352,"line_end":352,"column_start":8,"column_end":18},"name":"color_type","qualname":"::image::ImageDecoder::color_type","value":"fn (&self) -> ColorType","parent":{"krate":0,"index":3512},"children":[],"decl_id":null,"docs":" Returns the color type of the image data produced by this decoder\n","sig":null,"attributes":[{"value":"/ Returns the color type of the image data produced by this decoder","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791137,"byte_end":791206,"line_start":351,"line_end":351,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3517},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791318,"byte_end":791337,"line_start":355,"line_end":355,"column_start":8,"column_end":27},"name":"original_color_type","qualname":"::image::ImageDecoder::original_color_type","value":"fn (&self) -> ExtendedColorType","parent":{"krate":0,"index":3512},"children":[],"decl_id":null,"docs":" Retuns the color type of the image file before decoding\n","sig":null,"attributes":[{"value":"/ Retuns the color type of the image file before decoding","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791251,"byte_end":791310,"line_start":354,"line_end":354,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3518},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791678,"byte_end":791689,"line_start":362,"line_end":362,"column_start":8,"column_end":19},"name":"into_reader","qualname":"::image::ImageDecoder::into_reader","value":"fn (self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":3512},"children":[],"decl_id":null,"docs":" Returns a reader that can be used to obtain the bytes of the image. For the best\n performance, always try to read at least `scanline_bytes` from the reader at a time. Reading\n fewer bytes will cause the reader to perform internal buffering.\n","sig":null,"attributes":[{"value":"/ Returns a reader that can be used to obtain the bytes of the image. For the best","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791412,"byte_end":791496,"line_start":359,"line_end":359,"column_start":5,"column_end":89}},{"value":"/ performance, always try to read at least `scanline_bytes` from the reader at a time. Reading","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791501,"byte_end":791597,"line_start":360,"line_end":360,"column_start":5,"column_end":101}},{"value":"/ fewer bytes will cause the reader to perform internal buffering.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791602,"byte_end":791670,"line_start":361,"line_end":361,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3519},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":792076,"byte_end":792087,"line_start":370,"line_end":370,"column_start":8,"column_end":19},"name":"total_bytes","qualname":"::image::ImageDecoder::total_bytes","value":"fn (&self) -> u64","parent":{"krate":0,"index":3512},"children":[],"decl_id":null,"docs":" Returns the total number of bytes in the decoded image.","sig":null,"attributes":[{"value":"/ Returns the total number of bytes in the decoded image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791731,"byte_end":791790,"line_start":364,"line_end":364,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791795,"byte_end":791798,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ This is the size of the buffer that must be passed to `read_image` or","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791803,"byte_end":791876,"line_start":366,"line_end":366,"column_start":5,"column_end":78}},{"value":"/ `read_image_with_progress`. The returned value may exceed usize::MAX, in","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791881,"byte_end":791957,"line_start":367,"line_end":367,"column_start":5,"column_end":81}},{"value":"/ which case it isn't actually possible to construct a buffer to decode all the image data","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":791962,"byte_end":792054,"line_start":368,"line_end":368,"column_start":5,"column_end":97}},{"value":"/ into.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":792059,"byte_end":792068,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3520},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":792424,"byte_end":792438,"line_start":377,"line_end":377,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"::image::ImageDecoder::scanline_bytes","value":"fn (&self) -> u64","parent":{"krate":0,"index":3512},"children":[],"decl_id":null,"docs":" Returns the minimum number of bytes that can be efficiently read from this decoder. This may\n be as few as 1 or as many as `total_bytes()`.\n","sig":null,"attributes":[{"value":"/ Returns the minimum number of bytes that can be efficiently read from this decoder. This may","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":792266,"byte_end":792362,"line_start":375,"line_end":375,"column_start":5,"column_end":101}},{"value":"/ be as few as 1 or as many as `total_bytes()`.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":792367,"byte_end":792416,"line_start":376,"line_end":376,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3521},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":793327,"byte_end":793337,"line_start":401,"line_end":401,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"fn (self, buf: &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":3512},"children":[],"decl_id":null,"docs":" Returns all the bytes in the image.","sig":null,"attributes":[{"value":"/ Returns all the bytes in the image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":792493,"byte_end":792532,"line_start":381,"line_end":381,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":792537,"byte_end":792540,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes and writes the pixel data of the image into it.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":792545,"byte_end":792633,"line_start":383,"line_end":383,"column_start":5,"column_end":93}},{"value":"/ Although not required, for certain color types callers may want to pass buffers which are","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":792638,"byte_end":792731,"line_start":384,"line_end":384,"column_start":5,"column_end":98}},{"value":"/ aligned to 2 or 4 byte boundaries to the slice can be cast to a [u16] or [u32]. To accommodate","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":792736,"byte_end":792834,"line_start":385,"line_end":385,"column_start":5,"column_end":103}},{"value":"/ such casts, the returned contents will always be in native endian.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":792839,"byte_end":792909,"line_start":386,"line_end":386,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":792914,"byte_end":792917,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":792922,"byte_end":792934,"line_start":388,"line_end":388,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":792939,"byte_end":792942,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ This function panics if buf.len() != self.total_bytes().","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":792947,"byte_end":793007,"line_start":390,"line_end":390,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":793012,"byte_end":793015,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":793020,"byte_end":793034,"line_start":392,"line_end":392,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":793039,"byte_end":793042,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ ```no_build","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":793047,"byte_end":793062,"line_start":394,"line_end":394,"column_start":5,"column_end":20}},{"value":"/ use zerocopy::{AsBytes, FromBytes};","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":793067,"byte_end":793106,"line_start":395,"line_end":395,"column_start":5,"column_end":44}},{"value":"/ fn read_16bit_image(decoder: impl ImageDecoder) -> Vec<16> {","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":793111,"byte_end":793175,"line_start":396,"line_end":396,"column_start":5,"column_end":69}},{"value":"/     let mut buf: Vec<u16> = vec![0; decoder.total_bytes()/2];","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":793180,"byte_end":793245,"line_start":397,"line_end":397,"column_start":5,"column_end":70}},{"value":"/     decoder.read_image(buf.as_bytes());","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":793250,"byte_end":793293,"line_start":398,"line_end":398,"column_start":5,"column_end":48}},{"value":"/     buf","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":793298,"byte_end":793309,"line_start":399,"line_end":399,"column_start":5,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":793314,"byte_end":793319,"line_start":400,"line_end":400,"column_start":5,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":3523},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":793565,"byte_end":793589,"line_start":407,"line_end":407,"column_start":8,"column_end":32},"name":"read_image_with_progress","qualname":"::image::ImageDecoder::read_image_with_progress","value":"fn <F> (self, buf: &mut [u8], progress_callback: F) -> ImageResult<()>","parent":{"krate":0,"index":3512},"children":[],"decl_id":null,"docs":" Same as `read_image` but periodically calls the provided callback to give updates on loading\n progress.\n","sig":null,"attributes":[{"value":"/ Same as `read_image` but periodically calls the provided callback to give updates on loading","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":793443,"byte_end":793539,"line_start":405,"line_end":405,"column_start":5,"column_end":101}},{"value":"/ progress.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":793544,"byte_end":793557,"line_start":406,"line_end":406,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":3525},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":794612,"byte_end":794627,"line_start":441,"line_end":441,"column_start":11,"column_end":26},"name":"ImageDecoderExt","qualname":"::image::ImageDecoderExt","value":"ImageDecoderExt<'a>: ImageDecoder<'a> + Sized","parent":null,"children":[{"krate":0,"index":3527},{"krate":0,"index":3529}],"decl_id":null,"docs":" Specialized image decoding not be supported by all formats\n","sig":null,"attributes":[{"value":"/ Specialized image decoding not be supported by all formats","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":794539,"byte_end":794601,"line_start":440,"line_end":440,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3527},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":794782,"byte_end":794791,"line_start":443,"line_end":443,"column_start":8,"column_end":17},"name":"read_rect","qualname":"::image::ImageDecoderExt::read_rect","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32, buf: &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":3525},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).\n","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":794664,"byte_end":794774,"line_start":442,"line_end":442,"column_start":5,"column_end":115}}]},{"kind":"Method","id":{"krate":0,"index":3529},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":795733,"byte_end":795756,"line_start":466,"line_end":466,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"::image::ImageDecoderExt::read_rect_with_progress","value":"fn <F> (&mut self, x: u32, y: u32, width: u32, height: u32, buf: &mut [u8], progress_callback: F) -> ImageResult<()>","parent":{"krate":0,"index":3525},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image, periodically reporting progress.","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image, periodically reporting progress.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":795017,"byte_end":795096,"line_start":454,"line_end":454,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":795101,"byte_end":795104,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ The output buffer will be filled with fields specified by","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":795109,"byte_end":795170,"line_start":456,"line_end":456,"column_start":5,"column_end":66}},{"value":"/ [`ImageDecoder::color_type()`](trait.ImageDecoder.html#fn.color_type),","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":795175,"byte_end":795249,"line_start":457,"line_end":457,"column_start":5,"column_end":79}},{"value":"/ in that order, each field represented in native-endian.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":795254,"byte_end":795313,"line_start":458,"line_end":458,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":795318,"byte_end":795321,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ The progress callback will be called at least once at the start and the end of decoding,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":795326,"byte_end":795418,"line_start":460,"line_end":460,"column_start":5,"column_end":97}},{"value":"/ implementations are encouraged to call this more often,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":795423,"byte_end":795482,"line_start":461,"line_end":461,"column_start":5,"column_end":64}},{"value":"/ with a frequency meaningful for display to the end-user.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":795487,"byte_end":795547,"line_start":462,"line_end":462,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":795552,"byte_end":795555,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the output buffer isn't at least","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":795560,"byte_end":795624,"line_start":464,"line_end":464,"column_start":5,"column_end":69}},{"value":"/ `color_type().bytes_per_pixel() * color_type().channel_count() * width * height` bytes long.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":795629,"byte_end":795725,"line_start":465,"line_end":465,"column_start":5,"column_end":101}}]},{"kind":"Trait","id":{"krate":0,"index":3531},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":795987,"byte_end":796003,"line_start":478,"line_end":478,"column_start":11,"column_end":27},"name":"AnimationDecoder","qualname":"::image::AnimationDecoder","value":"AnimationDecoder<'a>","parent":null,"children":[{"krate":0,"index":3533}],"decl_id":null,"docs":" AnimationDecoder trait\n","sig":null,"attributes":[{"value":"/ AnimationDecoder trait","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":795950,"byte_end":795976,"line_start":477,"line_end":477,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3533},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796075,"byte_end":796086,"line_start":480,"line_end":480,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::AnimationDecoder::into_frames","value":"fn (self) -> Frames<'a>","parent":{"krate":0,"index":3531},"children":[],"decl_id":null,"docs":" Consume the decoder producing a series of frames.\n","sig":null,"attributes":[{"value":"/ Consume the decoder producing a series of frames.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796014,"byte_end":796067,"line_start":479,"line_end":479,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":3534},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796158,"byte_end":796170,"line_start":484,"line_end":484,"column_start":11,"column_end":23},"name":"ImageEncoder","qualname":"::image::ImageEncoder","value":"ImageEncoder","parent":null,"children":[{"krate":0,"index":3535}],"decl_id":null,"docs":" The trait all encoders implement\n","sig":null,"attributes":[{"value":"/ The trait all encoders implement","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796111,"byte_end":796147,"line_start":483,"line_end":483,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3535},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796719,"byte_end":796730,"line_start":495,"line_end":495,"column_start":8,"column_end":19},"name":"write_image","qualname":"::image::ImageEncoder::write_image","value":"fn (self, buf: &[u8], width: u32, height: u32, color_type: ColorType) -> ImageResult<()>","parent":{"krate":0,"index":3534},"children":[],"decl_id":null,"docs":" Writes all the bytes in an image to the encoder.","sig":null,"attributes":[{"value":"/ Writes all the bytes in an image to the encoder.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796177,"byte_end":796229,"line_start":485,"line_end":485,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796234,"byte_end":796237,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes of the pixel data of the image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796242,"byte_end":796313,"line_start":487,"line_end":487,"column_start":5,"column_end":76}},{"value":"/ and encodes them. Unlike particular format encoders inherent impl encode","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796318,"byte_end":796394,"line_start":488,"line_end":488,"column_start":5,"column_end":81}},{"value":"/ methods where endianness is not specified, here image data bytes should","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796399,"byte_end":796474,"line_start":489,"line_end":489,"column_start":5,"column_end":80}},{"value":"/ always be in native endian. The implementor will reorder the endianess","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796479,"byte_end":796553,"line_start":490,"line_end":490,"column_start":5,"column_end":79}},{"value":"/ as necessary for the target encoding format.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796558,"byte_end":796606,"line_start":491,"line_end":491,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796611,"byte_end":796614,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ See also `ImageDecoder::read_image` which reads byte buffers into","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796619,"byte_end":796688,"line_start":493,"line_end":493,"column_start":5,"column_end":74}},{"value":"/ native endian.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796693,"byte_end":796711,"line_start":494,"line_end":494,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3536},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796907,"byte_end":796913,"line_start":505,"line_end":505,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":3539},{"krate":0,"index":3540},{"krate":0,"index":3541},{"krate":0,"index":3542},{"krate":0,"index":3543}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[{"value":"/ Immutable pixel iterator","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":796867,"byte_end":796895,"line_start":504,"line_end":504,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":3549},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":797546,"byte_end":797562,"line_start":536,"line_end":536,"column_start":11,"column_end":27},"name":"GenericImageView","qualname":"::image::GenericImageView","value":"GenericImageView","parent":null,"children":[{"krate":0,"index":3550},{"krate":0,"index":3551},{"krate":0,"index":3552},{"krate":0,"index":3553},{"krate":0,"index":3554},{"krate":0,"index":3555},{"krate":0,"index":3556},{"krate":0,"index":3557},{"krate":0,"index":3558},{"krate":0,"index":3559},{"krate":0,"index":3560},{"krate":0,"index":3561}],"decl_id":null,"docs":" Trait to inspect an image.\n","sig":null,"attributes":[{"value":"/ Trait to inspect an image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":797505,"byte_end":797535,"line_start":535,"line_end":535,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":3550},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":797601,"byte_end":797606,"line_start":538,"line_end":538,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImageView::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":3549},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[{"value":"/ The type of pixel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":797569,"byte_end":797591,"line_start":537,"line_end":537,"column_start":5,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":3551},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":797840,"byte_end":797854,"line_start":543,"line_end":543,"column_start":10,"column_end":24},"name":"InnerImageView","qualname":"::image::GenericImageView::InnerImageView","value":"type InnerImageView: GenericImageView<Pixel = Self::Pixel>;","parent":{"krate":0,"index":3549},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":797620,"byte_end":797691,"line_start":540,"line_end":540,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":797696,"byte_end":797767,"line_start":541,"line_end":541,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":797772,"byte_end":797830,"line_start":542,"line_end":542,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3552},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":797947,"byte_end":797957,"line_start":546,"line_end":546,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImageView::dimensions","value":"fn (&self) -> (u32, u32)","parent":{"krate":0,"index":3549},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":797900,"byte_end":797939,"line_start":545,"line_end":545,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3553},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798021,"byte_end":798026,"line_start":549,"line_end":549,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImageView::width","value":"fn (&self) -> u32","parent":{"krate":0,"index":3549},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":797985,"byte_end":798013,"line_start":548,"line_end":548,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3554},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798141,"byte_end":798147,"line_start":555,"line_end":555,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImageView::height","value":"fn (&self) -> u32","parent":{"krate":0,"index":3549},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798104,"byte_end":798133,"line_start":554,"line_end":554,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3555},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798274,"byte_end":798280,"line_start":561,"line_end":561,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImageView::bounds","value":"fn (&self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":3549},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[{"value":"/ The bounding rectangle of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798225,"byte_end":798266,"line_start":560,"line_end":560,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3556},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798397,"byte_end":798406,"line_start":564,"line_end":564,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImageView::in_bounds","value":"fn (&self, x: u32, y: u32) -> bool","parent":{"krate":0,"index":3549},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[{"value":"/ Returns true if this x, y coordinate is contained inside the image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798318,"byte_end":798389,"line_start":563,"line_end":563,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3557},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798729,"byte_end":798738,"line_start":576,"line_end":576,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImageView::get_pixel","value":"fn (&self, x: u32, y: u32) -> Self::Pixel","parent":{"krate":0,"index":3549},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798554,"byte_end":798593,"line_start":569,"line_end":569,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798598,"byte_end":798601,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798606,"byte_end":798618,"line_start":571,"line_end":571,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798623,"byte_end":798626,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798631,"byte_end":798671,"line_start":573,"line_end":573,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798676,"byte_end":798679,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ TODO: change this signature to &P","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798684,"byte_end":798721,"line_start":575,"line_end":575,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3558},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798925,"byte_end":798941,"line_start":581,"line_end":581,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImageView::unsafe_get_pixel","value":"fn (&self, x: u32, y: u32) -> Self::Pixel","parent":{"krate":0,"index":3549},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798783,"byte_end":798822,"line_start":578,"line_end":578,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798827,"byte_end":798830,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":798835,"byte_end":798910,"line_start":580,"line_end":580,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":3559},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":799173,"byte_end":799179,"line_start":588,"line_end":588,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImageView::pixels","value":"fn (&self) -> Pixels<Self>","parent":{"krate":0,"index":3549},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[{"value":"/ Returns an Iterator over the pixels of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":799022,"byte_end":799076,"line_start":585,"line_end":585,"column_start":5,"column_end":59}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":799081,"byte_end":799134,"line_start":586,"line_end":586,"column_start":5,"column_end":58}},{"value":"/ along with their value","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":799139,"byte_end":799165,"line_start":587,"line_end":587,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3560},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":799449,"byte_end":799454,"line_start":601,"line_end":601,"column_start":8,"column_end":13},"name":"inner","qualname":"::image::GenericImageView::inner","value":"fn (&self) -> &Self::InnerImageView","parent":{"krate":0,"index":3549},"children":[],"decl_id":null,"docs":" Returns a reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":799393,"byte_end":799441,"line_start":600,"line_end":600,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3561},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":799651,"byte_end":799655,"line_start":605,"line_end":605,"column_start":8,"column_end":12},"name":"view","qualname":"::image::GenericImageView::view","value":"fn (&self, x: u32, y: u32, width: u32, height: u32) -> SubImage<&Self::InnerImageView>","parent":{"krate":0,"index":3549},"children":[],"decl_id":null,"docs":" Returns an subimage that is an immutable view into this image.\n You can use [`GenericImage::sub_image`] if you need a mutable view instead.\n","sig":null,"attributes":[{"value":"/ Returns an subimage that is an immutable view into this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":799493,"byte_end":799559,"line_start":603,"line_end":603,"column_start":5,"column_end":71}},{"value":"/ You can use [`GenericImage::sub_image`] if you need a mutable view instead.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":799564,"byte_end":799643,"line_start":604,"line_end":604,"column_start":5,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":3562},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":799854,"byte_end":799866,"line_start":611,"line_end":611,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: GenericImageView","parent":null,"children":[{"krate":0,"index":3563},{"krate":0,"index":3564},{"krate":0,"index":3565},{"krate":0,"index":3566},{"krate":0,"index":3567},{"krate":0,"index":3568},{"krate":0,"index":3570},{"krate":0,"index":3572},{"krate":0,"index":3573}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[{"value":"/ A trait for manipulating images.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":799807,"byte_end":799843,"line_start":610,"line_end":610,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":3563},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800111,"byte_end":800121,"line_start":615,"line_end":615,"column_start":10,"column_end":20},"name":"InnerImage","qualname":"::image::GenericImage::InnerImage","value":"type InnerImage: GenericImage<Pixel = Self::Pixel>;","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":799891,"byte_end":799962,"line_start":612,"line_end":612,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":799967,"byte_end":800038,"line_start":613,"line_end":613,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800043,"byte_end":800101,"line_start":614,"line_end":614,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3564},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800311,"byte_end":800324,"line_start":622,"line_end":622,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"fn (&mut self, x: u32, y: u32) -> &mut Self::Pixel","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800163,"byte_end":800225,"line_start":617,"line_end":617,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800230,"byte_end":800233,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800238,"byte_end":800250,"line_start":619,"line_end":619,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800255,"byte_end":800258,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800263,"byte_end":800303,"line_start":621,"line_end":621,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3565},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800498,"byte_end":800507,"line_start":629,"line_end":629,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: Self::Pixel) -> ()","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800378,"byte_end":800412,"line_start":624,"line_end":624,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800417,"byte_end":800420,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800425,"byte_end":800437,"line_start":626,"line_end":626,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800442,"byte_end":800445,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800450,"byte_end":800490,"line_start":628,"line_end":628,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3566},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800699,"byte_end":800715,"line_start":634,"line_end":634,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: Self::Pixel) -> ()","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Puts a pixel at location (x, y)","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800561,"byte_end":800596,"line_start":631,"line_end":631,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800601,"byte_end":800604,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800609,"byte_end":800684,"line_start":633,"line_end":633,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":3567},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800982,"byte_end":800993,"line_start":641,"line_end":641,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: Self::Pixel) -> ()","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y), taking into account alpha channels","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800813,"byte_end":800883,"line_start":638,"line_end":638,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800888,"byte_end":800891,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ DEPRECATED: This method will be removed. Blend the pixel directly instead.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":800896,"byte_end":800974,"line_start":640,"line_end":640,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":3568},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":801441,"byte_end":801450,"line_start":652,"line_end":652,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"fn <O> (&mut self, other: &O, x: u32, y: u32) -> ImageResult<()>","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from another image into this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":801047,"byte_end":801111,"line_start":643,"line_end":643,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":801116,"byte_end":801119,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ The other image is copied with the top-left corner of the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":801124,"byte_end":801185,"line_start":645,"line_end":645,"column_start":5,"column_end":66}},{"value":"/ other image placed at (x, y).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":801190,"byte_end":801223,"line_start":646,"line_end":646,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":801228,"byte_end":801231,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ In order to copy only a piece of the other image, use [`GenericImageView::view`].","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":801236,"byte_end":801321,"line_start":648,"line_end":648,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":801326,"byte_end":801329,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":801334,"byte_end":801347,"line_start":650,"line_end":650,"column_start":5,"column_end":18}},{"value":"/ Returns an error if the image is too large to be copied at the given position","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":801352,"byte_end":801433,"line_start":651,"line_end":651,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":3570},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":802497,"byte_end":802508,"line_start":680,"line_end":680,"column_start":8,"column_end":19},"name":"copy_within","qualname":"::image::GenericImage::copy_within","value":"fn (&mut self, source: Rect, x: u32, y: u32) -> bool","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Copies all of the pixels from one part of this image to another part of this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from one part of this image to another part of this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":802149,"byte_end":802236,"line_start":673,"line_end":673,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":802241,"byte_end":802244,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ The destination rectangle of the copy is specified with the top-left corner placed at (x, y).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":802249,"byte_end":802346,"line_start":675,"line_end":675,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":802351,"byte_end":802354,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":802359,"byte_end":802372,"line_start":677,"line_end":677,"column_start":5,"column_end":18}},{"value":"/ `true` if the copy was successful, `false` if the image could not","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":802377,"byte_end":802446,"line_start":678,"line_end":678,"column_start":5,"column_end":74}},{"value":"/ be copied due to size constraints.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":802451,"byte_end":802489,"line_start":679,"line_end":679,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3572},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":804166,"byte_end":804175,"line_start":716,"line_end":716,"column_start":8,"column_end":17},"name":"inner_mut","qualname":"::image::GenericImage::inner_mut","value":"fn (&mut self) -> &mut Self::InnerImage","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":804102,"byte_end":804158,"line_start":715,"line_end":715,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3573},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":804370,"byte_end":804379,"line_start":720,"line_end":720,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32) -> SubImage<&mut Self::InnerImage>","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Returns a mutable subimage that is a view into this image.\n If you want an immutable subimage instead, use [`GenericImageView::view`]\n","sig":null,"attributes":[{"value":"/ Returns a mutable subimage that is a view into this image.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":804218,"byte_end":804280,"line_start":718,"line_end":718,"column_start":5,"column_end":67}},{"value":"/ If you want an immutable subimage instead, use [`GenericImageView::view`]","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":804285,"byte_end":804362,"line_start":719,"line_end":719,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":3574},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":804870,"byte_end":804878,"line_start":737,"line_end":737,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":3576},{"krate":0,"index":3577},{"krate":0,"index":3578},{"krate":0,"index":3579},{"krate":0,"index":3580}],"decl_id":null,"docs":" A View into another image","sig":null,"attributes":[{"value":"/ A View into another image","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":804586,"byte_end":804615,"line_start":731,"line_end":731,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":804616,"byte_end":804619,"line_start":732,"line_end":732,"column_start":1,"column_end":4}},{"value":"/ Instances of this struct can be created using:","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":804620,"byte_end":804670,"line_start":733,"line_end":733,"column_start":1,"column_end":51}},{"value":"/   - [`GenericImage::sub_image`] to create a mutable view,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":804671,"byte_end":804732,"line_start":734,"line_end":734,"column_start":1,"column_end":62}},{"value":"/   - [`GenericImageView::view`] to create an immutable view,","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":804733,"byte_end":804796,"line_start":735,"line_end":735,"column_start":1,"column_end":64}},{"value":"/   - [`SubImage::new`] to instantiate the struct directly.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":804797,"byte_end":804858,"line_start":736,"line_end":736,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3587},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":805266,"byte_end":805269,"line_start":753,"line_end":753,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage<I>>::new","value":"fn (image: I, x: u32, y: u32, width: u32, height: u32) -> SubImage<I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n","sig":null,"attributes":[{"value":"/ Construct a new subimage","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":805226,"byte_end":805254,"line_start":752,"line_end":752,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3588},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":805558,"byte_end":805571,"line_start":764,"line_end":764,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage<I>>::change_bounds","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[{"value":"/ Change the coordinates of this subimage.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":805502,"byte_end":805546,"line_start":763,"line_end":763,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3589},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":805805,"byte_end":805813,"line_start":772,"line_end":772,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage<I>>::to_image","value":"fn (&self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[{"value":"/ Convert this subimage to an ImageBuffer","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":805750,"byte_end":805793,"line_start":771,"line_end":771,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":3621},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":818526,"byte_end":818541,"line_start":12,"line_end":12,"column_start":11,"column_end":26},"name":"EncodableLayout","qualname":"::traits::EncodableLayout","value":"EncodableLayout: seals::EncodableLayout","parent":null,"children":[{"krate":0,"index":3622}],"decl_id":null,"docs":" Types which are safe to treat as an immutable byte slice in a pixel layout\n for image encoding.\n","sig":null,"attributes":[{"value":"/ Types which are safe to treat as an immutable byte slice in a pixel layout","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":818413,"byte_end":818491,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ for image encoding.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":818492,"byte_end":818515,"line_start":11,"line_end":11,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":3622},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":818612,"byte_end":818620,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::traits::EncodableLayout::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Get the bytes of this value.\n","sig":null,"attributes":[{"value":"/ Get the bytes of this value.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":818572,"byte_end":818604,"line_start":13,"line_end":13,"column_start":5,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":3627},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":818908,"byte_end":818917,"line_start":30,"line_end":30,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[],"decl_id":null,"docs":" Primitive trait from old stdlib\n","sig":null,"attributes":[{"value":"/ Primitive trait from old stdlib","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":818862,"byte_end":818897,"line_start":29,"line_end":29,"column_start":1,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":3640},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":819439,"byte_end":819450,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"Enlargeable","qualname":"::traits::Enlargeable","value":"Enlargeable: Sized + Bounded + NumCast","parent":null,"children":[{"krate":0,"index":3641},{"krate":0,"index":3642}],"decl_id":null,"docs":" An Enlargable::Larger value should be enough to calculate\n the sum (average) of a few hundred or thousand Enlargeable values.\n","sig":null,"attributes":[{"value":"/ An Enlargable::Larger value should be enough to calculate","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":819296,"byte_end":819357,"line_start":45,"line_end":45,"column_start":1,"column_end":62}},{"value":"/ the sum (average) of a few hundred or thousand Enlargeable values.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":819358,"byte_end":819428,"line_start":46,"line_end":46,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":3641},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":819489,"byte_end":819495,"line_start":48,"line_end":48,"column_start":10,"column_end":16},"name":"Larger","qualname":"::traits::Enlargeable::Larger","value":"type Larger: Primitive + AddAssign + 'static;","parent":{"krate":0,"index":3640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3642},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":819538,"byte_end":819548,"line_start":50,"line_end":50,"column_start":8,"column_end":18},"name":"clamp_from","qualname":"::traits::Enlargeable::clamp_from","value":"fn (n: Self::Larger) -> Self","parent":{"krate":0,"index":3640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3649},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820074,"byte_end":820079,"line_start":73,"line_end":73,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::traits::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":3650},{"krate":0,"index":3651},{"krate":0,"index":3652},{"krate":0,"index":3653},{"krate":0,"index":3654},{"krate":0,"index":3655},{"krate":0,"index":3656},{"krate":0,"index":3657},{"krate":0,"index":3658},{"krate":0,"index":3659},{"krate":0,"index":3660},{"krate":0,"index":3661},{"krate":0,"index":3662},{"krate":0,"index":3663},{"krate":0,"index":3664},{"krate":0,"index":3665},{"krate":0,"index":3666},{"krate":0,"index":3667},{"krate":0,"index":3668},{"krate":0,"index":3669},{"krate":0,"index":3671},{"krate":0,"index":3673},{"krate":0,"index":3676},{"krate":0,"index":3679},{"krate":0,"index":3682},{"krate":0,"index":3685},{"krate":0,"index":3687},{"krate":0,"index":3689},{"krate":0,"index":3690}],"decl_id":null,"docs":" A generalized pixel.","sig":null,"attributes":[{"value":"/ A generalized pixel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":819949,"byte_end":819973,"line_start":70,"line_end":70,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":819974,"byte_end":819977,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ A pixel object is usually not used standalone but as a view into an image buffer.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":819978,"byte_end":820063,"line_start":72,"line_end":72,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":3650},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820143,"byte_end":820151,"line_start":75,"line_end":75,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::traits::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" The underlying subpixel type.\n","sig":null,"attributes":[{"value":"/ The underlying subpixel type.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820100,"byte_end":820133,"line_start":74,"line_end":74,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":3651},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820226,"byte_end":820239,"line_start":78,"line_end":78,"column_start":11,"column_end":24},"name":"CHANNEL_COUNT","qualname":"::traits::Pixel::CHANNEL_COUNT","value":"u8","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" The number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ The number of channels of this pixel type.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820169,"byte_end":820215,"line_start":77,"line_end":77,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3652},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820382,"byte_end":820395,"line_start":81,"line_end":81,"column_start":8,"column_end":21},"name":"channel_count","qualname":"::traits::Pixel::channel_count","value":"fn () -> u8","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Returns the number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ Returns the number of channels of this pixel type.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820249,"byte_end":820303,"line_start":79,"line_end":79,"column_start":5,"column_end":59}},{"value":"deprecated(note = \"please use CHANNEL_COUNT associated constant\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820308,"byte_end":820374,"line_start":80,"line_end":80,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":3653},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820491,"byte_end":820499,"line_start":86,"line_end":86,"column_start":8,"column_end":16},"name":"channels","qualname":"::traits::Pixel::channels","value":"fn (&self) -> &[Self::Subpixel]","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the components as a slice.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820445,"byte_end":820483,"line_start":85,"line_end":85,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3654},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820587,"byte_end":820599,"line_start":89,"line_end":89,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::traits::Pixel::channels_mut","value":"fn (&mut self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[{"value":"/ Returns the components as a mutable slice","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820534,"byte_end":820579,"line_start":88,"line_end":88,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":3655},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820765,"byte_end":820776,"line_start":93,"line_end":93,"column_start":11,"column_end":22},"name":"COLOR_MODEL","qualname":"::traits::Pixel::COLOR_MODEL","value":"&'static str","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" A string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ A string that can help to interpret the meaning each channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820642,"byte_end":820706,"line_start":91,"line_end":91,"column_start":5,"column_end":69}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820711,"byte_end":820754,"line_start":92,"line_end":92,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3656},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820993,"byte_end":821004,"line_start":97,"line_end":97,"column_start":8,"column_end":19},"name":"color_model","qualname":"::traits::Pixel::color_model","value":"fn () -> &'static str","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Returns a string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ Returns a string that can help to interpret the meaning each channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820796,"byte_end":820868,"line_start":94,"line_end":94,"column_start":5,"column_end":77}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820873,"byte_end":820916,"line_start":95,"line_end":95,"column_start":5,"column_end":48}},{"value":"deprecated(note = \"please use COLOR_MODEL associated constant\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820921,"byte_end":820985,"line_start":96,"line_end":96,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":3657},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821108,"byte_end":821118,"line_start":102,"line_end":102,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::traits::Pixel::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ ColorType for this pixel format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821062,"byte_end":821097,"line_start":101,"line_end":101,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3658},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821258,"byte_end":821268,"line_start":105,"line_end":105,"column_start":8,"column_end":18},"name":"color_type","qualname":"::traits::Pixel::color_type","value":"fn () -> ColorType","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Returns the ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ Returns the ColorType for this pixel format","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821135,"byte_end":821182,"line_start":103,"line_end":103,"column_start":5,"column_end":52}},{"value":"deprecated(note = \"please use COLOR_TYPE associated constant\")","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821187,"byte_end":821250,"line_start":104,"line_end":104,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3659},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821506,"byte_end":821515,"line_start":113,"line_end":113,"column_start":8,"column_end":17},"name":"channels4","qualname":"::traits::Pixel::channels4","value":"fn (&self) -> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value","sig":null,"attributes":[{"value":"/ Returns the channels of this pixel as a 4 tuple. If the pixel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821322,"byte_end":821387,"line_start":109,"line_end":109,"column_start":5,"column_end":70}},{"value":"/ has less than 4 channels the remainder is filled with the maximum value","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821392,"byte_end":821467,"line_start":110,"line_end":110,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821472,"byte_end":821475,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821480,"byte_end":821498,"line_start":112,"line_end":112,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":3660},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821818,"byte_end":821831,"line_start":126,"line_end":126,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::traits::Pixel::from_channels","value":"fn (a: Self::Subpixel, b: Self::Subpixel, c: Self::Subpixel, d: Self::Subpixel) -> Self","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.","sig":null,"attributes":[{"value":"/ Construct a pixel from the 4 channels a, b, c and d.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821651,"byte_end":821707,"line_start":122,"line_end":122,"column_start":5,"column_end":61}},{"value":"/ If the pixel does not contain 4 channels the extra are ignored.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821712,"byte_end":821779,"line_start":123,"line_end":123,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821784,"byte_end":821787,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821792,"byte_end":821810,"line_start":125,"line_end":125,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":3661},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822185,"byte_end":822195,"line_start":137,"line_end":137,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::traits::Pixel::from_slice","value":"fn (slice: &[Self::Subpixel]) -> &Self","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Returns a view into a slice.","sig":null,"attributes":[{"value":"/ Returns a view into a slice.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821961,"byte_end":821993,"line_start":133,"line_end":133,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":821998,"byte_end":822001,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822006,"byte_end":822090,"line_start":135,"line_end":135,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to present panics if the pixel is used later on.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822095,"byte_end":822177,"line_start":136,"line_end":136,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3662},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822475,"byte_end":822489,"line_start":143,"line_end":143,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::traits::Pixel::from_slice_mut","value":"fn (slice: &mut [Self::Subpixel]) -> &mut Self","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.","sig":null,"attributes":[{"value":"/ Returns mutable view into a mutable slice.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822237,"byte_end":822283,"line_start":139,"line_end":139,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822288,"byte_end":822291,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822296,"byte_end":822380,"line_start":141,"line_end":141,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to present panics if the pixel is used later on.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822385,"byte_end":822467,"line_start":142,"line_end":142,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3663},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822576,"byte_end":822582,"line_start":146,"line_end":146,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::traits::Pixel::to_rgb","value":"fn (&self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822539,"byte_end":822568,"line_start":145,"line_end":145,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3664},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822678,"byte_end":822685,"line_start":149,"line_end":149,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::traits::Pixel::to_rgba","value":"fn (&self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB with an alpha channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822619,"byte_end":822670,"line_start":148,"line_end":148,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3665},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822761,"byte_end":822768,"line_start":152,"line_end":152,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::traits::Pixel::to_luma","value":"fn (&self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822723,"byte_end":822753,"line_start":151,"line_end":151,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3666},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822866,"byte_end":822879,"line_start":155,"line_end":155,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::traits::Pixel::to_luma_alpha","value":"fn (&self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma with an alpha channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822806,"byte_end":822858,"line_start":154,"line_end":154,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3667},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822955,"byte_end":822961,"line_start":158,"line_end":158,"column_start":8,"column_end":14},"name":"to_bgr","qualname":"::traits::Pixel::to_bgr","value":"fn (&self) -> Bgr<Self::Subpixel>","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822918,"byte_end":822947,"line_start":157,"line_end":157,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3668},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":823057,"byte_end":823064,"line_start":161,"line_end":161,"column_start":8,"column_end":15},"name":"to_bgra","qualname":"::traits::Pixel::to_bgra","value":"fn (&self) -> Bgra<Self::Subpixel>","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR with an alpha channel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":822998,"byte_end":823049,"line_start":160,"line_end":160,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3669},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":823171,"byte_end":823174,"line_start":164,"line_end":164,"column_start":8,"column_end":11},"name":"map","qualname":"::traits::Pixel::map","value":"fn <F> (&self, f: F) -> Self","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":823102,"byte_end":823163,"line_start":163,"line_end":163,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3671},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":823335,"byte_end":823340,"line_start":169,"line_end":169,"column_start":8,"column_end":13},"name":"apply","qualname":"::traits::Pixel::apply","value":"fn <F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":823266,"byte_end":823327,"line_start":168,"line_end":168,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3673},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":823565,"byte_end":823579,"line_start":175,"line_end":175,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::traits::Pixel::map_with_alpha","value":"fn <F, G> (&self, f: F, g: G) -> Self","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":823428,"byte_end":823500,"line_start":173,"line_end":173,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":823505,"byte_end":823557,"line_start":174,"line_end":174,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3676},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":823885,"byte_end":823901,"line_start":182,"line_end":182,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::traits::Pixel::apply_with_alpha","value":"fn <F, G> (&mut self, f: F, g: G) -> ()","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":823732,"byte_end":823804,"line_start":180,"line_end":180,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel. Works in-place.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":823809,"byte_end":823877,"line_start":181,"line_end":181,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3679},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":824130,"byte_end":824147,"line_start":188,"line_end":188,"column_start":8,"column_end":25},"name":"map_without_alpha","qualname":"::traits::Pixel::map_without_alpha","value":"fn <F> (&self, f: F) -> Self","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":824050,"byte_end":824122,"line_start":187,"line_end":187,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3682},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":824439,"byte_end":824458,"line_start":199,"line_end":199,"column_start":8,"column_end":27},"name":"apply_without_alpha","qualname":"::traits::Pixel::apply_without_alpha","value":"fn <F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Works in place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":824335,"byte_end":824407,"line_start":197,"line_end":197,"column_start":5,"column_end":77}},{"value":"/ Works in place.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":824412,"byte_end":824431,"line_start":198,"line_end":198,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":3685},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":824701,"byte_end":824705,"line_start":208,"line_end":208,"column_start":8,"column_end":12},"name":"map2","qualname":"::traits::Pixel::map2","value":"fn <F> (&self, other: &Self, f: F) -> Self","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":824599,"byte_end":824663,"line_start":206,"line_end":206,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":824668,"byte_end":824693,"line_start":207,"line_end":207,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3687},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":824945,"byte_end":824951,"line_start":214,"line_end":214,"column_start":8,"column_end":14},"name":"apply2","qualname":"::traits::Pixel::apply2","value":"fn <F> (&mut self, other: &Self, f: F) -> ()","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":824827,"byte_end":824891,"line_start":212,"line_end":212,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise. Works in-place.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":824896,"byte_end":824937,"line_start":213,"line_end":213,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3689},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":825098,"byte_end":825104,"line_start":219,"line_end":219,"column_start":8,"column_end":14},"name":"invert","qualname":"::traits::Pixel::invert","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[{"value":"/ Invert this pixel","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":825069,"byte_end":825090,"line_start":218,"line_end":218,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3690},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":825215,"byte_end":825220,"line_start":222,"line_end":222,"column_start":8,"column_end":13},"name":"blend","qualname":"::traits::Pixel::blend","value":"fn (&mut self, other: &Self) -> ()","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[{"value":"/ Blend the color of a given pixel into ourself, taking into account alpha channels","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":825122,"byte_end":825207,"line_start":221,"line_end":221,"column_start":5,"column_end":90}}]},{"kind":"Trait","id":{"krate":0,"index":3692},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":825329,"byte_end":825344,"line_start":227,"line_end":227,"column_start":15,"column_end":30},"name":"EncodableLayout","qualname":"::traits::seals::EncodableLayout","value":"EncodableLayout","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5813},"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/utils/mod.rs","byte_start":828767,"byte_end":828786,"line_start":89,"line_end":89,"column_start":12,"column_end":31},"name":"NonExhaustiveMarker","qualname":"::utils::NonExhaustiveMarker","value":"NonExhaustiveMarker {  }","parent":null,"children":[{"krate":0,"index":5814}],"decl_id":null,"docs":" A marker struct for __NonExhaustive enums.","sig":null,"attributes":[{"value":"/ A marker struct for __NonExhaustive enums.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/utils/mod.rs","byte_start":828044,"byte_end":828090,"line_start":78,"line_end":78,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/utils/mod.rs","byte_start":828091,"byte_end":828094,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ This is an empty type that can not be constructed. When an enum contains a tuple variant that","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/utils/mod.rs","byte_start":828095,"byte_end":828192,"line_start":80,"line_end":80,"column_start":1,"column_end":98}},{"value":"/ includes this type the optimizer can statically determined tha the branch is never taken while","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/utils/mod.rs","byte_start":828193,"byte_end":828291,"line_start":81,"line_end":81,"column_start":1,"column_end":99}},{"value":"/ at the same time the matching of the branch is required.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/utils/mod.rs","byte_start":828292,"byte_end":828352,"line_start":82,"line_end":82,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/utils/mod.rs","byte_start":828353,"byte_end":828356,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ The effect is thus very similar to the actual `#[non_exhaustive]` attribute with no runtime","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/utils/mod.rs","byte_start":828357,"byte_end":828452,"line_start":84,"line_end":84,"column_start":1,"column_end":96}},{"value":"/ costs. Also note that we use a dirty trick to not only hide this type from the doc but make it","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/utils/mod.rs","byte_start":828453,"byte_end":828551,"line_start":85,"line_end":85,"column_start":1,"column_end":99}},{"value":"/ inaccessible. The visibility in this module is pub but the module itself is not and the","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/utils/mod.rs","byte_start":828552,"byte_end":828643,"line_start":86,"line_end":86,"column_start":1,"column_end":92}},{"value":"/ top-level crate never exports the type.","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/utils/mod.rs","byte_start":828644,"byte_end":828687,"line_start":87,"line_end":87,"column_start":1,"column_end":44}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15915,"byte_end":15931,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":16629,"byte_end":16642,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":17418,"byte_end":17431,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18208,"byte_end":18222,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18601,"byte_end":18611,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18968,"byte_end":18978,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":19094,"byte_end":19109,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":19238,"byte_end":19253,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":19503,"byte_end":19519,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":19822,"byte_end":19832,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":20293,"byte_end":20303,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":20756,"byte_end":20772,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":22394,"byte_end":22410,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":22438,"byte_end":22452,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":23487,"byte_end":23501,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":23706,"byte_end":23719,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":24180,"byte_end":24193,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":24398,"byte_end":24411,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":24858,"byte_end":24871,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":25076,"byte_end":25086,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":25469,"byte_end":25479,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":25507,"byte_end":25522,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":28966,"byte_end":28974,"line_start":73,"line_end":73,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":67749,"byte_end":67756,"line_start":195,"line_end":195,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":68200,"byte_end":68208,"line_start":216,"line_end":216,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":83167,"byte_end":83179,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102065,"byte_end":102071,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103432,"byte_end":103438,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104203,"byte_end":104209,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/free_functions.rs","byte_start":118534,"byte_end":118544,"line_start":287,"line_end":287,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122600,"byte_end":122612,"line_start":110,"line_end":110,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":555},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":568},{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":135207,"byte_end":135210,"line_start":423,"line_end":423,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":135468,"byte_end":135479,"line_start":438,"line_end":438,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":581},{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157211,"byte_end":157215,"line_start":973,"line_end":973,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":162800,"byte_end":162807,"line_start":1106,"line_end":1106,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":167183,"byte_end":167194,"line_start":1220,"line_end":1220,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":645},{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":167803,"byte_end":167814,"line_start":1239,"line_end":1239,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":168418,"byte_end":168422,"line_start":1257,"line_end":1257,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":169669,"byte_end":169676,"line_start":1302,"line_end":1302,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":170943,"byte_end":170950,"line_start":1347,"line_end":1347,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":171845,"byte_end":171855,"line_start":1376,"line_end":1376,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":172007,"byte_end":172030,"line_start":1380,"line_end":1380,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":172238,"byte_end":172261,"line_start":1385,"line_end":1385,"column_start":31,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":172833,"byte_end":172843,"line_start":1399,"line_end":1399,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":181646,"byte_end":181657,"line_start":100,"line_end":100,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":765},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":183580,"byte_end":183592,"line_start":158,"line_end":158,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":768}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":185663,"byte_end":185673,"line_start":195,"line_end":195,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":185829,"byte_end":185841,"line_start":201,"line_end":201,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":186188,"byte_end":186205,"line_start":216,"line_end":216,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":773}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":194862,"byte_end":194870,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":796},{"krate":0,"index":797}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":196256,"byte_end":196265,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":197530,"byte_end":197545,"line_start":578,"line_end":578,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":199401,"byte_end":199411,"line_start":630,"line_end":630,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":869},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":231315,"byte_end":231324,"line_start":1420,"line_end":1420,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":885},{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":231744,"byte_end":231754,"line_start":1434,"line_end":1434,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":232429,"byte_end":232439,"line_start":1459,"line_end":1459,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/encoder.rs","byte_start":233960,"byte_end":233970,"line_start":17,"line_end":17,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/encoder.rs","byte_start":241090,"byte_end":241100,"line_start":214,"line_end":214,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":246284,"byte_end":246296,"line_start":34,"line_end":34,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":965}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":246936,"byte_end":246946,"line_start":49,"line_end":49,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":967}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":247102,"byte_end":247114,"line_start":55,"line_end":55,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":247583,"byte_end":247594,"line_start":83,"line_end":83,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":248318,"byte_end":248324,"line_start":106,"line_end":106,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":250000,"byte_end":250010,"line_start":159,"line_end":159,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":251502,"byte_end":251512,"line_start":198,"line_end":198,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":253313,"byte_end":253323,"line_start":33,"line_end":33,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":254280,"byte_end":254290,"line_start":69,"line_end":69,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1027},{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":256042,"byte_end":256052,"line_start":117,"line_end":117,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":256949,"byte_end":256959,"line_start":149,"line_end":149,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":257933,"byte_end":257942,"line_start":179,"line_end":179,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1052}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":258202,"byte_end":258212,"line_start":191,"line_end":191,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1059},{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":282062,"byte_end":282072,"line_start":51,"line_end":51,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1152}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":282524,"byte_end":282533,"line_start":65,"line_end":65,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1160},{"krate":0,"index":1161}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":282946,"byte_end":282956,"line_start":79,"line_end":79,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":285903,"byte_end":285919,"line_start":156,"line_end":156,"column_start":15,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1180}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":286531,"byte_end":286547,"line_start":178,"line_end":178,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1183},{"krate":0,"index":1184}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":291253,"byte_end":291263,"line_start":286,"line_end":286,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1190}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":291526,"byte_end":291533,"line_start":298,"line_end":298,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1202},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1207}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":295530,"byte_end":295540,"line_start":408,"line_end":408,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1210}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":297829,"byte_end":297841,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":299491,"byte_end":299501,"line_start":78,"line_end":78,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":299657,"byte_end":299669,"line_start":84,"line_end":84,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":300171,"byte_end":300179,"line_start":104,"line_end":104,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":300773,"byte_end":300783,"line_start":124,"line_end":124,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":302154,"byte_end":302163,"line_start":166,"line_end":166,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1272},{"krate":0,"index":1273}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":302579,"byte_end":302589,"line_start":180,"line_end":180,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":303097,"byte_end":303107,"line_start":200,"line_end":200,"column_start":58,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1285}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":304143,"byte_end":304153,"line_start":243,"line_end":243,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1296}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":306459,"byte_end":306469,"line_start":308,"line_end":308,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1312},{"krate":0,"index":1314}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":312149,"byte_end":312159,"line_start":461,"line_end":461,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":313059,"byte_end":313082,"line_start":489,"line_end":489,"column_start":18,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1332}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":313375,"byte_end":313398,"line_start":502,"line_end":502,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":315206,"byte_end":315229,"line_start":553,"line_end":553,"column_start":40,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":321680,"byte_end":321691,"line_start":729,"line_end":729,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1359},{"krate":0,"index":1360}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":331624,"byte_end":331634,"line_start":12,"line_end":12,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1399},{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":334196,"byte_end":334207,"line_start":89,"line_end":89,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1412}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":334333,"byte_end":334344,"line_start":95,"line_end":95,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1415},{"krate":0,"index":1416}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":335045,"byte_end":335065,"line_start":124,"line_end":124,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":335324,"byte_end":335344,"line_start":134,"line_end":134,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1427},{"krate":0,"index":1428}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":349030,"byte_end":349042,"line_start":48,"line_end":48,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1472}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":350169,"byte_end":350179,"line_start":69,"line_end":69,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1474}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":350335,"byte_end":350347,"line_start":75,"line_end":75,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":350588,"byte_end":350607,"line_start":86,"line_end":86,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1477}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":350847,"byte_end":350866,"line_start":95,"line_end":95,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1479}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":351505,"byte_end":351515,"line_start":129,"line_end":129,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1494}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":353812,"byte_end":353820,"line_start":201,"line_end":201,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1511}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":355133,"byte_end":355142,"line_start":249,"line_end":249,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1520},{"krate":0,"index":1521}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":355562,"byte_end":355572,"line_start":263,"line_end":263,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1525},{"krate":0,"index":1526},{"krate":0,"index":1527},{"krate":0,"index":1528},{"krate":0,"index":1529}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/encoder.rs","byte_start":360695,"byte_end":360705,"line_start":22,"line_end":22,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1549},{"krate":0,"index":1550}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/encoder.rs","byte_start":361699,"byte_end":361709,"line_start":55,"line_end":55,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1553}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":364287,"byte_end":364298,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":365007,"byte_end":365017,"line_start":40,"line_end":40,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1598},{"krate":0,"index":1599}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":365430,"byte_end":365441,"line_start":54,"line_end":54,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1606},{"krate":0,"index":1607}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":367187,"byte_end":367196,"line_start":114,"line_end":114,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1610}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":367454,"byte_end":367464,"line_start":125,"line_end":125,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1613}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":393586,"byte_end":393595,"line_start":169,"line_end":169,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1679},{"krate":0,"index":1680},{"krate":0,"index":1681},{"krate":0,"index":1682}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":397104,"byte_end":397116,"line_start":305,"line_end":305,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1684}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":397454,"byte_end":397466,"line_start":317,"line_end":317,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1686}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":398042,"byte_end":398053,"line_start":342,"line_end":342,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1701},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1705},{"krate":0,"index":1708},{"krate":0,"index":1711}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":407947,"byte_end":407958,"line_start":644,"line_end":644,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1721}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":426522,"byte_end":426531,"line_start":29,"line_end":29,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1785}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":427289,"byte_end":427298,"line_start":53,"line_end":53,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1788},{"krate":0,"index":1789}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":428553,"byte_end":428563,"line_start":99,"line_end":99,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1796}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":432060,"byte_end":432070,"line_start":164,"line_end":164,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1801},{"krate":0,"index":1802},{"krate":0,"index":1803},{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1811}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":433481,"byte_end":433491,"line_start":211,"line_end":211,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1817},{"krate":0,"index":1818}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":435118,"byte_end":435128,"line_start":244,"line_end":244,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1823}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":436363,"byte_end":436373,"line_start":276,"line_end":276,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1830}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/autobreak.rs","byte_start":444452,"byte_end":444461,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1858},{"krate":0,"index":1859}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/autobreak.rs","byte_start":445722,"byte_end":445731,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1862},{"krate":0,"index":1863}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/autobreak.rs","byte_start":446357,"byte_end":446366,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1866}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":450216,"byte_end":450228,"line_start":80,"line_end":80,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1915}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":453057,"byte_end":453067,"line_start":128,"line_end":128,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1917}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":453223,"byte_end":453235,"line_start":134,"line_end":134,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1919}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":453711,"byte_end":453724,"line_start":156,"line_end":156,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1921}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":454316,"byte_end":454331,"line_start":178,"line_end":178,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1923}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":455483,"byte_end":455493,"line_start":226,"line_end":226,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1945},{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1949},{"krate":0,"index":1950}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":466169,"byte_end":466178,"line_start":511,"line_end":511,"column_start":32,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":466307,"byte_end":466316,"line_start":515,"line_end":515,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1980},{"krate":0,"index":1981}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":466729,"byte_end":466739,"line_start":529,"line_end":529,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1989},{"krate":0,"index":1990}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":468446,"byte_end":468456,"line_start":576,"line_end":576,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1993},{"krate":0,"index":1995},{"krate":0,"index":1997}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":470883,"byte_end":470885,"line_start":642,"line_end":642,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2009}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":471550,"byte_end":471553,"line_start":669,"line_end":669,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2012},{"krate":0,"index":2013},{"krate":0,"index":2014}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":472825,"byte_end":472831,"line_start":708,"line_end":708,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2016},{"krate":0,"index":2017},{"krate":0,"index":2018}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":474451,"byte_end":474456,"line_start":762,"line_end":762,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2021},{"krate":0,"index":2022},{"krate":0,"index":2024}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":475306,"byte_end":475318,"line_start":792,"line_end":792,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2026}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":475443,"byte_end":475456,"line_start":798,"line_end":798,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2028}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":475772,"byte_end":475784,"line_start":808,"line_end":808,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2030}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":476094,"byte_end":476109,"line_start":818,"line_end":818,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2032}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":493491,"byte_end":493501,"line_start":81,"line_end":81,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2112},{"krate":0,"index":2113},{"krate":0,"index":2114},{"krate":0,"index":2115},{"krate":0,"index":2116},{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2121}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":501278,"byte_end":501288,"line_start":284,"line_end":284,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2124}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":501521,"byte_end":501539,"line_start":296,"line_end":296,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2127}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":502409,"byte_end":502424,"line_start":324,"line_end":324,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2131}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":502985,"byte_end":503002,"line_start":345,"line_end":345,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2134}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":507022,"byte_end":507040,"line_start":439,"line_end":439,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2137}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":509605,"byte_end":509618,"line_start":506,"line_end":506,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2140},{"krate":0,"index":2141}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":509929,"byte_end":509941,"line_start":519,"line_end":519,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2148},{"krate":0,"index":2150}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":511358,"byte_end":511369,"line_start":564,"line_end":564,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2154},{"krate":0,"index":2155},{"krate":0,"index":2158}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":513080,"byte_end":513091,"line_start":618,"line_end":618,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2161}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":513210,"byte_end":513221,"line_start":624,"line_end":624,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2164}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":513322,"byte_end":513335,"line_start":630,"line_end":630,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2167}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":518260,"byte_end":518277,"line_start":136,"line_end":136,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2190}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":518789,"byte_end":518799,"line_start":150,"line_end":150,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2192},{"krate":0,"index":2194}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":519769,"byte_end":519778,"line_start":175,"line_end":175,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2196},{"krate":0,"index":2197},{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2200},{"krate":0,"index":2201},{"krate":0,"index":2202},{"krate":0,"index":2203},{"krate":0,"index":2204}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":524452,"byte_end":524466,"line_start":297,"line_end":297,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2211}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":525065,"byte_end":525074,"line_start":316,"line_end":316,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2213}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":525267,"byte_end":525276,"line_start":325,"line_end":325,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2215}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":525470,"byte_end":525479,"line_start":334,"line_end":334,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2217}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":525674,"byte_end":525683,"line_start":343,"line_end":343,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2219}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":526722,"byte_end":526731,"line_start":23,"line_end":23,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":2271}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":528576,"byte_end":528582,"line_start":86,"line_end":86,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2273},{"krate":0,"index":2274}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":529851,"byte_end":529859,"line_start":131,"line_end":131,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2280},{"krate":0,"index":2281}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":530976,"byte_end":530986,"line_start":177,"line_end":177,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2297},{"krate":0,"index":2298},{"krate":0,"index":2299},{"krate":0,"index":2300},{"krate":0,"index":2301},{"krate":0,"index":2302},{"krate":0,"index":2303},{"krate":0,"index":2305},{"krate":0,"index":2306},{"krate":0,"index":2307},{"krate":0,"index":2308},{"krate":0,"index":2309},{"krate":0,"index":2310},{"krate":0,"index":2311}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":541921,"byte_end":541931,"line_start":479,"line_end":479,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2315},{"krate":0,"index":2316},{"krate":0,"index":2317},{"krate":0,"index":2318},{"krate":0,"index":2319},{"krate":0,"index":2320}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":543630,"byte_end":543639,"line_start":535,"line_end":535,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2327}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":544803,"byte_end":544814,"line_start":35,"line_end":35,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2369}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":546483,"byte_end":546493,"line_start":77,"line_end":77,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2372},{"krate":0,"index":2373}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":548172,"byte_end":548182,"line_start":117,"line_end":117,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2381},{"krate":0,"index":2382}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":548602,"byte_end":548613,"line_start":131,"line_end":131,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2386},{"krate":0,"index":2387},{"krate":0,"index":2388},{"krate":0,"index":2389},{"krate":0,"index":2390}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":550410,"byte_end":550421,"line_start":192,"line_end":192,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2398},{"krate":0,"index":2399}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":552096,"byte_end":552107,"line_start":226,"line_end":226,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2402}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":553171,"byte_end":553183,"line_start":25,"line_end":25,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2433}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":553320,"byte_end":553335,"line_start":28,"line_end":28,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2439}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":553922,"byte_end":553932,"line_start":43,"line_end":43,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2441}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":554089,"byte_end":554101,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":554327,"byte_end":554338,"line_start":59,"line_end":59,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2450},{"krate":0,"index":2451},{"krate":0,"index":2454},{"krate":0,"index":2457},{"krate":0,"index":2458}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":557211,"byte_end":557221,"line_start":150,"line_end":150,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2466},{"krate":0,"index":2467}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":557634,"byte_end":557645,"line_start":164,"line_end":164,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474},{"krate":0,"index":2475}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":587233,"byte_end":587245,"line_start":687,"line_end":687,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2566}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":588264,"byte_end":588274,"line_start":708,"line_end":708,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2568}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":588431,"byte_end":588443,"line_start":714,"line_end":714,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":588564,"byte_end":588574,"line_start":725,"line_end":725,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2577},{"krate":0,"index":2578},{"krate":0,"index":2579},{"krate":0,"index":2580},{"krate":0,"index":2581},{"krate":0,"index":2582},{"krate":0,"index":2583}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":592907,"byte_end":592917,"line_start":920,"line_end":920,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2609},{"krate":0,"index":2612},{"krate":0,"index":2613},{"krate":0,"index":2614},{"krate":0,"index":2617},{"krate":0,"index":2618},{"krate":0,"index":2619},{"krate":0,"index":2621},{"krate":0,"index":2625},{"krate":0,"index":2627},{"krate":0,"index":2628},{"krate":0,"index":2632}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":614256,"byte_end":614264,"line_start":1578,"line_end":1578,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2635},{"krate":0,"index":2636}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":614881,"byte_end":614889,"line_start":1601,"line_end":1601,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2638}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":614954,"byte_end":614964,"line_start":1607,"line_end":1607,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2640}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":615253,"byte_end":615263,"line_start":1619,"line_end":1619,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2642}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":615330,"byte_end":615339,"line_start":1625,"line_end":1625,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2644}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":615876,"byte_end":615885,"line_start":1643,"line_end":1643,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2646}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":639412,"byte_end":639426,"line_start":39,"line_end":39,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2714}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":640593,"byte_end":640607,"line_start":76,"line_end":76,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2723}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":641386,"byte_end":641400,"line_start":102,"line_end":102,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2726}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":644006,"byte_end":644021,"line_start":167,"line_end":167,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2740}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":644269,"byte_end":644284,"line_start":174,"line_end":174,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2744},{"krate":0,"index":2745},{"krate":0,"index":2746},{"krate":0,"index":2747},{"krate":0,"index":2748}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":644695,"byte_end":644710,"line_start":194,"line_end":194,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":2752}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":645518,"byte_end":645533,"line_start":220,"line_end":220,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2762},{"krate":0,"index":2763},{"krate":0,"index":2765}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":646654,"byte_end":646669,"line_start":255,"line_end":255,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2769}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":650509,"byte_end":650515,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2781},{"krate":0,"index":2782}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":651105,"byte_end":651111,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2785},{"krate":0,"index":2786}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":651630,"byte_end":651635,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2788},{"krate":0,"index":2789},{"krate":0,"index":2790},{"krate":0,"index":2791},{"krate":0,"index":2792},{"krate":0,"index":2793},{"krate":0,"index":2794}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652584,"byte_end":652589,"line_start":102,"line_end":102,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2796},{"krate":0,"index":2797},{"krate":0,"index":2799},{"krate":0,"index":2800},{"krate":0,"index":2801},{"krate":0,"index":2802}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":658625,"byte_end":658633,"line_start":258,"line_end":258,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2809}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":662065,"byte_end":662071,"line_start":25,"line_end":25,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2854},{"krate":0,"index":2855}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":662315,"byte_end":662321,"line_start":37,"line_end":37,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2860}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":662470,"byte_end":662476,"line_start":46,"line_end":46,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2864}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":662846,"byte_end":662855,"line_start":64,"line_end":64,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2873},{"krate":0,"index":2874}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":663111,"byte_end":663120,"line_start":76,"line_end":76,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2879}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":663269,"byte_end":663278,"line_start":85,"line_end":85,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2883}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":663682,"byte_end":663686,"line_start":105,"line_end":105,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2892},{"krate":0,"index":2893}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":664009,"byte_end":664013,"line_start":119,"line_end":119,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2898}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":664162,"byte_end":664166,"line_start":128,"line_end":128,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2902}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":664621,"byte_end":664628,"line_start":148,"line_end":148,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2911},{"krate":0,"index":2912}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":664964,"byte_end":664971,"line_start":162,"line_end":162,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2917}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":665120,"byte_end":665127,"line_start":171,"line_end":171,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2921}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":665623,"byte_end":665638,"line_start":194,"line_end":194,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2933},{"krate":0,"index":2934}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":666041,"byte_end":666056,"line_start":212,"line_end":212,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2939}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":666368,"byte_end":666381,"line_start":231,"line_end":231,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2949},{"krate":0,"index":2950}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":666919,"byte_end":666932,"line_start":255,"line_end":255,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2955}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":667268,"byte_end":667286,"line_start":275,"line_end":275,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2966},{"krate":0,"index":2967}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":667697,"byte_end":667715,"line_start":293,"line_end":293,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2972}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":668033,"byte_end":668049,"line_start":312,"line_end":312,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2982},{"krate":0,"index":2983}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":668596,"byte_end":668612,"line_start":336,"line_end":336,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2988}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670682,"byte_end":670693,"line_start":406,"line_end":406,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2992},{"krate":0,"index":2993},{"krate":0,"index":2994},{"krate":0,"index":2995},{"krate":0,"index":2996},{"krate":0,"index":2997},{"krate":0,"index":2998},{"krate":0,"index":2999},{"krate":0,"index":3000},{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3004},{"krate":0,"index":3007},{"krate":0,"index":3008},{"krate":0,"index":3009},{"krate":0,"index":3010},{"krate":0,"index":3011}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":676334,"byte_end":676345,"line_start":573,"line_end":573,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3015},{"krate":0,"index":3016},{"krate":0,"index":3017},{"krate":0,"index":3018},{"krate":0,"index":3019},{"krate":0,"index":3020}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":678515,"byte_end":678526,"line_start":642,"line_end":642,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3024}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":679178,"byte_end":679189,"line_start":667,"line_end":667,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3029}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":679932,"byte_end":679943,"line_start":694,"line_end":694,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3034},{"krate":0,"index":3035}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":680207,"byte_end":680218,"line_start":707,"line_end":707,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3039}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":680484,"byte_end":680495,"line_start":718,"line_end":718,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3043},{"krate":0,"index":3044}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":680766,"byte_end":680777,"line_start":731,"line_end":731,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3048}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":681038,"byte_end":681049,"line_start":742,"line_end":742,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3052}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":681408,"byte_end":681419,"line_start":757,"line_end":757,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3056},{"krate":0,"index":3057},{"krate":0,"index":3058},{"krate":0,"index":3059},{"krate":0,"index":3060},{"krate":0,"index":3061},{"krate":0,"index":3062}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":682243,"byte_end":682254,"line_start":790,"line_end":790,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3066},{"krate":0,"index":3067},{"krate":0,"index":3068},{"krate":0,"index":3069},{"krate":0,"index":3070},{"krate":0,"index":3071},{"krate":0,"index":3072}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":685839,"byte_end":685850,"line_start":882,"line_end":882,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3077},{"krate":0,"index":3078},{"krate":0,"index":3079},{"krate":0,"index":3081},{"krate":0,"index":3082}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":688284,"byte_end":688293,"line_start":960,"line_end":960,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3087}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":689691,"byte_end":689702,"line_start":998,"line_end":998,"column_start":67,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":3095}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698642,"byte_end":698651,"line_start":36,"line_end":36,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3118},{"krate":0,"index":3119},{"krate":0,"index":3121},{"krate":0,"index":3122}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700980,"byte_end":700997,"line_start":115,"line_end":115,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3124}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":702285,"byte_end":702302,"line_start":149,"line_end":149,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3126}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":708398,"byte_end":708399,"line_start":355,"line_end":355,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3133}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":708837,"byte_end":708838,"line_start":369,"line_end":369,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3140}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":710094,"byte_end":710098,"line_start":413,"line_end":413,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3151}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":710327,"byte_end":710331,"line_start":421,"line_end":421,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3154}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":710559,"byte_end":710563,"line_start":429,"line_end":429,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3157}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":710788,"byte_end":710792,"line_start":437,"line_end":437,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3160}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":711019,"byte_end":711023,"line_start":445,"line_end":445,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3163}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":711171,"byte_end":711175,"line_start":452,"line_end":452,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3165}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":711419,"byte_end":711423,"line_start":461,"line_end":461,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3167}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":711667,"byte_end":711671,"line_start":470,"line_end":470,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3169}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":711857,"byte_end":711861,"line_start":477,"line_end":477,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3171}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":712047,"byte_end":712051,"line_start":484,"line_end":484,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3173}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":712288,"byte_end":712293,"line_start":494,"line_end":494,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3176}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":712555,"byte_end":712560,"line_start":503,"line_end":503,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3179}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":712821,"byte_end":712826,"line_start":512,"line_end":512,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3182}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":713091,"byte_end":713096,"line_start":521,"line_end":521,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3185}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":713362,"byte_end":713367,"line_start":530,"line_end":530,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3188}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":713580,"byte_end":713585,"line_start":538,"line_end":538,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3190}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":713885,"byte_end":713890,"line_start":548,"line_end":548,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3192}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":714233,"byte_end":714237,"line_start":561,"line_end":561,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3195}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":714538,"byte_end":714542,"line_start":572,"line_end":572,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3198}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":714844,"byte_end":714848,"line_start":583,"line_end":583,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3201}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":715149,"byte_end":715153,"line_start":594,"line_end":594,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3204}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":715454,"byte_end":715458,"line_start":605,"line_end":605,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3207}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":715735,"byte_end":715739,"line_start":616,"line_end":616,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3209}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":716101,"byte_end":716105,"line_start":627,"line_end":627,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3211}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":716502,"byte_end":716506,"line_start":641,"line_end":641,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3214}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":716807,"byte_end":716811,"line_start":652,"line_end":652,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3217}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":717113,"byte_end":717117,"line_start":663,"line_end":663,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3220}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":717418,"byte_end":717422,"line_start":674,"line_end":674,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3223}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":717723,"byte_end":717727,"line_start":685,"line_end":685,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3226}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":718051,"byte_end":718054,"line_start":699,"line_end":699,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3229}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":718323,"byte_end":718326,"line_start":709,"line_end":709,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3232}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":718594,"byte_end":718597,"line_start":719,"line_end":719,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3235}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":718862,"byte_end":718865,"line_start":729,"line_end":729,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3238}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":719129,"byte_end":719132,"line_start":739,"line_end":739,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3241}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":719370,"byte_end":719373,"line_start":749,"line_end":749,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3243}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":719598,"byte_end":719601,"line_start":757,"line_end":757,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3245}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":719874,"byte_end":719877,"line_start":768,"line_end":768,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3248}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":720145,"byte_end":720148,"line_start":778,"line_end":778,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3251}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":720413,"byte_end":720416,"line_start":789,"line_end":789,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3254}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":720686,"byte_end":720689,"line_start":799,"line_end":799,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3257}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":720953,"byte_end":720956,"line_start":809,"line_end":809,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3260}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":722622,"byte_end":722627,"line_start":863,"line_end":863,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3266}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":723632,"byte_end":723636,"line_start":896,"line_end":896,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3269}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":723746,"byte_end":723750,"line_start":902,"line_end":902,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3272}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":725958,"byte_end":725962,"line_start":960,"line_end":960,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3275}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":728168,"byte_end":728171,"line_start":1016,"line_end":1016,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3278}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":728280,"byte_end":728283,"line_start":1022,"line_end":1022,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3281}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":728502,"byte_end":728507,"line_start":1035,"line_end":1035,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3286}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":728680,"byte_end":728684,"line_start":1044,"line_end":1044,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3289}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":728872,"byte_end":728876,"line_start":1055,"line_end":1055,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3292}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":729089,"byte_end":729093,"line_start":1066,"line_end":1066,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3295}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":729306,"byte_end":729309,"line_start":1077,"line_end":1077,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3298}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":729571,"byte_end":729574,"line_start":1091,"line_end":1091,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3301}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":741099,"byte_end":741111,"line_start":133,"line_end":133,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3352},{"krate":0,"index":3353},{"krate":0,"index":3354},{"krate":0,"index":3355},{"krate":0,"index":3356},{"krate":0,"index":3357},{"krate":0,"index":3358},{"krate":0,"index":3359},{"krate":0,"index":3360},{"krate":0,"index":3361},{"krate":0,"index":3362},{"krate":0,"index":3365},{"krate":0,"index":3366},{"krate":0,"index":3367},{"krate":0,"index":3368},{"krate":0,"index":3369},{"krate":0,"index":3370},{"krate":0,"index":3371},{"krate":0,"index":3372},{"krate":0,"index":3373},{"krate":0,"index":3374},{"krate":0,"index":3375},{"krate":0,"index":3376},{"krate":0,"index":3377},{"krate":0,"index":3378},{"krate":0,"index":3379},{"krate":0,"index":3380},{"krate":0,"index":3381},{"krate":0,"index":3382},{"krate":0,"index":3383},{"krate":0,"index":3384},{"krate":0,"index":3385},{"krate":0,"index":3386},{"krate":0,"index":3387},{"krate":0,"index":3388},{"krate":0,"index":3389},{"krate":0,"index":3390},{"krate":0,"index":3391},{"krate":0,"index":3392},{"krate":0,"index":3393},{"krate":0,"index":3394},{"krate":0,"index":3395},{"krate":0,"index":3396},{"krate":0,"index":3397},{"krate":0,"index":3398},{"krate":0,"index":3399},{"krate":0,"index":3400},{"krate":0,"index":3401},{"krate":0,"index":3402},{"krate":0,"index":3403},{"krate":0,"index":3404},{"krate":0,"index":3405},{"krate":0,"index":3406},{"krate":0,"index":3407},{"krate":0,"index":3408},{"krate":0,"index":3409},{"krate":0,"index":3410},{"krate":0,"index":3411},{"krate":0,"index":3412},{"krate":0,"index":3413},{"krate":0,"index":3414},{"krate":0,"index":3415},{"krate":0,"index":3416},{"krate":0,"index":3417},{"krate":0,"index":3418},{"krate":0,"index":3419},{"krate":0,"index":3420},{"krate":0,"index":3421},{"krate":0,"index":3424},{"krate":0,"index":3426}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":765345,"byte_end":765357,"line_start":806,"line_end":806,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3429},{"krate":0,"index":3430},{"krate":0,"index":3431},{"krate":0,"index":3432},{"krate":0,"index":3433},{"krate":0,"index":3434}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":765890,"byte_end":765902,"line_start":828,"line_end":828,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3436},{"krate":0,"index":3437},{"krate":0,"index":3438},{"krate":0,"index":3439},{"krate":0,"index":3440}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780179,"byte_end":780190,"line_start":64,"line_end":64,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3482}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":781600,"byte_end":781617,"line_start":113,"line_end":113,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3485}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":782756,"byte_end":782771,"line_start":146,"line_end":146,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3493},{"krate":0,"index":3494}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790418,"byte_end":790426,"line_start":324,"line_end":324,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3509},{"krate":0,"index":3510},{"krate":0,"index":3511}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":797057,"byte_end":797063,"line_start":513,"line_end":513,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3547},{"krate":0,"index":3548}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Inherent","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":805208,"byte_end":805216,"line_start":751,"line_end":751,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3587},{"krate":0,"index":3588},{"krate":0,"index":3589}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":806353,"byte_end":806361,"line_start":792,"line_end":792,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3592},{"krate":0,"index":3593},{"krate":0,"index":3594},{"krate":0,"index":3595},{"krate":0,"index":3596},{"krate":0,"index":3597},{"krate":0,"index":3598}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":807182,"byte_end":807190,"line_start":824,"line_end":824,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3601},{"krate":0,"index":3602},{"krate":0,"index":3603},{"krate":0,"index":3604},{"krate":0,"index":3605},{"krate":0,"index":3606}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":6791,"byte_end":6796,"line_start":159,"line_end":159,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":54}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7189,"byte_end":7193,"line_start":178,"line_end":178,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":127}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/mod.rs","byte_start":26456,"byte_end":26458,"line_start":2,"line_end":2,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":128}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/mod.rs","byte_start":26468,"byte_end":26473,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":166}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7234,"byte_end":7242,"line_start":181,"line_end":181,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":171}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/mod.rs","byte_start":42556,"byte_end":42564,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":256}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7268,"byte_end":7270,"line_start":184,"line_end":184,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":417}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7316,"byte_end":7320,"line_start":187,"line_end":187,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":522}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7371,"byte_end":7374,"line_start":191,"line_end":191,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":691}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7408,"byte_end":7411,"line_start":193,"line_end":193,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":941}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7445,"byte_end":7448,"line_start":195,"line_end":195,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":994}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7482,"byte_end":7485,"line_start":197,"line_end":197,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1111}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7519,"byte_end":7522,"line_start":199,"line_end":199,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1212}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7556,"byte_end":7559,"line_start":201,"line_end":201,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1436}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7594,"byte_end":7598,"line_start":203,"line_end":203,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1560}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7632,"byte_end":7635,"line_start":205,"line_end":205,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1755}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7669,"byte_end":7672,"line_start":207,"line_end":207,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1832}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7706,"byte_end":7709,"line_start":209,"line_end":209,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2220}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7744,"byte_end":7748,"line_start":211,"line_end":211,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2329}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7783,"byte_end":7787,"line_start":213,"line_end":213,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2403}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/mod.rs","byte_start":552430,"byte_end":552433,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2482}},{"kind":"Mod","span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/lib.rs","byte_start":7826,"byte_end":7834,"line_start":215,"line_end":215,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2675}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":15915,"byte_end":15931,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3731},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":16629,"byte_end":16642,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":17418,"byte_end":17431,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18208,"byte_end":18222,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3765},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18601,"byte_end":18611,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3799},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":18968,"byte_end":18978,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3710},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":19094,"byte_end":19109,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3825},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":19238,"byte_end":19253,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3825},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":19503,"byte_end":19519,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3731},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":19822,"byte_end":19832,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3710},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":20293,"byte_end":20303,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3710},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":20756,"byte_end":20772,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3731},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":22394,"byte_end":22410,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3731},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":22438,"byte_end":22452,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3765},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":23487,"byte_end":23501,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3765},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":23706,"byte_end":23719,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3760},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":24180,"byte_end":24193,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3760},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":24398,"byte_end":24411,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3794},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":24858,"byte_end":24871,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3794},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":25076,"byte_end":25086,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3799},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":25469,"byte_end":25479,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3799},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/error.rs","byte_start":25507,"byte_end":25522,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3825},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/math/nq.rs","byte_start":28966,"byte_end":28974,"line_start":73,"line_end":73,"column_start":6,"column_end":14},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":144},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":67749,"byte_end":67756,"line_start":195,"line_end":195,"column_start":19,"column_end":26},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":3882},"to":{"krate":0,"index":295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/colorops.rs","byte_start":68200,"byte_end":68208,"line_start":216,"line_end":216,"column_start":23,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":144},"to":{"krate":0,"index":295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/imageops/sample.rs","byte_start":83167,"byte_end":83179,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":353},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":102065,"byte_end":102071,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":103432,"byte_end":103438,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/reader.rs","byte_start":104203,"byte_end":104209,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/io/free_functions.rs","byte_start":118534,"byte_end":118544,"line_start":287,"line_end":287,"column_start":26,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3710},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":122600,"byte_end":122612,"line_start":110,"line_end":110,"column_start":6,"column_end":18},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":3914},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":135207,"byte_end":135210,"line_start":423,"line_end":423,"column_start":6,"column_end":9},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":3936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":135468,"byte_end":135479,"line_start":438,"line_end":438,"column_start":14,"column_end":25},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":3903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":157211,"byte_end":157215,"line_start":973,"line_end":973,"column_start":24,"column_end":28},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":3964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":162800,"byte_end":162807,"line_start":1106,"line_end":1106,"column_start":24,"column_end":31},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":3977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":167183,"byte_end":167194,"line_start":1220,"line_end":1220,"column_start":40,"column_end":51},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":3903},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":167803,"byte_end":167814,"line_start":1239,"line_end":1239,"column_start":43,"column_end":54},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":3903},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":168418,"byte_end":168422,"line_start":1257,"line_end":1257,"column_start":45,"column_end":49},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":3964},"to":{"krate":0,"index":3549}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":169669,"byte_end":169676,"line_start":1302,"line_end":1302,"column_start":45,"column_end":52},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":3977},"to":{"krate":0,"index":3549}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":170943,"byte_end":170950,"line_start":1347,"line_end":1347,"column_start":41,"column_end":48},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":3977},"to":{"krate":0,"index":3562}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":171845,"byte_end":171855,"line_start":1376,"line_end":1376,"column_start":22,"column_end":32},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":3710},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":172007,"byte_end":172030,"line_start":1380,"line_end":1380,"column_start":31,"column_end":54},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":4039},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":172238,"byte_end":172261,"line_start":1385,"line_end":1385,"column_start":31,"column_end":54},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":4039},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/flat.rs","byte_start":172833,"byte_end":172843,"line_start":1399,"line_end":1399,"column_start":21,"column_end":31},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":4014},"to":{"krate":2,"index":1656}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":181646,"byte_end":181657,"line_start":100,"line_end":100,"column_start":23,"column_end":34},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":760},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":183580,"byte_end":183592,"line_start":158,"line_end":158,"column_start":23,"column_end":35},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":185663,"byte_end":185673,"line_start":195,"line_end":195,"column_start":29,"column_end":39},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":3710},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":185829,"byte_end":185841,"line_start":201,"line_end":201,"column_start":23,"column_end":35},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":4097},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":186188,"byte_end":186205,"line_start":216,"line_end":216,"column_start":23,"column_end":40},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":4174},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":194862,"byte_end":194870,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":4205},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":196256,"byte_end":196265,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":4215},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":197530,"byte_end":197545,"line_start":578,"line_end":578,"column_start":32,"column_end":47},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":833},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":199401,"byte_end":199411,"line_start":630,"line_end":630,"column_start":22,"column_end":32},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":231315,"byte_end":231324,"line_start":1420,"line_end":1420,"column_start":18,"column_end":27},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":878},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":231744,"byte_end":231754,"line_start":1434,"line_end":1434,"column_start":52,"column_end":62},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":800},"to":{"krate":0,"index":3512}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/decoder.rs","byte_start":232429,"byte_end":232439,"line_start":1459,"line_end":1459,"column_start":55,"column_end":65},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":800},"to":{"krate":0,"index":3525}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/encoder.rs","byte_start":233960,"byte_end":233970,"line_start":17,"line_end":17,"column_start":25,"column_end":35},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":919},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/bmp/encoder.rs","byte_start":241090,"byte_end":241100,"line_start":214,"line_end":214,"column_start":37,"column_end":47},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":919},"to":{"krate":0,"index":3534}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":246284,"byte_end":246296,"line_start":34,"line_end":34,"column_start":23,"column_end":35},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":4227},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":246936,"byte_end":246946,"line_start":49,"line_end":49,"column_start":29,"column_end":39},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":3710},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":247102,"byte_end":247114,"line_start":55,"line_end":55,"column_start":23,"column_end":35},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":4227},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":247583,"byte_end":247594,"line_start":83,"line_end":83,"column_start":6,"column_end":17},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":4274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":248318,"byte_end":248324,"line_start":106,"line_end":106,"column_start":6,"column_end":12},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":4262},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":250000,"byte_end":250010,"line_start":159,"line_end":159,"column_start":15,"column_end":25},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":978},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dds.rs","byte_start":251502,"byte_end":251512,"line_start":198,"line_end":198,"column_start":45,"column_end":55},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":978},"to":{"krate":0,"index":3512}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":253313,"byte_end":253323,"line_start":33,"line_end":33,"column_start":6,"column_end":16},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":4285},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":254280,"byte_end":254290,"line_start":69,"line_end":69,"column_start":15,"column_end":25},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1018},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":256042,"byte_end":256052,"line_start":117,"line_end":117,"column_start":45,"column_end":55},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1018},"to":{"krate":0,"index":3512}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":256949,"byte_end":256959,"line_start":149,"line_end":149,"column_start":55,"column_end":65},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1018},"to":{"krate":0,"index":3525}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":257933,"byte_end":257942,"line_start":179,"line_end":179,"column_start":24,"column_end":33},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1046},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dxt.rs","byte_start":258202,"byte_end":258212,"line_start":191,"line_end":191,"column_start":16,"column_end":26},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1054},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":282062,"byte_end":282072,"line_start":51,"line_end":51,"column_start":15,"column_end":25},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":282524,"byte_end":282533,"line_start":65,"line_end":65,"column_start":18,"column_end":27},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1153},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":282946,"byte_end":282956,"line_start":79,"line_end":79,"column_start":45,"column_end":55},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1147},"to":{"krate":0,"index":3512}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":285903,"byte_end":285919,"line_start":156,"line_end":156,"column_start":15,"column_end":31},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1172},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":286531,"byte_end":286547,"line_start":178,"line_end":178,"column_start":28,"column_end":44},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1172},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":291253,"byte_end":291263,"line_start":286,"line_end":286,"column_start":49,"column_end":59},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1147},"to":{"krate":0,"index":3531}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":291526,"byte_end":291533,"line_start":298,"line_end":298,"column_start":16,"column_end":23},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/gif.rs","byte_start":295530,"byte_end":295540,"line_start":408,"line_end":408,"column_start":6,"column_end":16},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":297829,"byte_end":297841,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":4303},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":299491,"byte_end":299501,"line_start":78,"line_end":78,"column_start":29,"column_end":39},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":3710},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":299657,"byte_end":299669,"line_start":84,"line_end":84,"column_start":23,"column_end":35},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":4303},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":300171,"byte_end":300179,"line_start":104,"line_end":104,"column_start":23,"column_end":31},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":4347},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":300773,"byte_end":300783,"line_start":124,"line_end":124,"column_start":18,"column_end":28},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":4376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":302154,"byte_end":302163,"line_start":166,"line_end":166,"column_start":18,"column_end":27},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1265},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":302579,"byte_end":302589,"line_start":180,"line_end":180,"column_start":48,"column_end":58},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":4376},"to":{"krate":0,"index":3512}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":303097,"byte_end":303107,"line_start":200,"line_end":200,"column_start":58,"column_end":68},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":4376},"to":{"krate":0,"index":3525}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":304143,"byte_end":304153,"line_start":243,"line_end":243,"column_start":6,"column_end":16},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":4392},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":306459,"byte_end":306469,"line_start":308,"line_end":308,"column_start":18,"column_end":28},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":4383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":312149,"byte_end":312159,"line_start":461,"line_end":461,"column_start":35,"column_end":45},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":4383},"to":{"krate":2,"index":4680}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":313059,"byte_end":313082,"line_start":489,"line_end":489,"column_start":18,"column_end":41},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1321},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":313375,"byte_end":313398,"line_start":502,"line_end":502,"column_start":31,"column_end":54},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1321},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":315206,"byte_end":315229,"line_start":553,"line_end":553,"column_start":40,"column_end":63},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1321},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/decoder.rs","byte_start":321680,"byte_end":321691,"line_start":729,"line_end":729,"column_start":6,"column_end":17},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":4412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":331624,"byte_end":331634,"line_start":12,"line_end":12,"column_start":16,"column_end":26},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":334196,"byte_end":334207,"line_start":89,"line_end":89,"column_start":10,"column_end":21},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":334333,"byte_end":334344,"line_start":95,"line_end":95,"column_start":23,"column_end":34},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":335045,"byte_end":335065,"line_start":124,"line_end":124,"column_start":10,"column_end":30},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/hdr/encoder.rs","byte_start":335324,"byte_end":335344,"line_start":134,"line_end":134,"column_start":23,"column_end":43},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1418},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":349030,"byte_end":349042,"line_start":48,"line_end":48,"column_start":23,"column_end":35},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":4442},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":350169,"byte_end":350179,"line_start":69,"line_end":69,"column_start":29,"column_end":39},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":3710},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":350335,"byte_end":350347,"line_start":75,"line_end":75,"column_start":23,"column_end":35},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":4442},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":350588,"byte_end":350607,"line_start":86,"line_end":86,"column_start":23,"column_end":42},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":4490},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":350847,"byte_end":350866,"line_start":95,"line_end":95,"column_start":28,"column_end":47},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":4490},"to":{"krate":2,"index":1804}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":351505,"byte_end":351515,"line_start":129,"line_end":129,"column_start":22,"column_end":32},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1480},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":353812,"byte_end":353820,"line_start":201,"line_end":201,"column_start":6,"column_end":14},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":4513},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":355133,"byte_end":355142,"line_start":249,"line_end":249,"column_start":18,"column_end":27},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1513},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/decoder.rs","byte_start":355562,"byte_end":355572,"line_start":263,"line_end":263,"column_start":52,"column_end":62},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1480},"to":{"krate":0,"index":3512}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/encoder.rs","byte_start":360695,"byte_end":360705,"line_start":22,"line_end":22,"column_start":16,"column_end":26},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1544},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/ico/encoder.rs","byte_start":361699,"byte_end":361709,"line_start":55,"line_end":55,"column_start":33,"column_end":43},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1544},"to":{"krate":0,"index":3534}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":364287,"byte_end":364298,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1584},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":365007,"byte_end":365017,"line_start":40,"line_end":40,"column_start":18,"column_end":28},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1591},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":365430,"byte_end":365441,"line_start":54,"line_end":54,"column_start":45,"column_end":56},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1584},"to":{"krate":0,"index":3512}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":367187,"byte_end":367196,"line_start":114,"line_end":114,"column_start":6,"column_end":15},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":5058},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/decoder.rs","byte_start":367454,"byte_end":367464,"line_start":125,"line_end":125,"column_start":6,"column_end":16},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":3710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":393586,"byte_end":393595,"line_start":169,"line_end":169,"column_start":25,"column_end":34},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1668},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":397104,"byte_end":397116,"line_start":305,"line_end":305,"column_start":6,"column_end":18},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":4562},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":397454,"byte_end":397466,"line_start":317,"line_end":317,"column_start":18,"column_end":30},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":4562},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":398042,"byte_end":398053,"line_start":342,"line_end":342,"column_start":20,"column_end":31},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/jpeg/encoder.rs","byte_start":407947,"byte_end":407958,"line_start":644,"line_end":644,"column_start":37,"column_end":48},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1687},"to":{"krate":0,"index":3534}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":426522,"byte_end":426531,"line_start":29,"line_end":29,"column_start":15,"column_end":24},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":427289,"byte_end":427298,"line_start":53,"line_end":53,"column_start":24,"column_end":33},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1778},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":428553,"byte_end":428563,"line_start":99,"line_end":99,"column_start":15,"column_end":25},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":432060,"byte_end":432070,"line_start":164,"line_end":164,"column_start":45,"column_end":55},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1790},"to":{"krate":0,"index":3512}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":433481,"byte_end":433491,"line_start":211,"line_end":211,"column_start":16,"column_end":26},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":435118,"byte_end":435128,"line_start":244,"line_end":244,"column_start":33,"column_end":43},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1812},"to":{"krate":0,"index":3534}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/png.rs","byte_start":436363,"byte_end":436373,"line_start":276,"line_end":276,"column_start":6,"column_end":16},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":3710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/autobreak.rs","byte_start":444452,"byte_end":444461,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1849},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/autobreak.rs","byte_start":445722,"byte_end":445731,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1849},"to":{"krate":1,"index":2915}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/autobreak.rs","byte_start":446357,"byte_end":446366,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1849},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":450216,"byte_end":450228,"line_start":80,"line_end":80,"column_start":18,"column_end":30},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":4577},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":453057,"byte_end":453067,"line_start":128,"line_end":128,"column_start":29,"column_end":39},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3710},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":453223,"byte_end":453235,"line_start":134,"line_end":134,"column_start":23,"column_end":35},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":4577},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":453711,"byte_end":453724,"line_start":156,"line_end":156,"column_start":18,"column_end":31},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":4634},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":454316,"byte_end":454331,"line_start":178,"line_end":178,"column_start":18,"column_end":33},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":4661},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":455483,"byte_end":455493,"line_start":226,"line_end":226,"column_start":15,"column_end":25},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1938},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":458645,"byte_end":458652,"line_start":317,"line_end":317,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2937},"to":{"krate":0,"index":1951}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":466169,"byte_end":466178,"line_start":511,"line_end":511,"column_start":32,"column_end":41},"kind":{"Impl":{"id":136}},"from":{"krate":1,"index":2312},"to":{"krate":0,"index":1951}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":466307,"byte_end":466316,"line_start":515,"line_end":515,"column_start":18,"column_end":27},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1973},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":466729,"byte_end":466739,"line_start":529,"line_end":529,"column_start":45,"column_end":55},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1938},"to":{"krate":0,"index":3512}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":468446,"byte_end":468456,"line_start":576,"line_end":576,"column_start":15,"column_end":25},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1938},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":470883,"byte_end":470885,"line_start":642,"line_end":642,"column_start":17,"column_end":19},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1928},"to":{"krate":0,"index":1924}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":471550,"byte_end":471553,"line_start":669,"line_end":669,"column_start":17,"column_end":20},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1930},"to":{"krate":0,"index":1924}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":472825,"byte_end":472831,"line_start":708,"line_end":708,"column_start":17,"column_end":23},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1932},"to":{"krate":0,"index":1924}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":474451,"byte_end":474456,"line_start":762,"line_end":762,"column_start":17,"column_end":22},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1934},"to":{"krate":0,"index":1924}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":475306,"byte_end":475318,"line_start":792,"line_end":792,"column_start":31,"column_end":43},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":4761},"to":{"krate":0,"index":1936}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":475443,"byte_end":475456,"line_start":798,"line_end":798,"column_start":31,"column_end":44},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":4770},"to":{"krate":0,"index":1936}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":475772,"byte_end":475784,"line_start":808,"line_end":808,"column_start":31,"column_end":43},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":4780},"to":{"krate":0,"index":1936}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/decoder.rs","byte_start":476094,"byte_end":476109,"line_start":818,"line_end":818,"column_start":31,"column_end":46},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":4790},"to":{"krate":0,"index":1936}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":493491,"byte_end":493501,"line_start":81,"line_end":81,"column_start":16,"column_end":26},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2074},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":501278,"byte_end":501288,"line_start":284,"line_end":284,"column_start":33,"column_end":43},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":2074},"to":{"krate":0,"index":3534}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":501521,"byte_end":501539,"line_start":296,"line_end":296,"column_start":10,"column_end":28},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":2078},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":502409,"byte_end":502424,"line_start":324,"line_end":324,"column_start":10,"column_end":25},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":2084},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":502985,"byte_end":503002,"line_start":345,"line_end":345,"column_start":10,"column_end":27},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":2087},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":507022,"byte_end":507040,"line_start":439,"line_end":439,"column_start":10,"column_end":28},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":2092},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":509605,"byte_end":509618,"line_start":506,"line_end":506,"column_start":10,"column_end":23},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":2096},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":509929,"byte_end":509941,"line_start":519,"line_end":519,"column_start":10,"column_end":22},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":2142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":511358,"byte_end":511369,"line_start":564,"line_end":564,"column_start":10,"column_end":21},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":4708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":513080,"byte_end":513091,"line_start":618,"line_end":618,"column_start":29,"column_end":40},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":4708},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":513210,"byte_end":513221,"line_start":624,"line_end":624,"column_start":30,"column_end":41},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":4708},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/encoder.rs","byte_start":513322,"byte_end":513335,"line_start":630,"line_end":630,"column_start":10,"column_end":23},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":2101},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":518260,"byte_end":518277,"line_start":136,"line_end":136,"column_start":6,"column_end":23},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":4800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":518789,"byte_end":518799,"line_start":150,"line_end":150,"column_start":6,"column_end":16},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":4737},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":519769,"byte_end":519778,"line_start":175,"line_end":175,"column_start":6,"column_end":15},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":2173},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":524452,"byte_end":524466,"line_start":297,"line_end":297,"column_start":43,"column_end":57},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":2205},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":525065,"byte_end":525074,"line_start":316,"line_end":316,"column_start":29,"column_end":38},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":2173},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":525267,"byte_end":525276,"line_start":325,"line_end":325,"column_start":30,"column_end":39},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":2173},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":525470,"byte_end":525479,"line_start":334,"line_end":334,"column_start":29,"column_end":38},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":2173},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/pnm/header.rs","byte_start":525674,"byte_end":525683,"line_start":343,"line_end":343,"column_start":32,"column_end":41},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":2173},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":526722,"byte_end":526731,"line_start":23,"line_end":23,"column_start":6,"column_end":15},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":2243},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":528576,"byte_end":528582,"line_start":86,"line_end":86,"column_start":6,"column_end":12},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":4820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":529851,"byte_end":529859,"line_start":131,"line_end":131,"column_start":6,"column_end":14},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":2275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":530976,"byte_end":530986,"line_start":177,"line_end":177,"column_start":22,"column_end":32},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":2282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":541921,"byte_end":541931,"line_start":479,"line_end":479,"column_start":52,"column_end":62},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":2282},"to":{"krate":0,"index":3512}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tga/decoder.rs","byte_start":543630,"byte_end":543639,"line_start":535,"line_end":535,"column_start":31,"column_end":40},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":2321},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":544803,"byte_end":544814,"line_start":35,"line_end":35,"column_start":9,"column_end":20},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":2362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":546483,"byte_end":546493,"line_start":77,"line_end":77,"column_start":6,"column_end":16},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":3710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":548172,"byte_end":548182,"line_start":117,"line_end":117,"column_start":18,"column_end":28},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":2374},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":548602,"byte_end":548613,"line_start":131,"line_end":131,"column_start":52,"column_end":63},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":2362},"to":{"krate":0,"index":3512}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":550410,"byte_end":550421,"line_start":192,"line_end":192,"column_start":23,"column_end":34},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":2391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/tiff.rs","byte_start":552096,"byte_end":552107,"line_start":226,"line_end":226,"column_start":40,"column_end":51},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":2391},"to":{"krate":0,"index":3534}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":553171,"byte_end":553183,"line_start":25,"line_end":25,"column_start":23,"column_end":35},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":4835},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":553320,"byte_end":553335,"line_start":28,"line_end":28,"column_start":31,"column_end":46},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":2434},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":553922,"byte_end":553932,"line_start":43,"line_end":43,"column_start":29,"column_end":39},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":3710},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":554089,"byte_end":554101,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":4835},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":554327,"byte_end":554338,"line_start":59,"line_end":59,"column_start":15,"column_end":26},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":2443},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":557211,"byte_end":557221,"line_start":150,"line_end":150,"column_start":18,"column_end":28},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":2459},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/decoder.rs","byte_start":557634,"byte_end":557645,"line_start":164,"line_end":164,"column_start":45,"column_end":56},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":2443},"to":{"krate":0,"index":3512}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":587233,"byte_end":587245,"line_start":687,"line_end":687,"column_start":23,"column_end":35},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":4948},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":588264,"byte_end":588274,"line_start":708,"line_end":708,"column_start":29,"column_end":39},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":3710},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":588431,"byte_end":588443,"line_start":714,"line_end":714,"column_start":23,"column_end":35},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":4948},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":588564,"byte_end":588574,"line_start":725,"line_end":725,"column_start":6,"column_end":16},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":2570},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":592907,"byte_end":592917,"line_start":920,"line_end":920,"column_start":15,"column_end":25},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":2584},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":614256,"byte_end":614264,"line_start":1578,"line_end":1578,"column_start":6,"column_end":14},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":4851},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":614881,"byte_end":614889,"line_start":1601,"line_end":1601,"column_start":18,"column_end":26},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":4851},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":614954,"byte_end":614964,"line_start":1607,"line_end":1607,"column_start":6,"column_end":16},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":4878},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":615253,"byte_end":615263,"line_start":1619,"line_end":1619,"column_start":18,"column_end":28},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":4878},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":615330,"byte_end":615339,"line_start":1625,"line_end":1625,"column_start":6,"column_end":15},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":4902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/webp/vp8.rs","byte_start":615876,"byte_end":615885,"line_start":1643,"line_end":1643,"column_start":18,"column_end":27},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":4902},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":639412,"byte_end":639426,"line_start":39,"line_end":39,"column_start":15,"column_end":29},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2705},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":640593,"byte_end":640607,"line_start":76,"line_end":76,"column_start":24,"column_end":38},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":2705},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":641386,"byte_end":641400,"line_start":102,"line_end":102,"column_start":31,"column_end":45},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":2705},"to":{"krate":1,"index":2931}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":644006,"byte_end":644021,"line_start":167,"line_end":167,"column_start":15,"column_end":30},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":2735},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":644269,"byte_end":644284,"line_start":174,"line_end":174,"column_start":45,"column_end":60},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":2735},"to":{"krate":0,"index":3512}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":644695,"byte_end":644710,"line_start":194,"line_end":194,"column_start":55,"column_end":70},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":2735},"to":{"krate":0,"index":3525}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":645518,"byte_end":645533,"line_start":220,"line_end":220,"column_start":16,"column_end":31},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2757},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/farbfeld.rs","byte_start":646654,"byte_end":646669,"line_start":255,"line_end":255,"column_start":33,"column_end":48},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":2757},"to":{"krate":0,"index":3534}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":650509,"byte_end":650515,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":2776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":651105,"byte_end":651111,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":2776},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":651630,"byte_end":651635,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":5020},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":652584,"byte_end":652589,"line_start":102,"line_end":102,"column_start":6,"column_end":11},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":5027},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/animation.rs","byte_start":658625,"byte_end":658633,"line_start":258,"line_end":258,"column_start":22,"column_end":30},"kind":{"Impl":{"id":210}},"from":{"krate":2,"index":31693},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":662065,"byte_end":662071,"line_start":25,"line_end":25,"column_start":38,"column_end":44},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2847},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":662315,"byte_end":662321,"line_start":37,"line_end":37,"column_start":47,"column_end":53},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2847},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":662470,"byte_end":662476,"line_start":46,"line_end":46,"column_start":49,"column_end":55},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":2847},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":662846,"byte_end":662855,"line_start":64,"line_end":64,"column_start":38,"column_end":47},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2866},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":663111,"byte_end":663120,"line_start":76,"line_end":76,"column_start":47,"column_end":56},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":2866},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":663269,"byte_end":663278,"line_start":85,"line_end":85,"column_start":49,"column_end":58},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":2866},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":663682,"byte_end":663686,"line_start":105,"line_end":105,"column_start":38,"column_end":42},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":2885},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":664009,"byte_end":664013,"line_start":119,"line_end":119,"column_start":47,"column_end":51},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":2885},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":664162,"byte_end":664166,"line_start":128,"line_end":128,"column_start":49,"column_end":53},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":2885},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":664621,"byte_end":664628,"line_start":148,"line_end":148,"column_start":38,"column_end":45},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":2904},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":664964,"byte_end":664971,"line_start":162,"line_end":162,"column_start":47,"column_end":54},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":2904},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":665120,"byte_end":665127,"line_start":171,"line_end":171,"column_start":49,"column_end":56},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":2904},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":665623,"byte_end":665638,"line_start":194,"line_end":194,"column_start":38,"column_end":53},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":2923},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":666041,"byte_end":666056,"line_start":212,"line_end":212,"column_start":47,"column_end":62},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":2923},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":666368,"byte_end":666381,"line_start":231,"line_end":231,"column_start":38,"column_end":51},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":2940},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":666919,"byte_end":666932,"line_start":255,"line_end":255,"column_start":47,"column_end":60},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":2940},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":667268,"byte_end":667286,"line_start":275,"line_end":275,"column_start":38,"column_end":56},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":2956},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":667697,"byte_end":667715,"line_start":293,"line_end":293,"column_start":47,"column_end":65},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":2956},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":668033,"byte_end":668049,"line_start":312,"line_end":312,"column_start":38,"column_end":54},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":2973},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":668596,"byte_end":668612,"line_start":336,"line_end":336,"column_start":47,"column_end":63},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":2973},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":670682,"byte_end":670693,"line_start":406,"line_end":406,"column_start":20,"column_end":31},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":5047},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":676334,"byte_end":676345,"line_start":573,"line_end":573,"column_start":20,"column_end":31},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":5047},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":678515,"byte_end":678526,"line_start":642,"line_end":642,"column_start":20,"column_end":31},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":5047},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":679178,"byte_end":679189,"line_start":667,"line_end":667,"column_start":20,"column_end":31},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":5047},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":679932,"byte_end":679943,"line_start":694,"line_end":694,"column_start":30,"column_end":41},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":5047},"to":{"krate":2,"index":2054}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":680207,"byte_end":680218,"line_start":707,"line_end":707,"column_start":33,"column_end":44},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":5047},"to":{"krate":2,"index":2065}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":680484,"byte_end":680495,"line_start":718,"line_end":718,"column_start":42,"column_end":53},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":5047},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":680766,"byte_end":680777,"line_start":731,"line_end":731,"column_start":45,"column_end":56},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":5047},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":681038,"byte_end":681049,"line_start":742,"line_end":742,"column_start":30,"column_end":41},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":5047},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":681408,"byte_end":681419,"line_start":757,"line_end":757,"column_start":41,"column_end":52},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":5047},"to":{"krate":0,"index":3549}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":682243,"byte_end":682254,"line_start":790,"line_end":790,"column_start":37,"column_end":48},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":5047},"to":{"krate":0,"index":3562}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":685839,"byte_end":685850,"line_start":882,"line_end":882,"column_start":26,"column_end":37},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":5047},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":688284,"byte_end":688293,"line_start":960,"line_end":960,"column_start":6,"column_end":15},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":3098},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/buffer.rs","byte_start":689691,"byte_end":689702,"line_start":998,"line_end":998,"column_start":67,"column_end":78},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":5047},"to":{"krate":0,"index":3083}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":698642,"byte_end":698651,"line_start":36,"line_end":36,"column_start":6,"column_end":15},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":5058},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":700980,"byte_end":700997,"line_start":115,"line_end":115,"column_start":6,"column_end":23},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":5097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":702285,"byte_end":702302,"line_start":149,"line_end":149,"column_start":26,"column_end":43},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":5097},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":708398,"byte_end":708399,"line_start":355,"line_end":355,"column_start":32,"column_end":33},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":3132},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":708837,"byte_end":708838,"line_start":369,"line_end":369,"column_start":29,"column_end":30},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":3139},"to":{"krate":0,"index":3134}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":710094,"byte_end":710098,"line_start":413,"line_end":413,"column_start":53,"column_end":57},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":5521},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":710327,"byte_end":710331,"line_start":421,"line_end":421,"column_start":53,"column_end":57},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":5521},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":710559,"byte_end":710563,"line_start":429,"line_end":429,"column_start":52,"column_end":56},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":5521},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":710788,"byte_end":710792,"line_start":437,"line_end":437,"column_start":52,"column_end":56},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":5521},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":711019,"byte_end":711023,"line_start":445,"line_end":445,"column_start":54,"column_end":58},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":5521},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":711171,"byte_end":711175,"line_start":452,"line_end":452,"column_start":31,"column_end":35},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":5521},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":711419,"byte_end":711423,"line_start":461,"line_end":461,"column_start":30,"column_end":34},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":5521},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":711667,"byte_end":711671,"line_start":470,"line_end":470,"column_start":31,"column_end":35},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":5521},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":711857,"byte_end":711861,"line_start":477,"line_end":477,"column_start":30,"column_end":34},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":5521},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":712047,"byte_end":712051,"line_start":484,"line_end":484,"column_start":32,"column_end":36},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":5521},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":712288,"byte_end":712293,"line_start":494,"line_end":494,"column_start":53,"column_end":58},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":5608},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":712555,"byte_end":712560,"line_start":503,"line_end":503,"column_start":53,"column_end":58},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":5608},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":712821,"byte_end":712826,"line_start":512,"line_end":512,"column_start":52,"column_end":57},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":5608},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":713091,"byte_end":713096,"line_start":521,"line_end":521,"column_start":52,"column_end":57},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":5608},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":713362,"byte_end":713367,"line_start":530,"line_end":530,"column_start":53,"column_end":58},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":5608},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":713580,"byte_end":713585,"line_start":538,"line_end":538,"column_start":32,"column_end":37},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":5608},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":713885,"byte_end":713890,"line_start":548,"line_end":548,"column_start":31,"column_end":36},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":5608},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":714233,"byte_end":714237,"line_start":561,"line_end":561,"column_start":52,"column_end":56},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":5550},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":714538,"byte_end":714542,"line_start":572,"line_end":572,"column_start":52,"column_end":56},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":5550},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":714844,"byte_end":714848,"line_start":583,"line_end":583,"column_start":53,"column_end":57},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":5550},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":715149,"byte_end":715153,"line_start":594,"line_end":594,"column_start":54,"column_end":58},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":5550},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":715454,"byte_end":715458,"line_start":605,"line_end":605,"column_start":53,"column_end":57},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":5550},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":715735,"byte_end":715739,"line_start":616,"line_end":616,"column_start":31,"column_end":35},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":5550},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":716101,"byte_end":716105,"line_start":627,"line_end":627,"column_start":30,"column_end":34},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":5550},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":716502,"byte_end":716506,"line_start":641,"line_end":641,"column_start":52,"column_end":56},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":5579},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":716807,"byte_end":716811,"line_start":652,"line_end":652,"column_start":52,"column_end":56},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":5579},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":717113,"byte_end":717117,"line_start":663,"line_end":663,"column_start":53,"column_end":57},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":5579},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":717418,"byte_end":717422,"line_start":674,"line_end":674,"column_start":54,"column_end":58},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":5579},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":717723,"byte_end":717727,"line_start":685,"line_end":685,"column_start":53,"column_end":57},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":5579},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":718051,"byte_end":718054,"line_start":699,"line_end":699,"column_start":53,"column_end":56},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":5463},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":718323,"byte_end":718326,"line_start":709,"line_end":709,"column_start":53,"column_end":56},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":5463},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":718594,"byte_end":718597,"line_start":719,"line_end":719,"column_start":52,"column_end":55},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":5463},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":718862,"byte_end":718865,"line_start":729,"line_end":729,"column_start":54,"column_end":57},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":5463},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":719129,"byte_end":719132,"line_start":739,"line_end":739,"column_start":53,"column_end":56},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":5463},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":719370,"byte_end":719373,"line_start":749,"line_end":749,"column_start":30,"column_end":33},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":5463},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":719598,"byte_end":719601,"line_start":757,"line_end":757,"column_start":29,"column_end":32},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":5463},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":719874,"byte_end":719877,"line_start":768,"line_end":768,"column_start":53,"column_end":56},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":5492},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":720145,"byte_end":720148,"line_start":778,"line_end":778,"column_start":52,"column_end":55},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":5492},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":720413,"byte_end":720416,"line_start":789,"line_end":789,"column_start":53,"column_end":56},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":5492},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":720686,"byte_end":720689,"line_start":799,"line_end":799,"column_start":54,"column_end":57},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":5492},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":720953,"byte_end":720956,"line_start":809,"line_end":809,"column_start":53,"column_end":56},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":5492},"to":{"krate":0,"index":3128}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":722622,"byte_end":722627,"line_start":863,"line_end":863,"column_start":30,"column_end":35},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":5608},"to":{"krate":0,"index":3262}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":723632,"byte_end":723636,"line_start":896,"line_end":896,"column_start":30,"column_end":34},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":5521},"to":{"krate":0,"index":3262}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":723746,"byte_end":723750,"line_start":902,"line_end":902,"column_start":30,"column_end":34},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":5550},"to":{"krate":0,"index":3262}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":725958,"byte_end":725962,"line_start":960,"line_end":960,"column_start":30,"column_end":34},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":5579},"to":{"krate":0,"index":3262}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":728168,"byte_end":728171,"line_start":1016,"line_end":1016,"column_start":30,"column_end":33},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":5463},"to":{"krate":0,"index":3262}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":728280,"byte_end":728283,"line_start":1022,"line_end":1022,"column_start":30,"column_end":33},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":5492},"to":{"krate":0,"index":3262}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":728502,"byte_end":728507,"line_start":1035,"line_end":1035,"column_start":31,"column_end":36},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":5608},"to":{"krate":0,"index":3282}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":728680,"byte_end":728684,"line_start":1044,"line_end":1044,"column_start":31,"column_end":35},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":5521},"to":{"krate":0,"index":3282}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":728872,"byte_end":728876,"line_start":1055,"line_end":1055,"column_start":31,"column_end":35},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":5550},"to":{"krate":0,"index":3282}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":729089,"byte_end":729093,"line_start":1066,"line_end":1066,"column_start":31,"column_end":35},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":5579},"to":{"krate":0,"index":3282}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":729306,"byte_end":729309,"line_start":1077,"line_end":1077,"column_start":31,"column_end":34},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":5463},"to":{"krate":0,"index":3282}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/color.rs","byte_start":729571,"byte_end":729574,"line_start":1091,"line_end":1091,"column_start":31,"column_end":34},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":5492},"to":{"krate":0,"index":3282}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":741099,"byte_end":741111,"line_start":133,"line_end":133,"column_start":6,"column_end":18},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":5688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":765345,"byte_end":765357,"line_start":806,"line_end":806,"column_start":27,"column_end":39},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":5688},"to":{"krate":0,"index":3549}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/dynimage.rs","byte_start":765890,"byte_end":765902,"line_start":828,"line_end":828,"column_start":23,"column_end":35},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":5688},"to":{"krate":0,"index":3562}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":780179,"byte_end":780190,"line_start":64,"line_end":64,"column_start":6,"column_end":17},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":5721},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":781600,"byte_end":781617,"line_start":113,"line_end":113,"column_start":28,"column_end":45},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":5764},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":782756,"byte_end":782771,"line_start":146,"line_end":146,"column_start":6,"column_end":21},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":3486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790418,"byte_end":790426,"line_start":324,"line_end":324,"column_start":6,"column_end":14},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":5798},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":790932,"byte_end":790937,"line_start":344,"line_end":344,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":3512}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":794633,"byte_end":794645,"line_start":441,"line_end":441,"column_start":32,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":3512},"to":{"krate":0,"index":3525}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":794652,"byte_end":794657,"line_start":441,"line_end":441,"column_start":51,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":3525}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":797057,"byte_end":797063,"line_start":513,"line_end":513,"column_start":44,"column_end":50},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":3536},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":799868,"byte_end":799884,"line_start":611,"line_end":611,"column_start":25,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":3549},"to":{"krate":0,"index":3562}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":805208,"byte_end":805216,"line_start":751,"line_end":751,"column_start":9,"column_end":17},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":3574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":806353,"byte_end":806361,"line_start":792,"line_end":792,"column_start":30,"column_end":38},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":3574},"to":{"krate":0,"index":3549}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/image.rs","byte_start":807182,"byte_end":807190,"line_start":824,"line_end":824,"column_start":26,"column_end":34},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":3574},"to":{"krate":0,"index":3562}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":818550,"byte_end":818565,"line_start":12,"line_end":12,"column_start":35,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":3692},"to":{"krate":0,"index":3621}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":818919,"byte_end":818923,"line_start":30,"line_end":30,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":3627}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":818926,"byte_end":818933,"line_start":30,"line_end":30,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":20,"index":170},"to":{"krate":0,"index":3627}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":818936,"byte_end":818939,"line_start":30,"line_end":30,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":20,"index":564},"to":{"krate":0,"index":3627}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":818942,"byte_end":818952,"line_start":30,"line_end":30,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1656},"to":{"krate":0,"index":3627}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":818961,"byte_end":818966,"line_start":30,"line_end":30,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":3627}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":818969,"byte_end":818976,"line_start":30,"line_end":30,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":20,"index":87},"to":{"krate":0,"index":3627}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":819452,"byte_end":819457,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":3640}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":819460,"byte_end":819467,"line_start":47,"line_end":47,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":20,"index":87},"to":{"krate":0,"index":3640}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":819470,"byte_end":819477,"line_start":47,"line_end":47,"column_start":42,"column_end":49},"kind":"SuperTrait","from":{"krate":20,"index":170},"to":{"krate":0,"index":3640}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820081,"byte_end":820085,"line_start":73,"line_end":73,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":3649}},{"span":{"file_name":"/home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.4/./src/traits.rs","byte_start":820088,"byte_end":820093,"line_start":73,"line_end":73,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":3649}}]}